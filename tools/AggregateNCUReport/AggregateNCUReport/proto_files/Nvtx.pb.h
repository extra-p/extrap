// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nvtx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Nvtx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Nvtx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NvtxCategories.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Nvtx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nvtx_2eproto;
class NvtxColor;
class NvtxColorDefaultTypeInternal;
extern NvtxColorDefaultTypeInternal _NvtxColor_default_instance_;
class NvtxDomainInfo;
class NvtxDomainInfoDefaultTypeInternal;
extern NvtxDomainInfoDefaultTypeInternal _NvtxDomainInfo_default_instance_;
class NvtxEventAttributes;
class NvtxEventAttributesDefaultTypeInternal;
extern NvtxEventAttributesDefaultTypeInternal _NvtxEventAttributes_default_instance_;
class NvtxMessage;
class NvtxMessageDefaultTypeInternal;
extern NvtxMessageDefaultTypeInternal _NvtxMessage_default_instance_;
class NvtxNameTable;
class NvtxNameTableDefaultTypeInternal;
extern NvtxNameTableDefaultTypeInternal _NvtxNameTable_default_instance_;
class NvtxPayload;
class NvtxPayloadDefaultTypeInternal;
extern NvtxPayloadDefaultTypeInternal _NvtxPayload_default_instance_;
class NvtxPushPopDomain;
class NvtxPushPopDomainDefaultTypeInternal;
extern NvtxPushPopDomainDefaultTypeInternal _NvtxPushPopDomain_default_instance_;
class NvtxPushPopRange;
class NvtxPushPopRangeDefaultTypeInternal;
extern NvtxPushPopRangeDefaultTypeInternal _NvtxPushPopRange_default_instance_;
class NvtxRegisteredString;
class NvtxRegisteredStringDefaultTypeInternal;
extern NvtxRegisteredStringDefaultTypeInternal _NvtxRegisteredString_default_instance_;
class NvtxReplyStateMessage;
class NvtxReplyStateMessageDefaultTypeInternal;
extern NvtxReplyStateMessageDefaultTypeInternal _NvtxReplyStateMessage_default_instance_;
class NvtxReplyStateMessage_TypeInfo;
class NvtxReplyStateMessage_TypeInfoDefaultTypeInternal;
extern NvtxReplyStateMessage_TypeInfoDefaultTypeInternal _NvtxReplyStateMessage_TypeInfo_default_instance_;
class NvtxRequestStateMessage;
class NvtxRequestStateMessageDefaultTypeInternal;
extern NvtxRequestStateMessageDefaultTypeInternal _NvtxRequestStateMessage_default_instance_;
class NvtxRequestStateMessage_TypeInfo;
class NvtxRequestStateMessage_TypeInfoDefaultTypeInternal;
extern NvtxRequestStateMessage_TypeInfoDefaultTypeInternal _NvtxRequestStateMessage_TypeInfo_default_instance_;
class NvtxStartEndDomain;
class NvtxStartEndDomainDefaultTypeInternal;
extern NvtxStartEndDomainDefaultTypeInternal _NvtxStartEndDomain_default_instance_;
class NvtxStartEndRange;
class NvtxStartEndRangeDefaultTypeInternal;
extern NvtxStartEndRangeDefaultTypeInternal _NvtxStartEndRange_default_instance_;
class NvtxState;
class NvtxStateDefaultTypeInternal;
extern NvtxStateDefaultTypeInternal _NvtxState_default_instance_;
class NvtxThread;
class NvtxThreadDefaultTypeInternal;
extern NvtxThreadDefaultTypeInternal _NvtxThread_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NvtxColor* Arena::CreateMaybeMessage<::NvtxColor>(Arena*);
template<> ::NvtxDomainInfo* Arena::CreateMaybeMessage<::NvtxDomainInfo>(Arena*);
template<> ::NvtxEventAttributes* Arena::CreateMaybeMessage<::NvtxEventAttributes>(Arena*);
template<> ::NvtxMessage* Arena::CreateMaybeMessage<::NvtxMessage>(Arena*);
template<> ::NvtxNameTable* Arena::CreateMaybeMessage<::NvtxNameTable>(Arena*);
template<> ::NvtxPayload* Arena::CreateMaybeMessage<::NvtxPayload>(Arena*);
template<> ::NvtxPushPopDomain* Arena::CreateMaybeMessage<::NvtxPushPopDomain>(Arena*);
template<> ::NvtxPushPopRange* Arena::CreateMaybeMessage<::NvtxPushPopRange>(Arena*);
template<> ::NvtxRegisteredString* Arena::CreateMaybeMessage<::NvtxRegisteredString>(Arena*);
template<> ::NvtxReplyStateMessage* Arena::CreateMaybeMessage<::NvtxReplyStateMessage>(Arena*);
template<> ::NvtxReplyStateMessage_TypeInfo* Arena::CreateMaybeMessage<::NvtxReplyStateMessage_TypeInfo>(Arena*);
template<> ::NvtxRequestStateMessage* Arena::CreateMaybeMessage<::NvtxRequestStateMessage>(Arena*);
template<> ::NvtxRequestStateMessage_TypeInfo* Arena::CreateMaybeMessage<::NvtxRequestStateMessage_TypeInfo>(Arena*);
template<> ::NvtxStartEndDomain* Arena::CreateMaybeMessage<::NvtxStartEndDomain>(Arena*);
template<> ::NvtxStartEndRange* Arena::CreateMaybeMessage<::NvtxStartEndRange>(Arena*);
template<> ::NvtxState* Arena::CreateMaybeMessage<::NvtxState>(Arena*);
template<> ::NvtxThread* Arena::CreateMaybeMessage<::NvtxThread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NvtxMethod : int {
  NvtxMethodInvalid = 0,
  NvtxMethodRequestStateMessage = 1,
  NvtxMethodReplyStateMessage = 2
};
bool NvtxMethod_IsValid(int value);
constexpr NvtxMethod NvtxMethod_MIN = NvtxMethodInvalid;
constexpr NvtxMethod NvtxMethod_MAX = NvtxMethodReplyStateMessage;
constexpr int NvtxMethod_ARRAYSIZE = NvtxMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxMethod_descriptor();
template<typename T>
inline const std::string& NvtxMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvtxMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvtxMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvtxMethod_descriptor(), enum_t_value);
}
inline bool NvtxMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvtxMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvtxMethod>(
    NvtxMethod_descriptor(), name, value);
}
enum NvtxColorType : int {
  NvtxColorTypeUnknown = 0,
  NvtxColorTypeArgb = 1
};
bool NvtxColorType_IsValid(int value);
constexpr NvtxColorType NvtxColorType_MIN = NvtxColorTypeUnknown;
constexpr NvtxColorType NvtxColorType_MAX = NvtxColorTypeArgb;
constexpr int NvtxColorType_ARRAYSIZE = NvtxColorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxColorType_descriptor();
template<typename T>
inline const std::string& NvtxColorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvtxColorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvtxColorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvtxColorType_descriptor(), enum_t_value);
}
inline bool NvtxColorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvtxColorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvtxColorType>(
    NvtxColorType_descriptor(), name, value);
}
enum NvtxPayloadType : int {
  NvtxPayloadTypeUnknown = 0,
  NvtxPayloadTypeUint64 = 1,
  NvtxPayloadTypeInt64 = 2,
  NvtxPayloadTypeDouble = 3,
  NvtxPayloadTypeUint32 = 4,
  NvtxPayloadTypeInt32 = 5,
  NvtxPayloadTypeFloat = 6
};
bool NvtxPayloadType_IsValid(int value);
constexpr NvtxPayloadType NvtxPayloadType_MIN = NvtxPayloadTypeUnknown;
constexpr NvtxPayloadType NvtxPayloadType_MAX = NvtxPayloadTypeFloat;
constexpr int NvtxPayloadType_ARRAYSIZE = NvtxPayloadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxPayloadType_descriptor();
template<typename T>
inline const std::string& NvtxPayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvtxPayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvtxPayloadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvtxPayloadType_descriptor(), enum_t_value);
}
inline bool NvtxPayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvtxPayloadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvtxPayloadType>(
    NvtxPayloadType_descriptor(), name, value);
}
enum NvtxMessageType : int {
  NvtxMessageTypeUnknown = 0,
  NvtxMessageTypeAscii = 1,
  NvtxMessageTypeUnicode = 2,
  NvtxMessageTypeRegistered = 3
};
bool NvtxMessageType_IsValid(int value);
constexpr NvtxMessageType NvtxMessageType_MIN = NvtxMessageTypeUnknown;
constexpr NvtxMessageType NvtxMessageType_MAX = NvtxMessageTypeRegistered;
constexpr int NvtxMessageType_ARRAYSIZE = NvtxMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxMessageType_descriptor();
template<typename T>
inline const std::string& NvtxMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvtxMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvtxMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvtxMessageType_descriptor(), enum_t_value);
}
inline bool NvtxMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvtxMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvtxMessageType>(
    NvtxMessageType_descriptor(), name, value);
}
enum NvtxNameFamily : int {
  NvtxNameFamilyUnknown = 0,
  NvtxNameFamilyCategory = 1,
  NvtxNameFamilyOsThread = 2,
  NvtxNameFamilyCudaDevice = 3,
  NvtxNameFamilyCudaContext = 4,
  NvtxNameFamilyCudaStream = 5,
  NvtxNameFamilyCudaEvent = 6,
  NvtxNameFamilyClDevice = 7,
  NvtxNameFamilyClContext = 8,
  NvtxNameFamilyClCommandQueue = 10,
  NvtxNameFamilyClMemObject = 11,
  NvtxNameFamilyClSampler = 12,
  NvtxNameFamilyClProgram = 13,
  NvtxNameFamilyClEvent = 14,
  NvtxNameFamilyCudaRtDevice = 15,
  NvtxNameFamilyCudaRtStream = 16,
  NvtxNameFamilyCudaRtEvent = 17
};
bool NvtxNameFamily_IsValid(int value);
constexpr NvtxNameFamily NvtxNameFamily_MIN = NvtxNameFamilyUnknown;
constexpr NvtxNameFamily NvtxNameFamily_MAX = NvtxNameFamilyCudaRtEvent;
constexpr int NvtxNameFamily_ARRAYSIZE = NvtxNameFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxNameFamily_descriptor();
template<typename T>
inline const std::string& NvtxNameFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvtxNameFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvtxNameFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvtxNameFamily_descriptor(), enum_t_value);
}
inline bool NvtxNameFamily_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvtxNameFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvtxNameFamily>(
    NvtxNameFamily_descriptor(), name, value);
}
// ===================================================================

class NvtxRequestStateMessage_TypeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxRequestStateMessage.TypeInfo) */ {
 public:
  inline NvtxRequestStateMessage_TypeInfo() : NvtxRequestStateMessage_TypeInfo(nullptr) {}
  virtual ~NvtxRequestStateMessage_TypeInfo();

  NvtxRequestStateMessage_TypeInfo(const NvtxRequestStateMessage_TypeInfo& from);
  NvtxRequestStateMessage_TypeInfo(NvtxRequestStateMessage_TypeInfo&& from) noexcept
    : NvtxRequestStateMessage_TypeInfo() {
    *this = ::std::move(from);
  }

  inline NvtxRequestStateMessage_TypeInfo& operator=(const NvtxRequestStateMessage_TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxRequestStateMessage_TypeInfo& operator=(NvtxRequestStateMessage_TypeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxRequestStateMessage_TypeInfo& default_instance();

  static inline const NvtxRequestStateMessage_TypeInfo* internal_default_instance() {
    return reinterpret_cast<const NvtxRequestStateMessage_TypeInfo*>(
               &_NvtxRequestStateMessage_TypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NvtxRequestStateMessage_TypeInfo& a, NvtxRequestStateMessage_TypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxRequestStateMessage_TypeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxRequestStateMessage_TypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxRequestStateMessage_TypeInfo* New() const final {
    return CreateMaybeMessage<NvtxRequestStateMessage_TypeInfo>(nullptr);
  }

  NvtxRequestStateMessage_TypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxRequestStateMessage_TypeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxRequestStateMessage_TypeInfo& from);
  void MergeFrom(const NvtxRequestStateMessage_TypeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxRequestStateMessage_TypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxRequestStateMessage.TypeInfo";
  }
  protected:
  explicit NvtxRequestStateMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::NvtxCategory category() const;
  void set_category(::NvtxCategory value);
  private:
  ::NvtxCategory _internal_category() const;
  void _internal_set_category(::NvtxCategory value);
  public:

  // optional .NvtxMethod Method = 2 [default = NvtxMethodRequestStateMessage];
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::NvtxMethod method() const;
  void set_method(::NvtxMethod value);
  private:
  ::NvtxMethod _internal_method() const;
  void _internal_set_method(::NvtxMethod value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxRequestStateMessage.TypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int category_;
  int method_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxRequestStateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxRequestStateMessage) */ {
 public:
  inline NvtxRequestStateMessage() : NvtxRequestStateMessage(nullptr) {}
  virtual ~NvtxRequestStateMessage();

  NvtxRequestStateMessage(const NvtxRequestStateMessage& from);
  NvtxRequestStateMessage(NvtxRequestStateMessage&& from) noexcept
    : NvtxRequestStateMessage() {
    *this = ::std::move(from);
  }

  inline NvtxRequestStateMessage& operator=(const NvtxRequestStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxRequestStateMessage& operator=(NvtxRequestStateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxRequestStateMessage& default_instance();

  static inline const NvtxRequestStateMessage* internal_default_instance() {
    return reinterpret_cast<const NvtxRequestStateMessage*>(
               &_NvtxRequestStateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NvtxRequestStateMessage& a, NvtxRequestStateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxRequestStateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxRequestStateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxRequestStateMessage* New() const final {
    return CreateMaybeMessage<NvtxRequestStateMessage>(nullptr);
  }

  NvtxRequestStateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxRequestStateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxRequestStateMessage& from);
  void MergeFrom(const NvtxRequestStateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxRequestStateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxRequestStateMessage";
  }
  protected:
  explicit NvtxRequestStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NvtxRequestStateMessage_TypeInfo TypeInfo;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NvtxRequestStateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxPayload) */ {
 public:
  inline NvtxPayload() : NvtxPayload(nullptr) {}
  virtual ~NvtxPayload();

  NvtxPayload(const NvtxPayload& from);
  NvtxPayload(NvtxPayload&& from) noexcept
    : NvtxPayload() {
    *this = ::std::move(from);
  }

  inline NvtxPayload& operator=(const NvtxPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxPayload& operator=(NvtxPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxPayload& default_instance();

  static inline const NvtxPayload* internal_default_instance() {
    return reinterpret_cast<const NvtxPayload*>(
               &_NvtxPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NvtxPayload& a, NvtxPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxPayload* New() const final {
    return CreateMaybeMessage<NvtxPayload>(nullptr);
  }

  NvtxPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxPayload& from);
  void MergeFrom(const NvtxPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxPayload";
  }
  protected:
  explicit NvtxPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kULLValueFieldNumber = 2,
    kLLValueFieldNumber = 3,
    kPayloadTypeFieldNumber = 1,
    kUValueFieldNumber = 5,
    kDoubleValueFieldNumber = 4,
    kIValueFieldNumber = 6,
    kFValueFieldNumber = 7,
  };
  // optional uint64 ULLValue = 2;
  bool has_ullvalue() const;
  private:
  bool _internal_has_ullvalue() const;
  public:
  void clear_ullvalue();
  ::PROTOBUF_NAMESPACE_ID::uint64 ullvalue() const;
  void set_ullvalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ullvalue() const;
  void _internal_set_ullvalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 LLValue = 3;
  bool has_llvalue() const;
  private:
  bool _internal_has_llvalue() const;
  public:
  void clear_llvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 llvalue() const;
  void set_llvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_llvalue() const;
  void _internal_set_llvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .NvtxPayloadType PayloadType = 1 [default = NvtxPayloadTypeUnknown];
  bool has_payloadtype() const;
  private:
  bool _internal_has_payloadtype() const;
  public:
  void clear_payloadtype();
  ::NvtxPayloadType payloadtype() const;
  void set_payloadtype(::NvtxPayloadType value);
  private:
  ::NvtxPayloadType _internal_payloadtype() const;
  void _internal_set_payloadtype(::NvtxPayloadType value);
  public:

  // optional uint32 UValue = 5;
  bool has_uvalue() const;
  private:
  bool _internal_has_uvalue() const;
  public:
  void clear_uvalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 uvalue() const;
  void set_uvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uvalue() const;
  void _internal_set_uvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double DoubleValue = 4;
  bool has_doublevalue() const;
  private:
  bool _internal_has_doublevalue() const;
  public:
  void clear_doublevalue();
  double doublevalue() const;
  void set_doublevalue(double value);
  private:
  double _internal_doublevalue() const;
  void _internal_set_doublevalue(double value);
  public:

  // optional int32 IValue = 6;
  bool has_ivalue() const;
  private:
  bool _internal_has_ivalue() const;
  public:
  void clear_ivalue();
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue() const;
  void set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ivalue() const;
  void _internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float FValue = 7;
  bool has_fvalue() const;
  private:
  bool _internal_has_fvalue() const;
  public:
  void clear_fvalue();
  float fvalue() const;
  void set_fvalue(float value);
  private:
  float _internal_fvalue() const;
  void _internal_set_fvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ullvalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 llvalue_;
  int payloadtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uvalue_;
  double doublevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue_;
  float fvalue_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxMessage) */ {
 public:
  inline NvtxMessage() : NvtxMessage(nullptr) {}
  virtual ~NvtxMessage();

  NvtxMessage(const NvtxMessage& from);
  NvtxMessage(NvtxMessage&& from) noexcept
    : NvtxMessage() {
    *this = ::std::move(from);
  }

  inline NvtxMessage& operator=(const NvtxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxMessage& operator=(NvtxMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxMessage& default_instance();

  static inline const NvtxMessage* internal_default_instance() {
    return reinterpret_cast<const NvtxMessage*>(
               &_NvtxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NvtxMessage& a, NvtxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxMessage* New() const final {
    return CreateMaybeMessage<NvtxMessage>(nullptr);
  }

  NvtxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxMessage& from);
  void MergeFrom(const NvtxMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxMessage";
  }
  protected:
  explicit NvtxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kHandleFieldNumber = 3,
    kMessageTypeFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint64 handle = 3;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::uint64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .NvtxMessageType MessageType = 1 [default = NvtxMessageTypeUnknown];
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  ::NvtxMessageType messagetype() const;
  void set_messagetype(::NvtxMessageType value);
  private:
  ::NvtxMessageType _internal_messagetype() const;
  void _internal_set_messagetype(::NvtxMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 handle_;
  int messagetype_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxColor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxColor) */ {
 public:
  inline NvtxColor() : NvtxColor(nullptr) {}
  virtual ~NvtxColor();

  NvtxColor(const NvtxColor& from);
  NvtxColor(NvtxColor&& from) noexcept
    : NvtxColor() {
    *this = ::std::move(from);
  }

  inline NvtxColor& operator=(const NvtxColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxColor& operator=(NvtxColor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxColor& default_instance();

  static inline const NvtxColor* internal_default_instance() {
    return reinterpret_cast<const NvtxColor*>(
               &_NvtxColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NvtxColor& a, NvtxColor& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxColor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxColor* New() const final {
    return CreateMaybeMessage<NvtxColor>(nullptr);
  }

  NvtxColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxColor& from);
  void MergeFrom(const NvtxColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxColor";
  }
  protected:
  explicit NvtxColor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorTypeFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // required .NvtxColorType ColorType = 1 [default = NvtxColorTypeUnknown];
  bool has_colortype() const;
  private:
  bool _internal_has_colortype() const;
  public:
  void clear_colortype();
  ::NvtxColorType colortype() const;
  void set_colortype(::NvtxColorType value);
  private:
  ::NvtxColorType _internal_colortype() const;
  void _internal_set_colortype(::NvtxColorType value);
  public:

  // optional uint32 Color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int colortype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxEventAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxEventAttributes) */ {
 public:
  inline NvtxEventAttributes() : NvtxEventAttributes(nullptr) {}
  virtual ~NvtxEventAttributes();

  NvtxEventAttributes(const NvtxEventAttributes& from);
  NvtxEventAttributes(NvtxEventAttributes&& from) noexcept
    : NvtxEventAttributes() {
    *this = ::std::move(from);
  }

  inline NvtxEventAttributes& operator=(const NvtxEventAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxEventAttributes& operator=(NvtxEventAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxEventAttributes& default_instance();

  static inline const NvtxEventAttributes* internal_default_instance() {
    return reinterpret_cast<const NvtxEventAttributes*>(
               &_NvtxEventAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NvtxEventAttributes& a, NvtxEventAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxEventAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxEventAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxEventAttributes* New() const final {
    return CreateMaybeMessage<NvtxEventAttributes>(nullptr);
  }

  NvtxEventAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxEventAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxEventAttributes& from);
  void MergeFrom(const NvtxEventAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxEventAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxEventAttributes";
  }
  protected:
  explicit NvtxEventAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kMessageFieldNumber = 5,
    kVersionFieldNumber = 1,
    kCategoryFieldNumber = 2,
  };
  // required .NvtxColor Color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::NvtxColor& color() const;
  ::NvtxColor* release_color();
  ::NvtxColor* mutable_color();
  void set_allocated_color(::NvtxColor* color);
  private:
  const ::NvtxColor& _internal_color() const;
  ::NvtxColor* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::NvtxColor* color);
  ::NvtxColor* unsafe_arena_release_color();

  // required .NvtxPayload Payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::NvtxPayload& payload() const;
  ::NvtxPayload* release_payload();
  ::NvtxPayload* mutable_payload();
  void set_allocated_payload(::NvtxPayload* payload);
  private:
  const ::NvtxPayload& _internal_payload() const;
  ::NvtxPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::NvtxPayload* payload);
  ::NvtxPayload* unsafe_arena_release_payload();

  // required .NvtxMessage Message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::NvtxMessage& message() const;
  ::NvtxMessage* release_message();
  ::NvtxMessage* mutable_message();
  void set_allocated_message(::NvtxMessage* message);
  private:
  const ::NvtxMessage& _internal_message() const;
  ::NvtxMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::NvtxMessage* message);
  ::NvtxMessage* unsafe_arena_release_message();

  // required uint32 Version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::uint32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_category() const;
  void _internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxEventAttributes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NvtxColor* color_;
  ::NvtxPayload* payload_;
  ::NvtxMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 category_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxPushPopRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxPushPopRange) */ {
 public:
  inline NvtxPushPopRange() : NvtxPushPopRange(nullptr) {}
  virtual ~NvtxPushPopRange();

  NvtxPushPopRange(const NvtxPushPopRange& from);
  NvtxPushPopRange(NvtxPushPopRange&& from) noexcept
    : NvtxPushPopRange() {
    *this = ::std::move(from);
  }

  inline NvtxPushPopRange& operator=(const NvtxPushPopRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxPushPopRange& operator=(NvtxPushPopRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxPushPopRange& default_instance();

  static inline const NvtxPushPopRange* internal_default_instance() {
    return reinterpret_cast<const NvtxPushPopRange*>(
               &_NvtxPushPopRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NvtxPushPopRange& a, NvtxPushPopRange& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxPushPopRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxPushPopRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxPushPopRange* New() const final {
    return CreateMaybeMessage<NvtxPushPopRange>(nullptr);
  }

  NvtxPushPopRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxPushPopRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxPushPopRange& from);
  void MergeFrom(const NvtxPushPopRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxPushPopRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxPushPopRange";
  }
  protected:
  explicit NvtxPushPopRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttributesFieldNumber = 2,
    kLastApiCallIdFieldNumber = 3,
  };
  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .NvtxEventAttributes Attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::NvtxEventAttributes& attributes() const;
  ::NvtxEventAttributes* release_attributes();
  ::NvtxEventAttributes* mutable_attributes();
  void set_allocated_attributes(::NvtxEventAttributes* attributes);
  private:
  const ::NvtxEventAttributes& _internal_attributes() const;
  ::NvtxEventAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::NvtxEventAttributes* attributes);
  ::NvtxEventAttributes* unsafe_arena_release_attributes();

  // optional uint64 LastApiCallId = 3;
  bool has_lastapicallid() const;
  private:
  bool _internal_has_lastapicallid() const;
  public:
  void clear_lastapicallid();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastapicallid() const;
  void set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastapicallid() const;
  void _internal_set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxPushPopRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NvtxEventAttributes* attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastapicallid_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxStartEndRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxStartEndRange) */ {
 public:
  inline NvtxStartEndRange() : NvtxStartEndRange(nullptr) {}
  virtual ~NvtxStartEndRange();

  NvtxStartEndRange(const NvtxStartEndRange& from);
  NvtxStartEndRange(NvtxStartEndRange&& from) noexcept
    : NvtxStartEndRange() {
    *this = ::std::move(from);
  }

  inline NvtxStartEndRange& operator=(const NvtxStartEndRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxStartEndRange& operator=(NvtxStartEndRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxStartEndRange& default_instance();

  static inline const NvtxStartEndRange* internal_default_instance() {
    return reinterpret_cast<const NvtxStartEndRange*>(
               &_NvtxStartEndRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NvtxStartEndRange& a, NvtxStartEndRange& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxStartEndRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxStartEndRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxStartEndRange* New() const final {
    return CreateMaybeMessage<NvtxStartEndRange>(nullptr);
  }

  NvtxStartEndRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxStartEndRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxStartEndRange& from);
  void MergeFrom(const NvtxStartEndRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxStartEndRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxStartEndRange";
  }
  protected:
  explicit NvtxStartEndRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAttributesFieldNumber = 3,
    kIdFieldNumber = 1,
    kLastApiCallIdFieldNumber = 4,
    kStartTIDFieldNumber = 5,
  };
  // required string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .NvtxEventAttributes Attributes = 3;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::NvtxEventAttributes& attributes() const;
  ::NvtxEventAttributes* release_attributes();
  ::NvtxEventAttributes* mutable_attributes();
  void set_allocated_attributes(::NvtxEventAttributes* attributes);
  private:
  const ::NvtxEventAttributes& _internal_attributes() const;
  ::NvtxEventAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::NvtxEventAttributes* attributes);
  ::NvtxEventAttributes* unsafe_arena_release_attributes();

  // required uint64 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 LastApiCallId = 4;
  bool has_lastapicallid() const;
  private:
  bool _internal_has_lastapicallid() const;
  public:
  void clear_lastapicallid();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastapicallid() const;
  void set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastapicallid() const;
  void _internal_set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 StartTID = 5;
  bool has_starttid() const;
  private:
  bool _internal_has_starttid() const;
  public:
  void clear_starttid();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttid() const;
  void set_starttid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttid() const;
  void _internal_set_starttid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxStartEndRange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NvtxEventAttributes* attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastapicallid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttid_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxPushPopDomain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxPushPopDomain) */ {
 public:
  inline NvtxPushPopDomain() : NvtxPushPopDomain(nullptr) {}
  virtual ~NvtxPushPopDomain();

  NvtxPushPopDomain(const NvtxPushPopDomain& from);
  NvtxPushPopDomain(NvtxPushPopDomain&& from) noexcept
    : NvtxPushPopDomain() {
    *this = ::std::move(from);
  }

  inline NvtxPushPopDomain& operator=(const NvtxPushPopDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxPushPopDomain& operator=(NvtxPushPopDomain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxPushPopDomain& default_instance();

  static inline const NvtxPushPopDomain* internal_default_instance() {
    return reinterpret_cast<const NvtxPushPopDomain*>(
               &_NvtxPushPopDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NvtxPushPopDomain& a, NvtxPushPopDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxPushPopDomain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxPushPopDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxPushPopDomain* New() const final {
    return CreateMaybeMessage<NvtxPushPopDomain>(nullptr);
  }

  NvtxPushPopDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxPushPopDomain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxPushPopDomain& from);
  void MergeFrom(const NvtxPushPopDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxPushPopDomain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxPushPopDomain";
  }
  protected:
  explicit NvtxPushPopDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .NvtxPushPopRange Stack = 3;
  int stack_size() const;
  private:
  int _internal_stack_size() const;
  public:
  void clear_stack();
  ::NvtxPushPopRange* mutable_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopRange >*
      mutable_stack();
  private:
  const ::NvtxPushPopRange& _internal_stack(int index) const;
  ::NvtxPushPopRange* _internal_add_stack();
  public:
  const ::NvtxPushPopRange& stack(int index) const;
  ::NvtxPushPopRange* add_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopRange >&
      stack() const;

  // required uint64 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxPushPopDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopRange > stack_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxStartEndDomain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxStartEndDomain) */ {
 public:
  inline NvtxStartEndDomain() : NvtxStartEndDomain(nullptr) {}
  virtual ~NvtxStartEndDomain();

  NvtxStartEndDomain(const NvtxStartEndDomain& from);
  NvtxStartEndDomain(NvtxStartEndDomain&& from) noexcept
    : NvtxStartEndDomain() {
    *this = ::std::move(from);
  }

  inline NvtxStartEndDomain& operator=(const NvtxStartEndDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxStartEndDomain& operator=(NvtxStartEndDomain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxStartEndDomain& default_instance();

  static inline const NvtxStartEndDomain* internal_default_instance() {
    return reinterpret_cast<const NvtxStartEndDomain*>(
               &_NvtxStartEndDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NvtxStartEndDomain& a, NvtxStartEndDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxStartEndDomain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxStartEndDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxStartEndDomain* New() const final {
    return CreateMaybeMessage<NvtxStartEndDomain>(nullptr);
  }

  NvtxStartEndDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxStartEndDomain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxStartEndDomain& from);
  void MergeFrom(const NvtxStartEndDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxStartEndDomain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxStartEndDomain";
  }
  protected:
  explicit NvtxStartEndDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .NvtxStartEndRange Ranges = 3;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::NvtxStartEndRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndRange >*
      mutable_ranges();
  private:
  const ::NvtxStartEndRange& _internal_ranges(int index) const;
  ::NvtxStartEndRange* _internal_add_ranges();
  public:
  const ::NvtxStartEndRange& ranges(int index) const;
  ::NvtxStartEndRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndRange >&
      ranges() const;

  // required uint64 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxStartEndDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndRange > ranges_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxRegisteredString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxRegisteredString) */ {
 public:
  inline NvtxRegisteredString() : NvtxRegisteredString(nullptr) {}
  virtual ~NvtxRegisteredString();

  NvtxRegisteredString(const NvtxRegisteredString& from);
  NvtxRegisteredString(NvtxRegisteredString&& from) noexcept
    : NvtxRegisteredString() {
    *this = ::std::move(from);
  }

  inline NvtxRegisteredString& operator=(const NvtxRegisteredString& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxRegisteredString& operator=(NvtxRegisteredString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxRegisteredString& default_instance();

  static inline const NvtxRegisteredString* internal_default_instance() {
    return reinterpret_cast<const NvtxRegisteredString*>(
               &_NvtxRegisteredString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NvtxRegisteredString& a, NvtxRegisteredString& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxRegisteredString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxRegisteredString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxRegisteredString* New() const final {
    return CreateMaybeMessage<NvtxRegisteredString>(nullptr);
  }

  NvtxRegisteredString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxRegisteredString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxRegisteredString& from);
  void MergeFrom(const NvtxRegisteredString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxRegisteredString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxRegisteredString";
  }
  protected:
  explicit NvtxRegisteredString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint64 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxRegisteredString)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxDomainInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxDomainInfo) */ {
 public:
  inline NvtxDomainInfo() : NvtxDomainInfo(nullptr) {}
  virtual ~NvtxDomainInfo();

  NvtxDomainInfo(const NvtxDomainInfo& from);
  NvtxDomainInfo(NvtxDomainInfo&& from) noexcept
    : NvtxDomainInfo() {
    *this = ::std::move(from);
  }

  inline NvtxDomainInfo& operator=(const NvtxDomainInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxDomainInfo& operator=(NvtxDomainInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxDomainInfo& default_instance();

  static inline const NvtxDomainInfo* internal_default_instance() {
    return reinterpret_cast<const NvtxDomainInfo*>(
               &_NvtxDomainInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NvtxDomainInfo& a, NvtxDomainInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxDomainInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxDomainInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxDomainInfo* New() const final {
    return CreateMaybeMessage<NvtxDomainInfo>(nullptr);
  }

  NvtxDomainInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxDomainInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxDomainInfo& from);
  void MergeFrom(const NvtxDomainInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxDomainInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxDomainInfo";
  }
  protected:
  explicit NvtxDomainInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 3,
    kNameTablesFieldNumber = 4,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .NvtxRegisteredString Strings = 3;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  ::NvtxRegisteredString* mutable_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >*
      mutable_strings();
  private:
  const ::NvtxRegisteredString& _internal_strings(int index) const;
  ::NvtxRegisteredString* _internal_add_strings();
  public:
  const ::NvtxRegisteredString& strings(int index) const;
  ::NvtxRegisteredString* add_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >&
      strings() const;

  // repeated .NvtxNameTable NameTables = 4;
  int nametables_size() const;
  private:
  int _internal_nametables_size() const;
  public:
  void clear_nametables();
  ::NvtxNameTable* mutable_nametables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxNameTable >*
      mutable_nametables();
  private:
  const ::NvtxNameTable& _internal_nametables(int index) const;
  ::NvtxNameTable* _internal_add_nametables();
  public:
  const ::NvtxNameTable& nametables(int index) const;
  ::NvtxNameTable* add_nametables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxNameTable >&
      nametables() const;

  // required string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint64 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxDomainInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString > strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxNameTable > nametables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxThread PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxThread) */ {
 public:
  inline NvtxThread() : NvtxThread(nullptr) {}
  virtual ~NvtxThread();

  NvtxThread(const NvtxThread& from);
  NvtxThread(NvtxThread&& from) noexcept
    : NvtxThread() {
    *this = ::std::move(from);
  }

  inline NvtxThread& operator=(const NvtxThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxThread& operator=(NvtxThread&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxThread& default_instance();

  static inline const NvtxThread* internal_default_instance() {
    return reinterpret_cast<const NvtxThread*>(
               &_NvtxThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NvtxThread& a, NvtxThread& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxThread* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxThread* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxThread* New() const final {
    return CreateMaybeMessage<NvtxThread>(nullptr);
  }

  NvtxThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxThread& from);
  void MergeFrom(const NvtxThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxThread";
  }
  protected:
  explicit NvtxThread(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushPopDomainsFieldNumber = 2,
    kTIDFieldNumber = 1,
  };
  // repeated .NvtxPushPopDomain PushPopDomains = 2;
  int pushpopdomains_size() const;
  private:
  int _internal_pushpopdomains_size() const;
  public:
  void clear_pushpopdomains();
  ::NvtxPushPopDomain* mutable_pushpopdomains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopDomain >*
      mutable_pushpopdomains();
  private:
  const ::NvtxPushPopDomain& _internal_pushpopdomains(int index) const;
  ::NvtxPushPopDomain* _internal_add_pushpopdomains();
  public:
  const ::NvtxPushPopDomain& pushpopdomains(int index) const;
  ::NvtxPushPopDomain* add_pushpopdomains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopDomain >&
      pushpopdomains() const;

  // required uint32 TID = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tid() const;
  void _internal_set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxThread)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopDomain > pushpopdomains_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxNameTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxNameTable) */ {
 public:
  inline NvtxNameTable() : NvtxNameTable(nullptr) {}
  virtual ~NvtxNameTable();

  NvtxNameTable(const NvtxNameTable& from);
  NvtxNameTable(NvtxNameTable&& from) noexcept
    : NvtxNameTable() {
    *this = ::std::move(from);
  }

  inline NvtxNameTable& operator=(const NvtxNameTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxNameTable& operator=(NvtxNameTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxNameTable& default_instance();

  static inline const NvtxNameTable* internal_default_instance() {
    return reinterpret_cast<const NvtxNameTable*>(
               &_NvtxNameTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NvtxNameTable& a, NvtxNameTable& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxNameTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxNameTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxNameTable* New() const final {
    return CreateMaybeMessage<NvtxNameTable>(nullptr);
  }

  NvtxNameTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxNameTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxNameTable& from);
  void MergeFrom(const NvtxNameTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxNameTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxNameTable";
  }
  protected:
  explicit NvtxNameTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingsFieldNumber = 2,
    kFamilyFieldNumber = 1,
  };
  // repeated .NvtxRegisteredString Mappings = 2;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;
  public:
  void clear_mappings();
  ::NvtxRegisteredString* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >*
      mutable_mappings();
  private:
  const ::NvtxRegisteredString& _internal_mappings(int index) const;
  ::NvtxRegisteredString* _internal_add_mappings();
  public:
  const ::NvtxRegisteredString& mappings(int index) const;
  ::NvtxRegisteredString* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >&
      mappings() const;

  // required .NvtxNameFamily Family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  ::NvtxNameFamily family() const;
  void set_family(::NvtxNameFamily value);
  private:
  ::NvtxNameFamily _internal_family() const;
  void _internal_set_family(::NvtxNameFamily value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxNameTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString > mappings_;
  int family_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxState) */ {
 public:
  inline NvtxState() : NvtxState(nullptr) {}
  virtual ~NvtxState();

  NvtxState(const NvtxState& from);
  NvtxState(NvtxState&& from) noexcept
    : NvtxState() {
    *this = ::std::move(from);
  }

  inline NvtxState& operator=(const NvtxState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxState& operator=(NvtxState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxState& default_instance();

  static inline const NvtxState* internal_default_instance() {
    return reinterpret_cast<const NvtxState*>(
               &_NvtxState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NvtxState& a, NvtxState& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxState* New() const final {
    return CreateMaybeMessage<NvtxState>(nullptr);
  }

  NvtxState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxState& from);
  void MergeFrom(const NvtxState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxState";
  }
  protected:
  explicit NvtxState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 1,
    kThreadsFieldNumber = 2,
    kStartEndDomainsFieldNumber = 3,
    kDefaultDomainFieldNumber = 4,
  };
  // repeated .NvtxDomainInfo Domains = 1;
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  ::NvtxDomainInfo* mutable_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxDomainInfo >*
      mutable_domains();
  private:
  const ::NvtxDomainInfo& _internal_domains(int index) const;
  ::NvtxDomainInfo* _internal_add_domains();
  public:
  const ::NvtxDomainInfo& domains(int index) const;
  ::NvtxDomainInfo* add_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxDomainInfo >&
      domains() const;

  // repeated .NvtxThread Threads = 2;
  int threads_size() const;
  private:
  int _internal_threads_size() const;
  public:
  void clear_threads();
  ::NvtxThread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxThread >*
      mutable_threads();
  private:
  const ::NvtxThread& _internal_threads(int index) const;
  ::NvtxThread* _internal_add_threads();
  public:
  const ::NvtxThread& threads(int index) const;
  ::NvtxThread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxThread >&
      threads() const;

  // repeated .NvtxStartEndDomain StartEndDomains = 3;
  int startenddomains_size() const;
  private:
  int _internal_startenddomains_size() const;
  public:
  void clear_startenddomains();
  ::NvtxStartEndDomain* mutable_startenddomains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndDomain >*
      mutable_startenddomains();
  private:
  const ::NvtxStartEndDomain& _internal_startenddomains(int index) const;
  ::NvtxStartEndDomain* _internal_add_startenddomains();
  public:
  const ::NvtxStartEndDomain& startenddomains(int index) const;
  ::NvtxStartEndDomain* add_startenddomains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndDomain >&
      startenddomains() const;

  // optional uint64 DefaultDomain = 4;
  bool has_defaultdomain() const;
  private:
  bool _internal_has_defaultdomain() const;
  public:
  void clear_defaultdomain();
  ::PROTOBUF_NAMESPACE_ID::uint64 defaultdomain() const;
  void set_defaultdomain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_defaultdomain() const;
  void _internal_set_defaultdomain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxDomainInfo > domains_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxThread > threads_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndDomain > startenddomains_;
  ::PROTOBUF_NAMESPACE_ID::uint64 defaultdomain_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxReplyStateMessage_TypeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxReplyStateMessage.TypeInfo) */ {
 public:
  inline NvtxReplyStateMessage_TypeInfo() : NvtxReplyStateMessage_TypeInfo(nullptr) {}
  virtual ~NvtxReplyStateMessage_TypeInfo();

  NvtxReplyStateMessage_TypeInfo(const NvtxReplyStateMessage_TypeInfo& from);
  NvtxReplyStateMessage_TypeInfo(NvtxReplyStateMessage_TypeInfo&& from) noexcept
    : NvtxReplyStateMessage_TypeInfo() {
    *this = ::std::move(from);
  }

  inline NvtxReplyStateMessage_TypeInfo& operator=(const NvtxReplyStateMessage_TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxReplyStateMessage_TypeInfo& operator=(NvtxReplyStateMessage_TypeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxReplyStateMessage_TypeInfo& default_instance();

  static inline const NvtxReplyStateMessage_TypeInfo* internal_default_instance() {
    return reinterpret_cast<const NvtxReplyStateMessage_TypeInfo*>(
               &_NvtxReplyStateMessage_TypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NvtxReplyStateMessage_TypeInfo& a, NvtxReplyStateMessage_TypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxReplyStateMessage_TypeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxReplyStateMessage_TypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxReplyStateMessage_TypeInfo* New() const final {
    return CreateMaybeMessage<NvtxReplyStateMessage_TypeInfo>(nullptr);
  }

  NvtxReplyStateMessage_TypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxReplyStateMessage_TypeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxReplyStateMessage_TypeInfo& from);
  void MergeFrom(const NvtxReplyStateMessage_TypeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxReplyStateMessage_TypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxReplyStateMessage.TypeInfo";
  }
  protected:
  explicit NvtxReplyStateMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::NvtxCategory category() const;
  void set_category(::NvtxCategory value);
  private:
  ::NvtxCategory _internal_category() const;
  void _internal_set_category(::NvtxCategory value);
  public:

  // optional .NvtxMethod Method = 2 [default = NvtxMethodReplyStateMessage];
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::NvtxMethod method() const;
  void set_method(::NvtxMethod value);
  private:
  ::NvtxMethod _internal_method() const;
  void _internal_set_method(::NvtxMethod value);
  public:

  // @@protoc_insertion_point(class_scope:NvtxReplyStateMessage.TypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int category_;
  int method_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// -------------------------------------------------------------------

class NvtxReplyStateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NvtxReplyStateMessage) */ {
 public:
  inline NvtxReplyStateMessage() : NvtxReplyStateMessage(nullptr) {}
  virtual ~NvtxReplyStateMessage();

  NvtxReplyStateMessage(const NvtxReplyStateMessage& from);
  NvtxReplyStateMessage(NvtxReplyStateMessage&& from) noexcept
    : NvtxReplyStateMessage() {
    *this = ::std::move(from);
  }

  inline NvtxReplyStateMessage& operator=(const NvtxReplyStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtxReplyStateMessage& operator=(NvtxReplyStateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NvtxReplyStateMessage& default_instance();

  static inline const NvtxReplyStateMessage* internal_default_instance() {
    return reinterpret_cast<const NvtxReplyStateMessage*>(
               &_NvtxReplyStateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NvtxReplyStateMessage& a, NvtxReplyStateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NvtxReplyStateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtxReplyStateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NvtxReplyStateMessage* New() const final {
    return CreateMaybeMessage<NvtxReplyStateMessage>(nullptr);
  }

  NvtxReplyStateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NvtxReplyStateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NvtxReplyStateMessage& from);
  void MergeFrom(const NvtxReplyStateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvtxReplyStateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NvtxReplyStateMessage";
  }
  protected:
  explicit NvtxReplyStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Nvtx_2eproto);
    return ::descriptor_table_Nvtx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NvtxReplyStateMessage_TypeInfo TypeInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .NvtxState State = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::NvtxState& state() const;
  ::NvtxState* release_state();
  ::NvtxState* mutable_state();
  void set_allocated_state(::NvtxState* state);
  private:
  const ::NvtxState& _internal_state() const;
  ::NvtxState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::NvtxState* state);
  ::NvtxState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:NvtxReplyStateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NvtxState* state_;
  friend struct ::TableStruct_Nvtx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NvtxRequestStateMessage_TypeInfo

// optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
inline bool NvtxRequestStateMessage_TypeInfo::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxRequestStateMessage_TypeInfo::has_category() const {
  return _internal_has_category();
}
inline void NvtxRequestStateMessage_TypeInfo::clear_category() {
  category_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::NvtxCategory NvtxRequestStateMessage_TypeInfo::_internal_category() const {
  return static_cast< ::NvtxCategory >(category_);
}
inline ::NvtxCategory NvtxRequestStateMessage_TypeInfo::category() const {
  // @@protoc_insertion_point(field_get:NvtxRequestStateMessage.TypeInfo.Category)
  return _internal_category();
}
inline void NvtxRequestStateMessage_TypeInfo::_internal_set_category(::NvtxCategory value) {
  assert(::NvtxCategory_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  category_ = value;
}
inline void NvtxRequestStateMessage_TypeInfo::set_category(::NvtxCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:NvtxRequestStateMessage.TypeInfo.Category)
}

// optional .NvtxMethod Method = 2 [default = NvtxMethodRequestStateMessage];
inline bool NvtxRequestStateMessage_TypeInfo::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxRequestStateMessage_TypeInfo::has_method() const {
  return _internal_has_method();
}
inline void NvtxRequestStateMessage_TypeInfo::clear_method() {
  method_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::NvtxMethod NvtxRequestStateMessage_TypeInfo::_internal_method() const {
  return static_cast< ::NvtxMethod >(method_);
}
inline ::NvtxMethod NvtxRequestStateMessage_TypeInfo::method() const {
  // @@protoc_insertion_point(field_get:NvtxRequestStateMessage.TypeInfo.Method)
  return _internal_method();
}
inline void NvtxRequestStateMessage_TypeInfo::_internal_set_method(::NvtxMethod value) {
  assert(::NvtxMethod_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  method_ = value;
}
inline void NvtxRequestStateMessage_TypeInfo::set_method(::NvtxMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:NvtxRequestStateMessage.TypeInfo.Method)
}

// -------------------------------------------------------------------

// NvtxRequestStateMessage

// -------------------------------------------------------------------

// NvtxPayload

// required .NvtxPayloadType PayloadType = 1 [default = NvtxPayloadTypeUnknown];
inline bool NvtxPayload::_internal_has_payloadtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NvtxPayload::has_payloadtype() const {
  return _internal_has_payloadtype();
}
inline void NvtxPayload::clear_payloadtype() {
  payloadtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::NvtxPayloadType NvtxPayload::_internal_payloadtype() const {
  return static_cast< ::NvtxPayloadType >(payloadtype_);
}
inline ::NvtxPayloadType NvtxPayload::payloadtype() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.PayloadType)
  return _internal_payloadtype();
}
inline void NvtxPayload::_internal_set_payloadtype(::NvtxPayloadType value) {
  assert(::NvtxPayloadType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  payloadtype_ = value;
}
inline void NvtxPayload::set_payloadtype(::NvtxPayloadType value) {
  _internal_set_payloadtype(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.PayloadType)
}

// optional uint64 ULLValue = 2;
inline bool NvtxPayload::_internal_has_ullvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxPayload::has_ullvalue() const {
  return _internal_has_ullvalue();
}
inline void NvtxPayload::clear_ullvalue() {
  ullvalue_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPayload::_internal_ullvalue() const {
  return ullvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPayload::ullvalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.ULLValue)
  return _internal_ullvalue();
}
inline void NvtxPayload::_internal_set_ullvalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ullvalue_ = value;
}
inline void NvtxPayload::set_ullvalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ullvalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.ULLValue)
}

// optional int64 LLValue = 3;
inline bool NvtxPayload::_internal_has_llvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxPayload::has_llvalue() const {
  return _internal_has_llvalue();
}
inline void NvtxPayload::clear_llvalue() {
  llvalue_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NvtxPayload::_internal_llvalue() const {
  return llvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NvtxPayload::llvalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.LLValue)
  return _internal_llvalue();
}
inline void NvtxPayload::_internal_set_llvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  llvalue_ = value;
}
inline void NvtxPayload::set_llvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_llvalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.LLValue)
}

// optional double DoubleValue = 4;
inline bool NvtxPayload::_internal_has_doublevalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NvtxPayload::has_doublevalue() const {
  return _internal_has_doublevalue();
}
inline void NvtxPayload::clear_doublevalue() {
  doublevalue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double NvtxPayload::_internal_doublevalue() const {
  return doublevalue_;
}
inline double NvtxPayload::doublevalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.DoubleValue)
  return _internal_doublevalue();
}
inline void NvtxPayload::_internal_set_doublevalue(double value) {
  _has_bits_[0] |= 0x00000010u;
  doublevalue_ = value;
}
inline void NvtxPayload::set_doublevalue(double value) {
  _internal_set_doublevalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.DoubleValue)
}

// optional uint32 UValue = 5;
inline bool NvtxPayload::_internal_has_uvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NvtxPayload::has_uvalue() const {
  return _internal_has_uvalue();
}
inline void NvtxPayload::clear_uvalue() {
  uvalue_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxPayload::_internal_uvalue() const {
  return uvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxPayload::uvalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.UValue)
  return _internal_uvalue();
}
inline void NvtxPayload::_internal_set_uvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uvalue_ = value;
}
inline void NvtxPayload::set_uvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uvalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.UValue)
}

// optional int32 IValue = 6;
inline bool NvtxPayload::_internal_has_ivalue() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NvtxPayload::has_ivalue() const {
  return _internal_has_ivalue();
}
inline void NvtxPayload::clear_ivalue() {
  ivalue_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NvtxPayload::_internal_ivalue() const {
  return ivalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NvtxPayload::ivalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.IValue)
  return _internal_ivalue();
}
inline void NvtxPayload::_internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ivalue_ = value;
}
inline void NvtxPayload::set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ivalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.IValue)
}

// optional float FValue = 7;
inline bool NvtxPayload::_internal_has_fvalue() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NvtxPayload::has_fvalue() const {
  return _internal_has_fvalue();
}
inline void NvtxPayload::clear_fvalue() {
  fvalue_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float NvtxPayload::_internal_fvalue() const {
  return fvalue_;
}
inline float NvtxPayload::fvalue() const {
  // @@protoc_insertion_point(field_get:NvtxPayload.FValue)
  return _internal_fvalue();
}
inline void NvtxPayload::_internal_set_fvalue(float value) {
  _has_bits_[0] |= 0x00000040u;
  fvalue_ = value;
}
inline void NvtxPayload::set_fvalue(float value) {
  _internal_set_fvalue(value);
  // @@protoc_insertion_point(field_set:NvtxPayload.FValue)
}

// -------------------------------------------------------------------

// NvtxMessage

// required .NvtxMessageType MessageType = 1 [default = NvtxMessageTypeUnknown];
inline bool NvtxMessage::_internal_has_messagetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NvtxMessage::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void NvtxMessage::clear_messagetype() {
  messagetype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::NvtxMessageType NvtxMessage::_internal_messagetype() const {
  return static_cast< ::NvtxMessageType >(messagetype_);
}
inline ::NvtxMessageType NvtxMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:NvtxMessage.MessageType)
  return _internal_messagetype();
}
inline void NvtxMessage::_internal_set_messagetype(::NvtxMessageType value) {
  assert(::NvtxMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messagetype_ = value;
}
inline void NvtxMessage::set_messagetype(::NvtxMessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:NvtxMessage.MessageType)
}

// optional string message = 2;
inline bool NvtxMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxMessage::has_message() const {
  return _internal_has_message();
}
inline void NvtxMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NvtxMessage::message() const {
  // @@protoc_insertion_point(field_get:NvtxMessage.message)
  return _internal_message();
}
inline void NvtxMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:NvtxMessage.message)
}
inline std::string* NvtxMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:NvtxMessage.message)
  return _internal_mutable_message();
}
inline const std::string& NvtxMessage::_internal_message() const {
  return message_.Get();
}
inline void NvtxMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NvtxMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NvtxMessage.message)
}
inline void NvtxMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NvtxMessage.message)
}
inline void NvtxMessage::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NvtxMessage.message)
}
inline std::string* NvtxMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NvtxMessage::release_message() {
  // @@protoc_insertion_point(field_release:NvtxMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NvtxMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NvtxMessage.message)
}

// optional uint64 handle = 3;
inline bool NvtxMessage::_internal_has_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxMessage::has_handle() const {
  return _internal_has_handle();
}
inline void NvtxMessage::clear_handle() {
  handle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxMessage::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxMessage::handle() const {
  // @@protoc_insertion_point(field_get:NvtxMessage.handle)
  return _internal_handle();
}
inline void NvtxMessage::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  handle_ = value;
}
inline void NvtxMessage::set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:NvtxMessage.handle)
}

// -------------------------------------------------------------------

// NvtxColor

// required .NvtxColorType ColorType = 1 [default = NvtxColorTypeUnknown];
inline bool NvtxColor::_internal_has_colortype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxColor::has_colortype() const {
  return _internal_has_colortype();
}
inline void NvtxColor::clear_colortype() {
  colortype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::NvtxColorType NvtxColor::_internal_colortype() const {
  return static_cast< ::NvtxColorType >(colortype_);
}
inline ::NvtxColorType NvtxColor::colortype() const {
  // @@protoc_insertion_point(field_get:NvtxColor.ColorType)
  return _internal_colortype();
}
inline void NvtxColor::_internal_set_colortype(::NvtxColorType value) {
  assert(::NvtxColorType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  colortype_ = value;
}
inline void NvtxColor::set_colortype(::NvtxColorType value) {
  _internal_set_colortype(value);
  // @@protoc_insertion_point(field_set:NvtxColor.ColorType)
}

// optional uint32 Color = 2;
inline bool NvtxColor::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxColor::has_color() const {
  return _internal_has_color();
}
inline void NvtxColor::clear_color() {
  color_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxColor::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxColor::color() const {
  // @@protoc_insertion_point(field_get:NvtxColor.Color)
  return _internal_color();
}
inline void NvtxColor::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void NvtxColor::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:NvtxColor.Color)
}

// -------------------------------------------------------------------

// NvtxEventAttributes

// required uint32 Version = 1;
inline bool NvtxEventAttributes::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NvtxEventAttributes::has_version() const {
  return _internal_has_version();
}
inline void NvtxEventAttributes::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxEventAttributes::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxEventAttributes::version() const {
  // @@protoc_insertion_point(field_get:NvtxEventAttributes.Version)
  return _internal_version();
}
inline void NvtxEventAttributes::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void NvtxEventAttributes::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:NvtxEventAttributes.Version)
}

// required uint32 Category = 2;
inline bool NvtxEventAttributes::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NvtxEventAttributes::has_category() const {
  return _internal_has_category();
}
inline void NvtxEventAttributes::clear_category() {
  category_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxEventAttributes::_internal_category() const {
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxEventAttributes::category() const {
  // @@protoc_insertion_point(field_get:NvtxEventAttributes.Category)
  return _internal_category();
}
inline void NvtxEventAttributes::_internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  category_ = value;
}
inline void NvtxEventAttributes::set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:NvtxEventAttributes.Category)
}

// required .NvtxColor Color = 3;
inline bool NvtxEventAttributes::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool NvtxEventAttributes::has_color() const {
  return _internal_has_color();
}
inline void NvtxEventAttributes::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtxColor& NvtxEventAttributes::_internal_color() const {
  const ::NvtxColor* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxColor&>(
      ::_NvtxColor_default_instance_);
}
inline const ::NvtxColor& NvtxEventAttributes::color() const {
  // @@protoc_insertion_point(field_get:NvtxEventAttributes.Color)
  return _internal_color();
}
inline void NvtxEventAttributes::unsafe_arena_set_allocated_color(
    ::NvtxColor* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxEventAttributes.Color)
}
inline ::NvtxColor* NvtxEventAttributes::release_color() {
  _has_bits_[0] &= ~0x00000001u;
  ::NvtxColor* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxColor* NvtxEventAttributes::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:NvtxEventAttributes.Color)
  _has_bits_[0] &= ~0x00000001u;
  ::NvtxColor* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::NvtxColor* NvtxEventAttributes::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxColor>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::NvtxColor* NvtxEventAttributes::mutable_color() {
  // @@protoc_insertion_point(field_mutable:NvtxEventAttributes.Color)
  return _internal_mutable_color();
}
inline void NvtxEventAttributes::set_allocated_color(::NvtxColor* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:NvtxEventAttributes.Color)
}

// required .NvtxPayload Payload = 4;
inline bool NvtxEventAttributes::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || payload_ != nullptr);
  return value;
}
inline bool NvtxEventAttributes::has_payload() const {
  return _internal_has_payload();
}
inline void NvtxEventAttributes::clear_payload() {
  if (payload_ != nullptr) payload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtxPayload& NvtxEventAttributes::_internal_payload() const {
  const ::NvtxPayload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxPayload&>(
      ::_NvtxPayload_default_instance_);
}
inline const ::NvtxPayload& NvtxEventAttributes::payload() const {
  // @@protoc_insertion_point(field_get:NvtxEventAttributes.Payload)
  return _internal_payload();
}
inline void NvtxEventAttributes::unsafe_arena_set_allocated_payload(
    ::NvtxPayload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxEventAttributes.Payload)
}
inline ::NvtxPayload* NvtxEventAttributes::release_payload() {
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxPayload* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxPayload* NvtxEventAttributes::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:NvtxEventAttributes.Payload)
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxPayload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::NvtxPayload* NvtxEventAttributes::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxPayload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::NvtxPayload* NvtxEventAttributes::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:NvtxEventAttributes.Payload)
  return _internal_mutable_payload();
}
inline void NvtxEventAttributes::set_allocated_payload(::NvtxPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:NvtxEventAttributes.Payload)
}

// required .NvtxMessage Message = 5;
inline bool NvtxEventAttributes::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool NvtxEventAttributes::has_message() const {
  return _internal_has_message();
}
inline void NvtxEventAttributes::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::NvtxMessage& NvtxEventAttributes::_internal_message() const {
  const ::NvtxMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxMessage&>(
      ::_NvtxMessage_default_instance_);
}
inline const ::NvtxMessage& NvtxEventAttributes::message() const {
  // @@protoc_insertion_point(field_get:NvtxEventAttributes.Message)
  return _internal_message();
}
inline void NvtxEventAttributes::unsafe_arena_set_allocated_message(
    ::NvtxMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxEventAttributes.Message)
}
inline ::NvtxMessage* NvtxEventAttributes::release_message() {
  _has_bits_[0] &= ~0x00000004u;
  ::NvtxMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxMessage* NvtxEventAttributes::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:NvtxEventAttributes.Message)
  _has_bits_[0] &= ~0x00000004u;
  ::NvtxMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::NvtxMessage* NvtxEventAttributes::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::NvtxMessage* NvtxEventAttributes::mutable_message() {
  // @@protoc_insertion_point(field_mutable:NvtxEventAttributes.Message)
  return _internal_mutable_message();
}
inline void NvtxEventAttributes::set_allocated_message(::NvtxMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:NvtxEventAttributes.Message)
}

// -------------------------------------------------------------------

// NvtxPushPopRange

// required string Name = 1;
inline bool NvtxPushPopRange::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxPushPopRange::has_name() const {
  return _internal_has_name();
}
inline void NvtxPushPopRange::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NvtxPushPopRange::name() const {
  // @@protoc_insertion_point(field_get:NvtxPushPopRange.Name)
  return _internal_name();
}
inline void NvtxPushPopRange::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NvtxPushPopRange.Name)
}
inline std::string* NvtxPushPopRange::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NvtxPushPopRange.Name)
  return _internal_mutable_name();
}
inline const std::string& NvtxPushPopRange::_internal_name() const {
  return name_.Get();
}
inline void NvtxPushPopRange::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NvtxPushPopRange::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NvtxPushPopRange.Name)
}
inline void NvtxPushPopRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NvtxPushPopRange.Name)
}
inline void NvtxPushPopRange::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NvtxPushPopRange.Name)
}
inline std::string* NvtxPushPopRange::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NvtxPushPopRange::release_name() {
  // @@protoc_insertion_point(field_release:NvtxPushPopRange.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NvtxPushPopRange::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NvtxPushPopRange.Name)
}

// optional .NvtxEventAttributes Attributes = 2;
inline bool NvtxPushPopRange::_internal_has_attributes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || attributes_ != nullptr);
  return value;
}
inline bool NvtxPushPopRange::has_attributes() const {
  return _internal_has_attributes();
}
inline void NvtxPushPopRange::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtxEventAttributes& NvtxPushPopRange::_internal_attributes() const {
  const ::NvtxEventAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxEventAttributes&>(
      ::_NvtxEventAttributes_default_instance_);
}
inline const ::NvtxEventAttributes& NvtxPushPopRange::attributes() const {
  // @@protoc_insertion_point(field_get:NvtxPushPopRange.Attributes)
  return _internal_attributes();
}
inline void NvtxPushPopRange::unsafe_arena_set_allocated_attributes(
    ::NvtxEventAttributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxPushPopRange.Attributes)
}
inline ::NvtxEventAttributes* NvtxPushPopRange::release_attributes() {
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxEventAttributes* temp = attributes_;
  attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxEventAttributes* NvtxPushPopRange::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:NvtxPushPopRange.Attributes)
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxEventAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::NvtxEventAttributes* NvtxPushPopRange::_internal_mutable_attributes() {
  _has_bits_[0] |= 0x00000002u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxEventAttributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::NvtxEventAttributes* NvtxPushPopRange::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:NvtxPushPopRange.Attributes)
  return _internal_mutable_attributes();
}
inline void NvtxPushPopRange::set_allocated_attributes(::NvtxEventAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:NvtxPushPopRange.Attributes)
}

// optional uint64 LastApiCallId = 3;
inline bool NvtxPushPopRange::_internal_has_lastapicallid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NvtxPushPopRange::has_lastapicallid() const {
  return _internal_has_lastapicallid();
}
inline void NvtxPushPopRange::clear_lastapicallid() {
  lastapicallid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPushPopRange::_internal_lastapicallid() const {
  return lastapicallid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPushPopRange::lastapicallid() const {
  // @@protoc_insertion_point(field_get:NvtxPushPopRange.LastApiCallId)
  return _internal_lastapicallid();
}
inline void NvtxPushPopRange::_internal_set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lastapicallid_ = value;
}
inline void NvtxPushPopRange::set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastapicallid(value);
  // @@protoc_insertion_point(field_set:NvtxPushPopRange.LastApiCallId)
}

// -------------------------------------------------------------------

// NvtxStartEndRange

// required uint64 Id = 1;
inline bool NvtxStartEndRange::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NvtxStartEndRange::has_id() const {
  return _internal_has_id();
}
inline void NvtxStartEndRange::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndRange::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndRange::id() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndRange.Id)
  return _internal_id();
}
inline void NvtxStartEndRange::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void NvtxStartEndRange::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NvtxStartEndRange.Id)
}

// required string Name = 2;
inline bool NvtxStartEndRange::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxStartEndRange::has_name() const {
  return _internal_has_name();
}
inline void NvtxStartEndRange::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NvtxStartEndRange::name() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndRange.Name)
  return _internal_name();
}
inline void NvtxStartEndRange::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NvtxStartEndRange.Name)
}
inline std::string* NvtxStartEndRange::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NvtxStartEndRange.Name)
  return _internal_mutable_name();
}
inline const std::string& NvtxStartEndRange::_internal_name() const {
  return name_.Get();
}
inline void NvtxStartEndRange::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NvtxStartEndRange::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NvtxStartEndRange.Name)
}
inline void NvtxStartEndRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NvtxStartEndRange.Name)
}
inline void NvtxStartEndRange::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NvtxStartEndRange.Name)
}
inline std::string* NvtxStartEndRange::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NvtxStartEndRange::release_name() {
  // @@protoc_insertion_point(field_release:NvtxStartEndRange.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NvtxStartEndRange::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NvtxStartEndRange.Name)
}

// optional .NvtxEventAttributes Attributes = 3;
inline bool NvtxStartEndRange::_internal_has_attributes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || attributes_ != nullptr);
  return value;
}
inline bool NvtxStartEndRange::has_attributes() const {
  return _internal_has_attributes();
}
inline void NvtxStartEndRange::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtxEventAttributes& NvtxStartEndRange::_internal_attributes() const {
  const ::NvtxEventAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxEventAttributes&>(
      ::_NvtxEventAttributes_default_instance_);
}
inline const ::NvtxEventAttributes& NvtxStartEndRange::attributes() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndRange.Attributes)
  return _internal_attributes();
}
inline void NvtxStartEndRange::unsafe_arena_set_allocated_attributes(
    ::NvtxEventAttributes* attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxStartEndRange.Attributes)
}
inline ::NvtxEventAttributes* NvtxStartEndRange::release_attributes() {
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxEventAttributes* temp = attributes_;
  attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxEventAttributes* NvtxStartEndRange::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:NvtxStartEndRange.Attributes)
  _has_bits_[0] &= ~0x00000002u;
  ::NvtxEventAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::NvtxEventAttributes* NvtxStartEndRange::_internal_mutable_attributes() {
  _has_bits_[0] |= 0x00000002u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxEventAttributes>(GetArena());
    attributes_ = p;
  }
  return attributes_;
}
inline ::NvtxEventAttributes* NvtxStartEndRange::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:NvtxStartEndRange.Attributes)
  return _internal_mutable_attributes();
}
inline void NvtxStartEndRange::set_allocated_attributes(::NvtxEventAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:NvtxStartEndRange.Attributes)
}

// optional uint64 LastApiCallId = 4;
inline bool NvtxStartEndRange::_internal_has_lastapicallid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NvtxStartEndRange::has_lastapicallid() const {
  return _internal_has_lastapicallid();
}
inline void NvtxStartEndRange::clear_lastapicallid() {
  lastapicallid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndRange::_internal_lastapicallid() const {
  return lastapicallid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndRange::lastapicallid() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndRange.LastApiCallId)
  return _internal_lastapicallid();
}
inline void NvtxStartEndRange::_internal_set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lastapicallid_ = value;
}
inline void NvtxStartEndRange::set_lastapicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastapicallid(value);
  // @@protoc_insertion_point(field_set:NvtxStartEndRange.LastApiCallId)
}

// optional uint32 StartTID = 5;
inline bool NvtxStartEndRange::_internal_has_starttid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NvtxStartEndRange::has_starttid() const {
  return _internal_has_starttid();
}
inline void NvtxStartEndRange::clear_starttid() {
  starttid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxStartEndRange::_internal_starttid() const {
  return starttid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxStartEndRange::starttid() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndRange.StartTID)
  return _internal_starttid();
}
inline void NvtxStartEndRange::_internal_set_starttid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  starttid_ = value;
}
inline void NvtxStartEndRange::set_starttid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttid(value);
  // @@protoc_insertion_point(field_set:NvtxStartEndRange.StartTID)
}

// -------------------------------------------------------------------

// NvtxPushPopDomain

// required uint64 Id = 1;
inline bool NvtxPushPopDomain::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxPushPopDomain::has_id() const {
  return _internal_has_id();
}
inline void NvtxPushPopDomain::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPushPopDomain::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxPushPopDomain::id() const {
  // @@protoc_insertion_point(field_get:NvtxPushPopDomain.Id)
  return _internal_id();
}
inline void NvtxPushPopDomain::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void NvtxPushPopDomain::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NvtxPushPopDomain.Id)
}

// repeated .NvtxPushPopRange Stack = 3;
inline int NvtxPushPopDomain::_internal_stack_size() const {
  return stack_.size();
}
inline int NvtxPushPopDomain::stack_size() const {
  return _internal_stack_size();
}
inline void NvtxPushPopDomain::clear_stack() {
  stack_.Clear();
}
inline ::NvtxPushPopRange* NvtxPushPopDomain::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxPushPopDomain.Stack)
  return stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopRange >*
NvtxPushPopDomain::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:NvtxPushPopDomain.Stack)
  return &stack_;
}
inline const ::NvtxPushPopRange& NvtxPushPopDomain::_internal_stack(int index) const {
  return stack_.Get(index);
}
inline const ::NvtxPushPopRange& NvtxPushPopDomain::stack(int index) const {
  // @@protoc_insertion_point(field_get:NvtxPushPopDomain.Stack)
  return _internal_stack(index);
}
inline ::NvtxPushPopRange* NvtxPushPopDomain::_internal_add_stack() {
  return stack_.Add();
}
inline ::NvtxPushPopRange* NvtxPushPopDomain::add_stack() {
  // @@protoc_insertion_point(field_add:NvtxPushPopDomain.Stack)
  return _internal_add_stack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopRange >&
NvtxPushPopDomain::stack() const {
  // @@protoc_insertion_point(field_list:NvtxPushPopDomain.Stack)
  return stack_;
}

// -------------------------------------------------------------------

// NvtxStartEndDomain

// required uint64 Id = 1;
inline bool NvtxStartEndDomain::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxStartEndDomain::has_id() const {
  return _internal_has_id();
}
inline void NvtxStartEndDomain::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndDomain::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxStartEndDomain::id() const {
  // @@protoc_insertion_point(field_get:NvtxStartEndDomain.Id)
  return _internal_id();
}
inline void NvtxStartEndDomain::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void NvtxStartEndDomain::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NvtxStartEndDomain.Id)
}

// repeated .NvtxStartEndRange Ranges = 3;
inline int NvtxStartEndDomain::_internal_ranges_size() const {
  return ranges_.size();
}
inline int NvtxStartEndDomain::ranges_size() const {
  return _internal_ranges_size();
}
inline void NvtxStartEndDomain::clear_ranges() {
  ranges_.Clear();
}
inline ::NvtxStartEndRange* NvtxStartEndDomain::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxStartEndDomain.Ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndRange >*
NvtxStartEndDomain::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:NvtxStartEndDomain.Ranges)
  return &ranges_;
}
inline const ::NvtxStartEndRange& NvtxStartEndDomain::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::NvtxStartEndRange& NvtxStartEndDomain::ranges(int index) const {
  // @@protoc_insertion_point(field_get:NvtxStartEndDomain.Ranges)
  return _internal_ranges(index);
}
inline ::NvtxStartEndRange* NvtxStartEndDomain::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::NvtxStartEndRange* NvtxStartEndDomain::add_ranges() {
  // @@protoc_insertion_point(field_add:NvtxStartEndDomain.Ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndRange >&
NvtxStartEndDomain::ranges() const {
  // @@protoc_insertion_point(field_list:NvtxStartEndDomain.Ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// NvtxRegisteredString

// required uint64 Id = 1;
inline bool NvtxRegisteredString::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxRegisteredString::has_id() const {
  return _internal_has_id();
}
inline void NvtxRegisteredString::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxRegisteredString::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxRegisteredString::id() const {
  // @@protoc_insertion_point(field_get:NvtxRegisteredString.Id)
  return _internal_id();
}
inline void NvtxRegisteredString::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void NvtxRegisteredString::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NvtxRegisteredString.Id)
}

// required string Value = 2;
inline bool NvtxRegisteredString::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxRegisteredString::has_value() const {
  return _internal_has_value();
}
inline void NvtxRegisteredString::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NvtxRegisteredString::value() const {
  // @@protoc_insertion_point(field_get:NvtxRegisteredString.Value)
  return _internal_value();
}
inline void NvtxRegisteredString::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:NvtxRegisteredString.Value)
}
inline std::string* NvtxRegisteredString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:NvtxRegisteredString.Value)
  return _internal_mutable_value();
}
inline const std::string& NvtxRegisteredString::_internal_value() const {
  return value_.Get();
}
inline void NvtxRegisteredString::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NvtxRegisteredString::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NvtxRegisteredString.Value)
}
inline void NvtxRegisteredString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NvtxRegisteredString.Value)
}
inline void NvtxRegisteredString::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NvtxRegisteredString.Value)
}
inline std::string* NvtxRegisteredString::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NvtxRegisteredString::release_value() {
  // @@protoc_insertion_point(field_release:NvtxRegisteredString.Value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NvtxRegisteredString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NvtxRegisteredString.Value)
}

// -------------------------------------------------------------------

// NvtxDomainInfo

// required uint64 Id = 1;
inline bool NvtxDomainInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxDomainInfo::has_id() const {
  return _internal_has_id();
}
inline void NvtxDomainInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxDomainInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxDomainInfo::id() const {
  // @@protoc_insertion_point(field_get:NvtxDomainInfo.Id)
  return _internal_id();
}
inline void NvtxDomainInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void NvtxDomainInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NvtxDomainInfo.Id)
}

// required string Name = 2;
inline bool NvtxDomainInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxDomainInfo::has_name() const {
  return _internal_has_name();
}
inline void NvtxDomainInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NvtxDomainInfo::name() const {
  // @@protoc_insertion_point(field_get:NvtxDomainInfo.Name)
  return _internal_name();
}
inline void NvtxDomainInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NvtxDomainInfo.Name)
}
inline std::string* NvtxDomainInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NvtxDomainInfo.Name)
  return _internal_mutable_name();
}
inline const std::string& NvtxDomainInfo::_internal_name() const {
  return name_.Get();
}
inline void NvtxDomainInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NvtxDomainInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NvtxDomainInfo.Name)
}
inline void NvtxDomainInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NvtxDomainInfo.Name)
}
inline void NvtxDomainInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NvtxDomainInfo.Name)
}
inline std::string* NvtxDomainInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NvtxDomainInfo::release_name() {
  // @@protoc_insertion_point(field_release:NvtxDomainInfo.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NvtxDomainInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NvtxDomainInfo.Name)
}

// repeated .NvtxRegisteredString Strings = 3;
inline int NvtxDomainInfo::_internal_strings_size() const {
  return strings_.size();
}
inline int NvtxDomainInfo::strings_size() const {
  return _internal_strings_size();
}
inline void NvtxDomainInfo::clear_strings() {
  strings_.Clear();
}
inline ::NvtxRegisteredString* NvtxDomainInfo::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxDomainInfo.Strings)
  return strings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >*
NvtxDomainInfo::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:NvtxDomainInfo.Strings)
  return &strings_;
}
inline const ::NvtxRegisteredString& NvtxDomainInfo::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const ::NvtxRegisteredString& NvtxDomainInfo::strings(int index) const {
  // @@protoc_insertion_point(field_get:NvtxDomainInfo.Strings)
  return _internal_strings(index);
}
inline ::NvtxRegisteredString* NvtxDomainInfo::_internal_add_strings() {
  return strings_.Add();
}
inline ::NvtxRegisteredString* NvtxDomainInfo::add_strings() {
  // @@protoc_insertion_point(field_add:NvtxDomainInfo.Strings)
  return _internal_add_strings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >&
NvtxDomainInfo::strings() const {
  // @@protoc_insertion_point(field_list:NvtxDomainInfo.Strings)
  return strings_;
}

// repeated .NvtxNameTable NameTables = 4;
inline int NvtxDomainInfo::_internal_nametables_size() const {
  return nametables_.size();
}
inline int NvtxDomainInfo::nametables_size() const {
  return _internal_nametables_size();
}
inline void NvtxDomainInfo::clear_nametables() {
  nametables_.Clear();
}
inline ::NvtxNameTable* NvtxDomainInfo::mutable_nametables(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxDomainInfo.NameTables)
  return nametables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxNameTable >*
NvtxDomainInfo::mutable_nametables() {
  // @@protoc_insertion_point(field_mutable_list:NvtxDomainInfo.NameTables)
  return &nametables_;
}
inline const ::NvtxNameTable& NvtxDomainInfo::_internal_nametables(int index) const {
  return nametables_.Get(index);
}
inline const ::NvtxNameTable& NvtxDomainInfo::nametables(int index) const {
  // @@protoc_insertion_point(field_get:NvtxDomainInfo.NameTables)
  return _internal_nametables(index);
}
inline ::NvtxNameTable* NvtxDomainInfo::_internal_add_nametables() {
  return nametables_.Add();
}
inline ::NvtxNameTable* NvtxDomainInfo::add_nametables() {
  // @@protoc_insertion_point(field_add:NvtxDomainInfo.NameTables)
  return _internal_add_nametables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxNameTable >&
NvtxDomainInfo::nametables() const {
  // @@protoc_insertion_point(field_list:NvtxDomainInfo.NameTables)
  return nametables_;
}

// -------------------------------------------------------------------

// NvtxThread

// required uint32 TID = 1;
inline bool NvtxThread::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxThread::has_tid() const {
  return _internal_has_tid();
}
inline void NvtxThread::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxThread::_internal_tid() const {
  return tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NvtxThread::tid() const {
  // @@protoc_insertion_point(field_get:NvtxThread.TID)
  return _internal_tid();
}
inline void NvtxThread::_internal_set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
}
inline void NvtxThread::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:NvtxThread.TID)
}

// repeated .NvtxPushPopDomain PushPopDomains = 2;
inline int NvtxThread::_internal_pushpopdomains_size() const {
  return pushpopdomains_.size();
}
inline int NvtxThread::pushpopdomains_size() const {
  return _internal_pushpopdomains_size();
}
inline void NvtxThread::clear_pushpopdomains() {
  pushpopdomains_.Clear();
}
inline ::NvtxPushPopDomain* NvtxThread::mutable_pushpopdomains(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxThread.PushPopDomains)
  return pushpopdomains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopDomain >*
NvtxThread::mutable_pushpopdomains() {
  // @@protoc_insertion_point(field_mutable_list:NvtxThread.PushPopDomains)
  return &pushpopdomains_;
}
inline const ::NvtxPushPopDomain& NvtxThread::_internal_pushpopdomains(int index) const {
  return pushpopdomains_.Get(index);
}
inline const ::NvtxPushPopDomain& NvtxThread::pushpopdomains(int index) const {
  // @@protoc_insertion_point(field_get:NvtxThread.PushPopDomains)
  return _internal_pushpopdomains(index);
}
inline ::NvtxPushPopDomain* NvtxThread::_internal_add_pushpopdomains() {
  return pushpopdomains_.Add();
}
inline ::NvtxPushPopDomain* NvtxThread::add_pushpopdomains() {
  // @@protoc_insertion_point(field_add:NvtxThread.PushPopDomains)
  return _internal_add_pushpopdomains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxPushPopDomain >&
NvtxThread::pushpopdomains() const {
  // @@protoc_insertion_point(field_list:NvtxThread.PushPopDomains)
  return pushpopdomains_;
}

// -------------------------------------------------------------------

// NvtxNameTable

// required .NvtxNameFamily Family = 1;
inline bool NvtxNameTable::_internal_has_family() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxNameTable::has_family() const {
  return _internal_has_family();
}
inline void NvtxNameTable::clear_family() {
  family_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::NvtxNameFamily NvtxNameTable::_internal_family() const {
  return static_cast< ::NvtxNameFamily >(family_);
}
inline ::NvtxNameFamily NvtxNameTable::family() const {
  // @@protoc_insertion_point(field_get:NvtxNameTable.Family)
  return _internal_family();
}
inline void NvtxNameTable::_internal_set_family(::NvtxNameFamily value) {
  assert(::NvtxNameFamily_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  family_ = value;
}
inline void NvtxNameTable::set_family(::NvtxNameFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:NvtxNameTable.Family)
}

// repeated .NvtxRegisteredString Mappings = 2;
inline int NvtxNameTable::_internal_mappings_size() const {
  return mappings_.size();
}
inline int NvtxNameTable::mappings_size() const {
  return _internal_mappings_size();
}
inline void NvtxNameTable::clear_mappings() {
  mappings_.Clear();
}
inline ::NvtxRegisteredString* NvtxNameTable::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxNameTable.Mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >*
NvtxNameTable::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:NvtxNameTable.Mappings)
  return &mappings_;
}
inline const ::NvtxRegisteredString& NvtxNameTable::_internal_mappings(int index) const {
  return mappings_.Get(index);
}
inline const ::NvtxRegisteredString& NvtxNameTable::mappings(int index) const {
  // @@protoc_insertion_point(field_get:NvtxNameTable.Mappings)
  return _internal_mappings(index);
}
inline ::NvtxRegisteredString* NvtxNameTable::_internal_add_mappings() {
  return mappings_.Add();
}
inline ::NvtxRegisteredString* NvtxNameTable::add_mappings() {
  // @@protoc_insertion_point(field_add:NvtxNameTable.Mappings)
  return _internal_add_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxRegisteredString >&
NvtxNameTable::mappings() const {
  // @@protoc_insertion_point(field_list:NvtxNameTable.Mappings)
  return mappings_;
}

// -------------------------------------------------------------------

// NvtxState

// repeated .NvtxDomainInfo Domains = 1;
inline int NvtxState::_internal_domains_size() const {
  return domains_.size();
}
inline int NvtxState::domains_size() const {
  return _internal_domains_size();
}
inline void NvtxState::clear_domains() {
  domains_.Clear();
}
inline ::NvtxDomainInfo* NvtxState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxState.Domains)
  return domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxDomainInfo >*
NvtxState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:NvtxState.Domains)
  return &domains_;
}
inline const ::NvtxDomainInfo& NvtxState::_internal_domains(int index) const {
  return domains_.Get(index);
}
inline const ::NvtxDomainInfo& NvtxState::domains(int index) const {
  // @@protoc_insertion_point(field_get:NvtxState.Domains)
  return _internal_domains(index);
}
inline ::NvtxDomainInfo* NvtxState::_internal_add_domains() {
  return domains_.Add();
}
inline ::NvtxDomainInfo* NvtxState::add_domains() {
  // @@protoc_insertion_point(field_add:NvtxState.Domains)
  return _internal_add_domains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxDomainInfo >&
NvtxState::domains() const {
  // @@protoc_insertion_point(field_list:NvtxState.Domains)
  return domains_;
}

// repeated .NvtxThread Threads = 2;
inline int NvtxState::_internal_threads_size() const {
  return threads_.size();
}
inline int NvtxState::threads_size() const {
  return _internal_threads_size();
}
inline void NvtxState::clear_threads() {
  threads_.Clear();
}
inline ::NvtxThread* NvtxState::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxState.Threads)
  return threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxThread >*
NvtxState::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:NvtxState.Threads)
  return &threads_;
}
inline const ::NvtxThread& NvtxState::_internal_threads(int index) const {
  return threads_.Get(index);
}
inline const ::NvtxThread& NvtxState::threads(int index) const {
  // @@protoc_insertion_point(field_get:NvtxState.Threads)
  return _internal_threads(index);
}
inline ::NvtxThread* NvtxState::_internal_add_threads() {
  return threads_.Add();
}
inline ::NvtxThread* NvtxState::add_threads() {
  // @@protoc_insertion_point(field_add:NvtxState.Threads)
  return _internal_add_threads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxThread >&
NvtxState::threads() const {
  // @@protoc_insertion_point(field_list:NvtxState.Threads)
  return threads_;
}

// repeated .NvtxStartEndDomain StartEndDomains = 3;
inline int NvtxState::_internal_startenddomains_size() const {
  return startenddomains_.size();
}
inline int NvtxState::startenddomains_size() const {
  return _internal_startenddomains_size();
}
inline void NvtxState::clear_startenddomains() {
  startenddomains_.Clear();
}
inline ::NvtxStartEndDomain* NvtxState::mutable_startenddomains(int index) {
  // @@protoc_insertion_point(field_mutable:NvtxState.StartEndDomains)
  return startenddomains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndDomain >*
NvtxState::mutable_startenddomains() {
  // @@protoc_insertion_point(field_mutable_list:NvtxState.StartEndDomains)
  return &startenddomains_;
}
inline const ::NvtxStartEndDomain& NvtxState::_internal_startenddomains(int index) const {
  return startenddomains_.Get(index);
}
inline const ::NvtxStartEndDomain& NvtxState::startenddomains(int index) const {
  // @@protoc_insertion_point(field_get:NvtxState.StartEndDomains)
  return _internal_startenddomains(index);
}
inline ::NvtxStartEndDomain* NvtxState::_internal_add_startenddomains() {
  return startenddomains_.Add();
}
inline ::NvtxStartEndDomain* NvtxState::add_startenddomains() {
  // @@protoc_insertion_point(field_add:NvtxState.StartEndDomains)
  return _internal_add_startenddomains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NvtxStartEndDomain >&
NvtxState::startenddomains() const {
  // @@protoc_insertion_point(field_list:NvtxState.StartEndDomains)
  return startenddomains_;
}

// optional uint64 DefaultDomain = 4;
inline bool NvtxState::_internal_has_defaultdomain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxState::has_defaultdomain() const {
  return _internal_has_defaultdomain();
}
inline void NvtxState::clear_defaultdomain() {
  defaultdomain_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxState::_internal_defaultdomain() const {
  return defaultdomain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NvtxState::defaultdomain() const {
  // @@protoc_insertion_point(field_get:NvtxState.DefaultDomain)
  return _internal_defaultdomain();
}
inline void NvtxState::_internal_set_defaultdomain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  defaultdomain_ = value;
}
inline void NvtxState::set_defaultdomain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_defaultdomain(value);
  // @@protoc_insertion_point(field_set:NvtxState.DefaultDomain)
}

// -------------------------------------------------------------------

// NvtxReplyStateMessage_TypeInfo

// optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
inline bool NvtxReplyStateMessage_TypeInfo::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NvtxReplyStateMessage_TypeInfo::has_category() const {
  return _internal_has_category();
}
inline void NvtxReplyStateMessage_TypeInfo::clear_category() {
  category_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::NvtxCategory NvtxReplyStateMessage_TypeInfo::_internal_category() const {
  return static_cast< ::NvtxCategory >(category_);
}
inline ::NvtxCategory NvtxReplyStateMessage_TypeInfo::category() const {
  // @@protoc_insertion_point(field_get:NvtxReplyStateMessage.TypeInfo.Category)
  return _internal_category();
}
inline void NvtxReplyStateMessage_TypeInfo::_internal_set_category(::NvtxCategory value) {
  assert(::NvtxCategory_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  category_ = value;
}
inline void NvtxReplyStateMessage_TypeInfo::set_category(::NvtxCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:NvtxReplyStateMessage.TypeInfo.Category)
}

// optional .NvtxMethod Method = 2 [default = NvtxMethodReplyStateMessage];
inline bool NvtxReplyStateMessage_TypeInfo::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NvtxReplyStateMessage_TypeInfo::has_method() const {
  return _internal_has_method();
}
inline void NvtxReplyStateMessage_TypeInfo::clear_method() {
  method_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::NvtxMethod NvtxReplyStateMessage_TypeInfo::_internal_method() const {
  return static_cast< ::NvtxMethod >(method_);
}
inline ::NvtxMethod NvtxReplyStateMessage_TypeInfo::method() const {
  // @@protoc_insertion_point(field_get:NvtxReplyStateMessage.TypeInfo.Method)
  return _internal_method();
}
inline void NvtxReplyStateMessage_TypeInfo::_internal_set_method(::NvtxMethod value) {
  assert(::NvtxMethod_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  method_ = value;
}
inline void NvtxReplyStateMessage_TypeInfo::set_method(::NvtxMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:NvtxReplyStateMessage.TypeInfo.Method)
}

// -------------------------------------------------------------------

// NvtxReplyStateMessage

// optional .NvtxState State = 1;
inline bool NvtxReplyStateMessage::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool NvtxReplyStateMessage::has_state() const {
  return _internal_has_state();
}
inline void NvtxReplyStateMessage::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtxState& NvtxReplyStateMessage::_internal_state() const {
  const ::NvtxState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxState&>(
      ::_NvtxState_default_instance_);
}
inline const ::NvtxState& NvtxReplyStateMessage::state() const {
  // @@protoc_insertion_point(field_get:NvtxReplyStateMessage.State)
  return _internal_state();
}
inline void NvtxReplyStateMessage::unsafe_arena_set_allocated_state(
    ::NvtxState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtxReplyStateMessage.State)
}
inline ::NvtxState* NvtxReplyStateMessage::release_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::NvtxState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxState* NvtxReplyStateMessage::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:NvtxReplyStateMessage.State)
  _has_bits_[0] &= ~0x00000001u;
  ::NvtxState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::NvtxState* NvtxReplyStateMessage::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::NvtxState* NvtxReplyStateMessage::mutable_state() {
  // @@protoc_insertion_point(field_mutable:NvtxReplyStateMessage.State)
  return _internal_mutable_state();
}
inline void NvtxReplyStateMessage::set_allocated_state(::NvtxState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:NvtxReplyStateMessage.State)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NvtxMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NvtxMethod>() {
  return ::NvtxMethod_descriptor();
}
template <> struct is_proto_enum< ::NvtxColorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NvtxColorType>() {
  return ::NvtxColorType_descriptor();
}
template <> struct is_proto_enum< ::NvtxPayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NvtxPayloadType>() {
  return ::NvtxPayloadType_descriptor();
}
template <> struct is_proto_enum< ::NvtxMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NvtxMessageType>() {
  return ::NvtxMessageType_descriptor();
}
template <> struct is_proto_enum< ::NvtxNameFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NvtxNameFamily>() {
  return ::NvtxNameFamily_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Nvtx_2eproto
