// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerCommon.proto

#include "ProfilerCommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint64x3_ProfilerCommon_2eproto;
class Uint64x3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uint64x3> _instance;
} _Uint64x3_default_instance_;
class LaunchDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaunchData> _instance;
} _LaunchData_default_instance_;
class SourceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceData> _instance;
} _SourceData_default_instance_;
static void InitDefaultsscc_info_LaunchData_ProfilerCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LaunchData_default_instance_;
    new (ptr) ::LaunchData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaunchData_ProfilerCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaunchData_ProfilerCommon_2eproto}, {
      &scc_info_Uint64x3_ProfilerCommon_2eproto.base,}};

static void InitDefaultsscc_info_SourceData_ProfilerCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SourceData_default_instance_;
    new (ptr) ::SourceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceData_ProfilerCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceData_ProfilerCommon_2eproto}, {}};

static void InitDefaultsscc_info_Uint64x3_ProfilerCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Uint64x3_default_instance_;
    new (ptr) ::Uint64x3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint64x3_ProfilerCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uint64x3_ProfilerCommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProfilerCommon_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProfilerCommon_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProfilerCommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProfilerCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Uint64x3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Uint64x3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Uint64x3, x_),
  PROTOBUF_FIELD_OFFSET(::Uint64x3, y_),
  PROTOBUF_FIELD_OFFSET(::Uint64x3, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::LaunchData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LaunchData, processid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, threadid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, apicallid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, api_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, kernelid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, kernelmangledname_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, kernelfunctionname_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, kerneldemangledname_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, programhandle_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, contexthandle_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, deviceid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, workdimensions_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, globalworkoffset_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, globalworksize_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, localworksize_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, contextid_),
  PROTOBUF_FIELD_OFFSET(::LaunchData, streamid_),
  6,
  7,
  8,
  10,
  9,
  0,
  1,
  2,
  12,
  13,
  14,
  11,
  3,
  4,
  5,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::SourceData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SourceData, reference_),
  PROTOBUF_FIELD_OFFSET(::SourceData, code_),
  PROTOBUF_FIELD_OFFSET(::SourceData, intermediate_),
  PROTOBUF_FIELD_OFFSET(::SourceData, binary_),
  PROTOBUF_FIELD_OFFSET(::SourceData, sasslevel_),
  PROTOBUF_FIELD_OFFSET(::SourceData, smrevision_),
  PROTOBUF_FIELD_OFFSET(::SourceData, binaryflags_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Uint64x3)},
  { 11, 33, sizeof(::LaunchData)},
  { 50, 62, sizeof(::SourceData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Uint64x3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LaunchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SourceData_default_instance_),
};

const char descriptor_table_protodef_ProfilerCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ProfilerCommon.proto\"+\n\010Uint64x3\022\t\n\001X\030"
  "\001 \001(\004\022\t\n\001Y\030\002 \001(\004\022\t\n\001Z\030\003 \001(\004\"\250\003\n\nLaunchDa"
  "ta\022\021\n\tProcessID\030\002 \002(\r\022\020\n\010ThreadID\030\003 \002(\r\022"
  "\021\n\tAPICallID\030\004 \002(\004\022\025\n\003API\030\005 \002(\0162\010.APITyp"
  "e\022\020\n\010KernelID\030\006 \002(\004\022\031\n\021KernelMangledName"
  "\030\007 \002(\t\022\032\n\022KernelFunctionName\030\010 \002(\t\022\033\n\023Ke"
  "rnelDemangledName\030\t \002(\t\022\025\n\rProgramHandle"
  "\030\n \002(\004\022\025\n\rContextHandle\030\013 \002(\004\022\020\n\010DeviceI"
  "D\030\014 \002(\004\022\026\n\016WorkDimensions\030\r \002(\r\022#\n\020Globa"
  "lWorkOffset\030\016 \002(\0132\t.Uint64x3\022!\n\016GlobalWo"
  "rkSize\030\017 \002(\0132\t.Uint64x3\022 \n\rLocalWorkSize"
  "\030\020 \002(\0132\t.Uint64x3\022\021\n\tContextID\030\021 \001(\r\022\020\n\010"
  "StreamID\030\022 \001(\r\"\241\001\n\nSourceData\022\021\n\tReferen"
  "ce\030\001 \001(\004\022\014\n\004Code\030\002 \001(\t\022\024\n\014Intermediate\030\003"
  " \001(\014\022\016\n\006Binary\030\004 \001(\014\022#\n\tSassLevel\030\005 \001(\0162"
  "\020.SourceSassLevel\022\022\n\nSMRevision\030\006 \001(\r\022\023\n"
  "\013BinaryFlags\030\007 \001(\r*Y\n\007APIType\022\020\n\014APIType"
  "_CUDA\020\000\022\022\n\016APIType_OpenCL\020\001\022\024\n\020APIType_D"
  "irect3D\020\002\022\022\n\016APIType_OpenGL\020\003*\351\001\n\017Source"
  "SassLevel\022\031\n\025SourceSassLevel_Unset\020\000\022\031\n\025"
  "SourceSassLevel_Sass1\020\001\022\031\n\025SourceSassLev"
  "el_Sass2\020\002\022\031\n\025SourceSassLevel_Sass3\020\003\022\031\n"
  "\025SourceSassLevel_Sass4\020\004\022\031\n\025SourceSassLe"
  "vel_Sass5\020\005\022\031\n\025SourceSassLevel_Sass6\020\006\022\031"
  "\n\025SourceSassLevel_Sass7\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProfilerCommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProfilerCommon_2eproto_sccs[3] = {
  &scc_info_LaunchData_ProfilerCommon_2eproto.base,
  &scc_info_SourceData_ProfilerCommon_2eproto.base,
  &scc_info_Uint64x3_ProfilerCommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProfilerCommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerCommon_2eproto = {
  false, false, descriptor_table_protodef_ProfilerCommon_2eproto, "ProfilerCommon.proto", 985,
  &descriptor_table_ProfilerCommon_2eproto_once, descriptor_table_ProfilerCommon_2eproto_sccs, descriptor_table_ProfilerCommon_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ProfilerCommon_2eproto::offsets,
  file_level_metadata_ProfilerCommon_2eproto, 3, file_level_enum_descriptors_ProfilerCommon_2eproto, file_level_service_descriptors_ProfilerCommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProfilerCommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProfilerCommon_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerCommon_2eproto);
  return file_level_enum_descriptors_ProfilerCommon_2eproto[0];
}
bool APIType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceSassLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerCommon_2eproto);
  return file_level_enum_descriptors_ProfilerCommon_2eproto[1];
}
bool SourceSassLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uint64x3::_Internal {
 public:
  using HasBits = decltype(std::declval<Uint64x3>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Uint64x3::Uint64x3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Uint64x3)
}
Uint64x3::Uint64x3(const Uint64x3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Uint64x3)
}

void Uint64x3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Uint64x3::~Uint64x3() {
  // @@protoc_insertion_point(destructor:Uint64x3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uint64x3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Uint64x3::ArenaDtor(void* object) {
  Uint64x3* _this = reinterpret_cast< Uint64x3* >(object);
  (void)_this;
}
void Uint64x3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint64x3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uint64x3& Uint64x3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uint64x3_ProfilerCommon_2eproto.base);
  return *internal_default_instance();
}


void Uint64x3::Clear() {
// @@protoc_insertion_point(message_clear_start:Uint64x3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint64x3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint64x3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uint64x3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 X = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_x(), target);
  }

  // optional uint64 Y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_y(), target);
  }

  // optional uint64 Z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uint64x3)
  return target;
}

size_t Uint64x3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uint64x3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 X = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_x());
    }

    // optional uint64 Y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_y());
    }

    // optional uint64 Z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_z());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint64x3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Uint64x3)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint64x3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint64x3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Uint64x3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Uint64x3)
    MergeFrom(*source);
  }
}

void Uint64x3::MergeFrom(const Uint64x3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Uint64x3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Uint64x3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Uint64x3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint64x3::CopyFrom(const Uint64x3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uint64x3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64x3::IsInitialized() const {
  return true;
}

void Uint64x3::InternalSwap(Uint64x3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uint64x3, z_)
      + sizeof(Uint64x3::z_)
      - PROTOBUF_FIELD_OFFSET(Uint64x3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint64x3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaunchData::_Internal {
 public:
  using HasBits = decltype(std::declval<LaunchData>()._has_bits_);
  static void set_has_processid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_threadid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_apicallid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_api(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_kernelid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_kernelmangledname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernelfunctionname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kerneldemangledname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_programhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_contexthandle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_workdimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Uint64x3& globalworkoffset(const LaunchData* msg);
  static void set_has_globalworkoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Uint64x3& globalworksize(const LaunchData* msg);
  static void set_has_globalworksize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Uint64x3& localworksize(const LaunchData* msg);
  static void set_has_localworksize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_streamid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00007fff) ^ 0x00007fff) != 0;
  }
};

const ::Uint64x3&
LaunchData::_Internal::globalworkoffset(const LaunchData* msg) {
  return *msg->globalworkoffset_;
}
const ::Uint64x3&
LaunchData::_Internal::globalworksize(const LaunchData* msg) {
  return *msg->globalworksize_;
}
const ::Uint64x3&
LaunchData::_Internal::localworksize(const LaunchData* msg) {
  return *msg->localworksize_;
}
LaunchData::LaunchData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LaunchData)
}
LaunchData::LaunchData(const LaunchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kernelmangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelmangledname()) {
    kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelmangledname(), 
      GetArena());
  }
  kernelfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelfunctionname()) {
    kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelfunctionname(), 
      GetArena());
  }
  kerneldemangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kerneldemangledname()) {
    kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kerneldemangledname(), 
      GetArena());
  }
  if (from._internal_has_globalworkoffset()) {
    globalworkoffset_ = new ::Uint64x3(*from.globalworkoffset_);
  } else {
    globalworkoffset_ = nullptr;
  }
  if (from._internal_has_globalworksize()) {
    globalworksize_ = new ::Uint64x3(*from.globalworksize_);
  } else {
    globalworksize_ = nullptr;
  }
  if (from._internal_has_localworksize()) {
    localworksize_ = new ::Uint64x3(*from.localworksize_);
  } else {
    localworksize_ = nullptr;
  }
  ::memcpy(&processid_, &from.processid_,
    static_cast<size_t>(reinterpret_cast<char*>(&streamid_) -
    reinterpret_cast<char*>(&processid_)) + sizeof(streamid_));
  // @@protoc_insertion_point(copy_constructor:LaunchData)
}

void LaunchData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaunchData_ProfilerCommon_2eproto.base);
  kernelmangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kerneldemangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&globalworkoffset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&streamid_) -
      reinterpret_cast<char*>(&globalworkoffset_)) + sizeof(streamid_));
}

LaunchData::~LaunchData() {
  // @@protoc_insertion_point(destructor:LaunchData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaunchData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kernelmangledname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelfunctionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kerneldemangledname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete globalworkoffset_;
  if (this != internal_default_instance()) delete globalworksize_;
  if (this != internal_default_instance()) delete localworksize_;
}

void LaunchData::ArenaDtor(void* object) {
  LaunchData* _this = reinterpret_cast< LaunchData* >(object);
  (void)_this;
}
void LaunchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchData& LaunchData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaunchData_ProfilerCommon_2eproto.base);
  return *internal_default_instance();
}


void LaunchData::Clear() {
// @@protoc_insertion_point(message_clear_start:LaunchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      kernelmangledname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      kernelfunctionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      kerneldemangledname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(globalworkoffset_ != nullptr);
      globalworkoffset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(globalworksize_ != nullptr);
      globalworksize_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(localworksize_ != nullptr);
      localworksize_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&processid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&threadid_) -
        reinterpret_cast<char*>(&processid_)) + sizeof(threadid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&apicallid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contextid_) -
        reinterpret_cast<char*>(&apicallid_)) + sizeof(contextid_));
  }
  streamid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaunchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ProcessID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_processid(&has_bits);
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ThreadID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_threadid(&has_bits);
          threadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 APICallID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_apicallid(&has_bits);
          apicallid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .APIType API = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::APIType_IsValid(val))) {
            _internal_set_api(static_cast<::APIType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 KernelID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kernelid(&has_bits);
          kernelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelMangledName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_kernelmangledname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LaunchData.KernelMangledName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelFunctionName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_kernelfunctionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LaunchData.KernelFunctionName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelDemangledName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_kerneldemangledname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LaunchData.KernelDemangledName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ProgramHandle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_programhandle(&has_bits);
          programhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ContextHandle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_contexthandle(&has_bits);
          contexthandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 DeviceID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 WorkDimensions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_workdimensions(&has_bits);
          workdimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 GlobalWorkOffset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalworkoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 GlobalWorkSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalworksize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 LocalWorkSize = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_localworksize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ContextID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_contextid(&has_bits);
          contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 StreamID = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_streamid(&has_bits);
          streamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaunchData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaunchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ProcessID = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_processid(), target);
  }

  // required uint32 ThreadID = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_threadid(), target);
  }

  // required uint64 APICallID = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_apicallid(), target);
  }

  // required .APIType API = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_api(), target);
  }

  // required uint64 KernelID = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_kernelid(), target);
  }

  // required string KernelMangledName = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelmangledname().data(), static_cast<int>(this->_internal_kernelmangledname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LaunchData.KernelMangledName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_kernelmangledname(), target);
  }

  // required string KernelFunctionName = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelfunctionname().data(), static_cast<int>(this->_internal_kernelfunctionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LaunchData.KernelFunctionName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_kernelfunctionname(), target);
  }

  // required string KernelDemangledName = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kerneldemangledname().data(), static_cast<int>(this->_internal_kerneldemangledname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LaunchData.KernelDemangledName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_kerneldemangledname(), target);
  }

  // required uint64 ProgramHandle = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_programhandle(), target);
  }

  // required uint64 ContextHandle = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_contexthandle(), target);
  }

  // required uint64 DeviceID = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_deviceid(), target);
  }

  // required uint32 WorkDimensions = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_workdimensions(), target);
  }

  // required .Uint64x3 GlobalWorkOffset = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::globalworkoffset(this), target, stream);
  }

  // required .Uint64x3 GlobalWorkSize = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::globalworksize(this), target, stream);
  }

  // required .Uint64x3 LocalWorkSize = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::localworksize(this), target, stream);
  }

  // optional uint32 ContextID = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_contextid(), target);
  }

  // optional uint32 StreamID = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_streamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaunchData)
  return target;
}

size_t LaunchData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LaunchData)
  size_t total_size = 0;

  if (_internal_has_kernelmangledname()) {
    // required string KernelMangledName = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelmangledname());
  }

  if (_internal_has_kernelfunctionname()) {
    // required string KernelFunctionName = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelfunctionname());
  }

  if (_internal_has_kerneldemangledname()) {
    // required string KernelDemangledName = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kerneldemangledname());
  }

  if (_internal_has_globalworkoffset()) {
    // required .Uint64x3 GlobalWorkOffset = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworkoffset_);
  }

  if (_internal_has_globalworksize()) {
    // required .Uint64x3 GlobalWorkSize = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworksize_);
  }

  if (_internal_has_localworksize()) {
    // required .Uint64x3 LocalWorkSize = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localworksize_);
  }

  if (_internal_has_processid()) {
    // required uint32 ProcessID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processid());
  }

  if (_internal_has_threadid()) {
    // required uint32 ThreadID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threadid());
  }

  if (_internal_has_apicallid()) {
    // required uint64 APICallID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_apicallid());
  }

  if (_internal_has_kernelid()) {
    // required uint64 KernelID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kernelid());
  }

  if (_internal_has_api()) {
    // required .APIType API = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_api());
  }

  if (_internal_has_workdimensions()) {
    // required uint32 WorkDimensions = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_workdimensions());
  }

  if (_internal_has_programhandle()) {
    // required uint64 ProgramHandle = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_programhandle());
  }

  if (_internal_has_contexthandle()) {
    // required uint64 ContextHandle = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contexthandle());
  }

  if (_internal_has_deviceid()) {
    // required uint64 DeviceID = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviceid());
  }

  return total_size;
}
size_t LaunchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LaunchData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required string KernelMangledName = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelmangledname());

    // required string KernelFunctionName = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelfunctionname());

    // required string KernelDemangledName = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kerneldemangledname());

    // required .Uint64x3 GlobalWorkOffset = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworkoffset_);

    // required .Uint64x3 GlobalWorkSize = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworksize_);

    // required .Uint64x3 LocalWorkSize = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localworksize_);

    // required uint32 ProcessID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processid());

    // required uint32 ThreadID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threadid());

    // required uint64 APICallID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_apicallid());

    // required uint64 KernelID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kernelid());

    // required .APIType API = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_api());

    // required uint32 WorkDimensions = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_workdimensions());

    // required uint64 ProgramHandle = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_programhandle());

    // required uint64 ContextHandle = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contexthandle());

    // required uint64 DeviceID = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_deviceid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ContextID = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contextid());
  }

  // optional uint32 StreamID = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_streamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LaunchData)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaunchData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LaunchData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LaunchData)
    MergeFrom(*source);
  }
}

void LaunchData::MergeFrom(const LaunchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LaunchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kernelmangledname(from._internal_kernelmangledname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_kernelfunctionname(from._internal_kernelfunctionname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_kerneldemangledname(from._internal_kerneldemangledname());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_globalworkoffset()->::Uint64x3::MergeFrom(from._internal_globalworkoffset());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_globalworksize()->::Uint64x3::MergeFrom(from._internal_globalworksize());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_localworksize()->::Uint64x3::MergeFrom(from._internal_localworksize());
    }
    if (cached_has_bits & 0x00000040u) {
      processid_ = from.processid_;
    }
    if (cached_has_bits & 0x00000080u) {
      threadid_ = from.threadid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      apicallid_ = from.apicallid_;
    }
    if (cached_has_bits & 0x00000200u) {
      kernelid_ = from.kernelid_;
    }
    if (cached_has_bits & 0x00000400u) {
      api_ = from.api_;
    }
    if (cached_has_bits & 0x00000800u) {
      workdimensions_ = from.workdimensions_;
    }
    if (cached_has_bits & 0x00001000u) {
      programhandle_ = from.programhandle_;
    }
    if (cached_has_bits & 0x00002000u) {
      contexthandle_ = from.contexthandle_;
    }
    if (cached_has_bits & 0x00004000u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00008000u) {
      contextid_ = from.contextid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_streamid(from._internal_streamid());
  }
}

void LaunchData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LaunchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchData::CopyFrom(const LaunchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LaunchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LaunchData::InternalSwap(LaunchData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kernelmangledname_.Swap(&other->kernelmangledname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelfunctionname_.Swap(&other->kernelfunctionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kerneldemangledname_.Swap(&other->kerneldemangledname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaunchData, streamid_)
      + sizeof(LaunchData::streamid_)
      - PROTOBUF_FIELD_OFFSET(LaunchData, globalworkoffset_)>(
          reinterpret_cast<char*>(&globalworkoffset_),
          reinterpret_cast<char*>(&other->globalworkoffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<SourceData>()._has_bits_);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intermediate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sasslevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_smrevision(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_binaryflags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SourceData::SourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SourceData)
}
SourceData::SourceData(const SourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  intermediate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_intermediate()) {
    intermediate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intermediate(), 
      GetArena());
  }
  binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_binary()) {
    binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binary(), 
      GetArena());
  }
  ::memcpy(&reference_, &from.reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&binaryflags_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(binaryflags_));
  // @@protoc_insertion_point(copy_constructor:SourceData)
}

void SourceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceData_ProfilerCommon_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intermediate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&binaryflags_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(binaryflags_));
}

SourceData::~SourceData() {
  // @@protoc_insertion_point(destructor:SourceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intermediate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceData::ArenaDtor(void* object) {
  SourceData* _this = reinterpret_cast< SourceData* >(object);
  (void)_this;
}
void SourceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceData& SourceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceData_ProfilerCommon_2eproto.base);
  return *internal_default_instance();
}


void SourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:SourceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      intermediate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      binary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&binaryflags_) -
        reinterpret_cast<char*>(&reference_)) + sizeof(binaryflags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 Reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reference(&has_bits);
          reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SourceData.Code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes Intermediate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_intermediate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes Binary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SourceSassLevel SassLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SourceSassLevel_IsValid(val))) {
            _internal_set_sasslevel(static_cast<::SourceSassLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 SMRevision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_smrevision(&has_bits);
          smrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 BinaryFlags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_binaryflags(&has_bits);
          binaryflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SourceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 Reference = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reference(), target);
  }

  // optional string Code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SourceData.Code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // optional bytes Intermediate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_intermediate(), target);
  }

  // optional bytes Binary = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_binary(), target);
  }

  // optional .SourceSassLevel SassLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sasslevel(), target);
  }

  // optional uint32 SMRevision = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_smrevision(), target);
  }

  // optional uint32 BinaryFlags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_binaryflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SourceData)
  return target;
}

size_t SourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SourceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string Code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional bytes Intermediate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_intermediate());
    }

    // optional bytes Binary = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary());
    }

    // optional uint64 Reference = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reference());
    }

    // optional .SourceSassLevel SassLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sasslevel());
    }

    // optional uint32 SMRevision = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_smrevision());
    }

    // optional uint32 BinaryFlags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_binaryflags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SourceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SourceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SourceData)
    MergeFrom(*source);
  }
}

void SourceData::MergeFrom(const SourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SourceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_intermediate(from._internal_intermediate());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_binary(from._internal_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      reference_ = from.reference_;
    }
    if (cached_has_bits & 0x00000010u) {
      sasslevel_ = from.sasslevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      smrevision_ = from.smrevision_;
    }
    if (cached_has_bits & 0x00000040u) {
      binaryflags_ = from.binaryflags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData::CopyFrom(const SourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData::IsInitialized() const {
  return true;
}

void SourceData::InternalSwap(SourceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intermediate_.Swap(&other->intermediate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  binary_.Swap(&other->binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceData, binaryflags_)
      + sizeof(SourceData::binaryflags_)
      - PROTOBUF_FIELD_OFFSET(SourceData, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Uint64x3* Arena::CreateMaybeMessage< ::Uint64x3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uint64x3 >(arena);
}
template<> PROTOBUF_NOINLINE ::LaunchData* Arena::CreateMaybeMessage< ::LaunchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LaunchData >(arena);
}
template<> PROTOBUF_NOINLINE ::SourceData* Arena::CreateMaybeMessage< ::SourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SourceData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
