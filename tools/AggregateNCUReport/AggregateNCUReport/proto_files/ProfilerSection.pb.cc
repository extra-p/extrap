// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerSection.proto

#include "ProfilerSection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProfilerMetricOptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricOptionFilter_ProfilerMetricOptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSection_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionBody_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionHeader_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfilerSectionMetric_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionTable_ProfilerSection_2eproto;
class ProfilerSectionMetricOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMetricOption> _instance;
} _ProfilerSectionMetricOption_default_instance_;
class ProfilerSectionMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMetric> _instance;
} _ProfilerSectionMetric_default_instance_;
class ProfilerSectionHighlightXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionHighlightX> _instance;
} _ProfilerSectionHighlightX_default_instance_;
class ProfilerSectionTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionTable> _instance;
} _ProfilerSectionTable_default_instance_;
class ProfilerSectionChartAxisRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionChartAxisRange> _instance;
} _ProfilerSectionChartAxisRange_default_instance_;
class ProfilerSectionChartValueAxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionChartValueAxis> _instance;
} _ProfilerSectionChartValueAxis_default_instance_;
class ProfilerSectionChartCategoryAxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionChartCategoryAxis> _instance;
} _ProfilerSectionChartCategoryAxis_default_instance_;
class ProfilerSectionChartHistogramAxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionChartHistogramAxis> _instance;
} _ProfilerSectionChartHistogramAxis_default_instance_;
class ProfilerSectionBarChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionBarChart> _instance;
} _ProfilerSectionBarChart_default_instance_;
class ProfilerSectionHistogramChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionHistogramChart> _instance;
} _ProfilerSectionHistogramChart_default_instance_;
class ProfilerSectionLineChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionLineChart> _instance;
} _ProfilerSectionLineChart_default_instance_;
class ProfilerSectionMemorySharedTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMemorySharedTable> _instance;
} _ProfilerSectionMemorySharedTable_default_instance_;
class ProfilerSectionMemoryFirstLevelCacheTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMemoryFirstLevelCacheTable> _instance;
} _ProfilerSectionMemoryFirstLevelCacheTable_default_instance_;
class ProfilerSectionMemorySecondLevelCacheTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMemorySecondLevelCacheTable> _instance;
} _ProfilerSectionMemorySecondLevelCacheTable_default_instance_;
class ProfilerSectionMemoryDeviceMemoryTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMemoryDeviceMemoryTable> _instance;
} _ProfilerSectionMemoryDeviceMemoryTable_default_instance_;
class ProfilerSectionMemoryChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMemoryChart> _instance;
} _ProfilerSectionMemoryChart_default_instance_;
class ProfilerSectionGfxMetricsWidgetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionGfxMetricsWidget> _instance;
} _ProfilerSectionGfxMetricsWidget_default_instance_;
class ProfilerSectionHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionHeader> _instance;
} _ProfilerSectionHeader_default_instance_;
class ProfilerSectionBodyItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionBodyItem> _instance;
} _ProfilerSectionBodyItem_default_instance_;
class ProfilerSectionBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionBody> _instance;
} _ProfilerSectionBody_default_instance_;
class ProfilerSectionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSectionMetrics> _instance;
} _ProfilerSectionMetrics_default_instance_;
class ProfilerSectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSection> _instance;
} _ProfilerSection_default_instance_;
class ProfilerSectionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSections> _instance;
} _ProfilerSections_default_instance_;
static void InitDefaultsscc_info_ProfilerSection_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSection_default_instance_;
    new (ptr) ::ProfilerSection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSection_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProfilerSection_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionHeader_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionBody_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionBarChart_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionBarChart_default_instance_;
    new (ptr) ::ProfilerSectionBarChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProfilerSectionBarChart_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionBody_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionBody_default_instance_;
    new (ptr) ::ProfilerSectionBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionBody_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionBody_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionBodyItem_default_instance_;
    new (ptr) ::ProfilerSectionBodyItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto.base,
      &scc_info_MetricOptionFilter_ProfilerMetricOptions_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionChartAxisRange_default_instance_;
    new (ptr) ::ProfilerSectionChartAxisRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionChartCategoryAxis_default_instance_;
    new (ptr) ::ProfilerSectionChartCategoryAxis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionChartHistogramAxis_default_instance_;
    new (ptr) ::ProfilerSectionChartHistogramAxis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionChartValueAxis_default_instance_;
    new (ptr) ::ProfilerSectionChartValueAxis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionGfxMetricsWidget_default_instance_;
    new (ptr) ::ProfilerSectionGfxMetricsWidget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionHeader_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionHeader_default_instance_;
    new (ptr) ::ProfilerSectionHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionHeader_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionHeader_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionHighlightX_default_instance_;
    new (ptr) ::ProfilerSectionHighlightX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionHistogramChart_default_instance_;
    new (ptr) ::ProfilerSectionHistogramChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionLineChart_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionLineChart_default_instance_;
    new (ptr) ::ProfilerSectionLineChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProfilerSectionLineChart_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMemoryChart_default_instance_;
    new (ptr) ::ProfilerSectionMemoryChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMemoryDeviceMemoryTable_default_instance_;
    new (ptr) ::ProfilerSectionMemoryDeviceMemoryTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMemoryFirstLevelCacheTable_default_instance_;
    new (ptr) ::ProfilerSectionMemoryFirstLevelCacheTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMemorySecondLevelCacheTable_default_instance_;
    new (ptr) ::ProfilerSectionMemorySecondLevelCacheTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMemorySharedTable_default_instance_;
    new (ptr) ::ProfilerSectionMemorySharedTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSectionMetric_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMetric_default_instance_;
    new (ptr) ::ProfilerSectionMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfilerSectionMetric_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfilerSectionMetric_ProfilerSection_2eproto}, {
      &scc_info_MetricOptionFilter_ProfilerMetricOptions_2eproto.base,
      &scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMetricOption_default_instance_;
    new (ptr) ::ProfilerSectionMetricOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto}, {
      &scc_info_MetricOptionFilter_ProfilerMetricOptions_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionMetrics_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionMetrics_default_instance_;
    new (ptr) ::ProfilerSectionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionMetrics_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSectionTable_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSectionTable_default_instance_;
    new (ptr) ::ProfilerSectionTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionTable_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSectionTable_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSections_ProfilerSection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSections_default_instance_;
    new (ptr) ::ProfilerSections();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSections_ProfilerSection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSections_ProfilerSection_2eproto}, {
      &scc_info_ProfilerSection_ProfilerSection_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProfilerSection_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProfilerSection_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProfilerSection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProfilerSection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetricOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetricOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetricOption, name_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetricOption, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetricOption, filter_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, name_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, hwunit_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, showinstances_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, unit_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, filter_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetric, options_),
  0,
  1,
  4,
  5,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHighlightX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHighlightX, metrics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, rows_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, columns_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, order_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionTable, metrics_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartAxisRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartAxisRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartAxisRange, min_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartAxisRange, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, range_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, tickcount_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, size_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartValueAxis, precision_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartCategoryAxis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartCategoryAxis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartCategoryAxis, label_),
  0,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartHistogramAxis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartHistogramAxis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartHistogramAxis, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionChartHistogramAxis, bincount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, direction_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, categoryaxis_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, valueaxis_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBarChart, metrics_),
  0,
  3,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, histogramaxis_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, valueaxis_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHistogramChart, metric_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, axisx_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, axisy_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, metrics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionLineChart, highlightx_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, showloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, showstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, showatomics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySharedTable, showtotals_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showatomics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showreductions_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showglobal_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showlocal_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showsurface_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showtexture_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showtotalloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showtotalstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryFirstLevelCacheTable, showtotals_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showatomics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showreductions_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showglobal_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showlocal_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showsurface_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showtexture_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showtotalloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showtotalstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemorySecondLevelCacheTable, showtotals_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, showloads_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, showstores_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryDeviceMemoryTable, showtotals_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryChart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMemoryChart, label_),
  0,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionGfxMetricsWidget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionGfxMetricsWidget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionGfxMetricsWidget, type_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionGfxMetricsWidget, label_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionGfxMetricsWidget, metrics_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHeader, rows_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionHeader, metrics_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, table_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, barchart_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, histogramchart_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, linechart_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, memorysharedtable_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, memoryfirstlevelcachetable_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, memorysecondlevelcachetable_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, memorydevicememorytable_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, memorychart_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, gfxmetricswidget_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBodyItem, filter_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBody, items_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionBody, displayname_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetrics, metrics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSectionMetrics, order_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, identifier_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, displayname_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, order_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, header_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, body_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, metrics_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, description_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSection, extends_),
  0,
  1,
  6,
  4,
  ~0u,
  5,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProfilerSections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSections, sections_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ProfilerSectionMetricOption)},
  { 11, 23, sizeof(::ProfilerSectionMetric)},
  { 30, -1, sizeof(::ProfilerSectionHighlightX)},
  { 36, 46, sizeof(::ProfilerSectionTable)},
  { 51, 58, sizeof(::ProfilerSectionChartAxisRange)},
  { 60, 70, sizeof(::ProfilerSectionChartValueAxis)},
  { 75, 81, sizeof(::ProfilerSectionChartCategoryAxis)},
  { 82, 89, sizeof(::ProfilerSectionChartHistogramAxis)},
  { 91, 101, sizeof(::ProfilerSectionBarChart)},
  { 106, 115, sizeof(::ProfilerSectionHistogramChart)},
  { 119, 129, sizeof(::ProfilerSectionLineChart)},
  { 134, 144, sizeof(::ProfilerSectionMemorySharedTable)},
  { 149, 166, sizeof(::ProfilerSectionMemoryFirstLevelCacheTable)},
  { 178, 195, sizeof(::ProfilerSectionMemorySecondLevelCacheTable)},
  { 207, 216, sizeof(::ProfilerSectionMemoryDeviceMemoryTable)},
  { 220, 226, sizeof(::ProfilerSectionMemoryChart)},
  { 227, 235, sizeof(::ProfilerSectionGfxMetricsWidget)},
  { 238, 245, sizeof(::ProfilerSectionHeader)},
  { 247, 263, sizeof(::ProfilerSectionBodyItem)},
  { 274, 281, sizeof(::ProfilerSectionBody)},
  { 283, 290, sizeof(::ProfilerSectionMetrics)},
  { 292, 305, sizeof(::ProfilerSection)},
  { 313, -1, sizeof(::ProfilerSections)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMetricOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionHighlightX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionChartAxisRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionChartValueAxis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionChartCategoryAxis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionChartHistogramAxis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionBarChart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionHistogramChart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionLineChart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMemorySharedTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMemoryFirstLevelCacheTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMemorySecondLevelCacheTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMemoryDeviceMemoryTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMemoryChart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionGfxMetricsWidget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionBodyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSectionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSections_default_instance_),
};

const char descriptor_table_protodef_ProfilerSection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ProfilerSection.proto\032\033ProfilerMetricO"
  "ptions.proto\"_\n\033ProfilerSectionMetricOpt"
  "ion\022\014\n\004Name\030\001 \002(\t\022\r\n\005Label\030\002 \001(\t\022#\n\006Filt"
  "er\030\003 \001(\0132\023.MetricOptionFilter\"\312\001\n\025Profil"
  "erSectionMetric\022\014\n\004Name\030\001 \002(\t\022\r\n\005Label\030\002"
  " \001(\t\022\033\n\006HWUnit\030\003 \001(\0162\013.HWUnitType\022\025\n\rSho"
  "wInstances\030\004 \001(\010\022\014\n\004Unit\030\005 \001(\t\022#\n\006Filter"
  "\030\006 \001(\0132\023.MetricOptionFilter\022-\n\007Options\030\007"
  " \003(\0132\034.ProfilerSectionMetricOption\"D\n\031Pr"
  "ofilerSectionHighlightX\022\'\n\007Metrics\030\001 \003(\013"
  "2\026.ProfilerSectionMetric\"\315\001\n\024ProfilerSec"
  "tionTable\022\r\n\005Label\030\001 \001(\t\022\014\n\004Rows\030\002 \001(\r\022\017"
  "\n\007Columns\030\003 \002(\r\0220\n\005Order\030\004 \001(\0162!.Profile"
  "rSectionTable.LayoutOrder\022\'\n\007Metrics\030\005 \003"
  "(\0132\026.ProfilerSectionMetric\",\n\013LayoutOrde"
  "r\022\014\n\010RowMajor\020\000\022\017\n\013ColumnMajor\020\001\"9\n\035Prof"
  "ilerSectionChartAxisRange\022\013\n\003Min\030\001 \001(\003\022\013"
  "\n\003Max\030\002 \001(\003\"\221\001\n\035ProfilerSectionChartValu"
  "eAxis\022\r\n\005Label\030\001 \001(\t\022-\n\005Range\030\002 \001(\0132\036.Pr"
  "ofilerSectionChartAxisRange\022\021\n\tTickCount"
  "\030\003 \001(\003\022\014\n\004Size\030\004 \001(\003\022\021\n\tPrecision\030\005 \001(\r\""
  "1\n ProfilerSectionChartCategoryAxis\022\r\n\005L"
  "abel\030\001 \001(\t\"D\n!ProfilerSectionChartHistog"
  "ramAxis\022\r\n\005Label\030\001 \001(\t\022\020\n\010BinCount\030\002 \001(\003"
  "\"\241\002\n\027ProfilerSectionBarChart\022\r\n\005Label\030\001 "
  "\001(\t\0226\n\tDirection\030\002 \001(\0162#.ProfilerSection"
  "BarChart.Directions\0227\n\014CategoryAxis\030\003 \001("
  "\0132!.ProfilerSectionChartCategoryAxis\0221\n\t"
  "ValueAxis\030\004 \001(\0132\036.ProfilerSectionChartVa"
  "lueAxis\022\'\n\007Metrics\030\005 \003(\0132\026.ProfilerSecti"
  "onMetric\"*\n\nDirections\022\016\n\nHorizontal\020\000\022\014"
  "\n\010Vertical\020\001\"\304\001\n\035ProfilerSectionHistogra"
  "mChart\022\r\n\005Label\030\001 \001(\t\0229\n\rHistogramAxis\030\002"
  " \001(\0132\".ProfilerSectionChartHistogramAxis"
  "\0221\n\tValueAxis\030\003 \001(\0132\036.ProfilerSectionCha"
  "rtValueAxis\022&\n\006Metric\030\004 \002(\0132\026.ProfilerSe"
  "ctionMetric\"\340\001\n\030ProfilerSectionLineChart"
  "\022\r\n\005Label\030\001 \001(\t\022-\n\005AxisX\030\002 \001(\0132\036.Profile"
  "rSectionChartValueAxis\022-\n\005AxisY\030\003 \001(\0132\036."
  "ProfilerSectionChartValueAxis\022\'\n\007Metrics"
  "\030\004 \003(\0132\026.ProfilerSectionMetric\022.\n\nHighli"
  "ghtX\030\005 \001(\0132\032.ProfilerSectionHighlightX\"\201"
  "\001\n ProfilerSectionMemorySharedTable\022\r\n\005L"
  "abel\030\001 \001(\t\022\021\n\tShowLoads\030\002 \001(\010\022\022\n\nShowSto"
  "res\030\003 \001(\010\022\023\n\013ShowAtomics\030\004 \001(\010\022\022\n\nShowTo"
  "tals\030\005 \001(\010\"\244\002\n)ProfilerSectionMemoryFirs"
  "tLevelCacheTable\022\r\n\005Label\030\001 \001(\t\022\021\n\tShowL"
  "oads\030\002 \001(\010\022\022\n\nShowStores\030\003 \001(\010\022\023\n\013ShowAt"
  "omics\030\004 \001(\010\022\026\n\016ShowReductions\030\005 \001(\010\022\022\n\nS"
  "howGlobal\030\006 \001(\010\022\021\n\tShowLocal\030\007 \001(\010\022\023\n\013Sh"
  "owSurface\030\010 \001(\010\022\023\n\013ShowTexture\030\t \001(\010\022\026\n\016"
  "ShowTotalLoads\030\n \001(\010\022\027\n\017ShowTotalStores\030"
  "\013 \001(\010\022\022\n\nShowTotals\030\014 \001(\010\"\245\002\n*ProfilerSe"
  "ctionMemorySecondLevelCacheTable\022\r\n\005Labe"
  "l\030\001 \001(\t\022\021\n\tShowLoads\030\002 \001(\010\022\022\n\nShowStores"
  "\030\003 \001(\010\022\023\n\013ShowAtomics\030\004 \001(\010\022\026\n\016ShowReduc"
  "tions\030\005 \001(\010\022\022\n\nShowGlobal\030\006 \001(\010\022\021\n\tShowL"
  "ocal\030\007 \001(\010\022\023\n\013ShowSurface\030\010 \001(\010\022\023\n\013ShowT"
  "exture\030\t \001(\010\022\026\n\016ShowTotalLoads\030\n \001(\010\022\027\n\017"
  "ShowTotalStores\030\013 \001(\010\022\022\n\nShowTotals\030\014 \001("
  "\010\"r\n&ProfilerSectionMemoryDeviceMemoryTa"
  "ble\022\r\n\005Label\030\001 \001(\t\022\021\n\tShowLoads\030\002 \001(\010\022\022\n"
  "\nShowStores\030\003 \001(\010\022\022\n\nShowTotals\030\004 \001(\010\"+\n"
  "\032ProfilerSectionMemoryChart\022\r\n\005Label\030\001 \001"
  "(\t\"g\n\037ProfilerSectionGfxMetricsWidget\022\014\n"
  "\004Type\030\001 \002(\t\022\r\n\005Label\030\002 \001(\t\022\'\n\007Metrics\030\003 "
  "\003(\0132\026.ProfilerSectionMetric\"N\n\025ProfilerS"
  "ectionHeader\022\014\n\004Rows\030\001 \001(\r\022\'\n\007Metrics\030\002 "
  "\003(\0132\026.ProfilerSectionMetric\"\220\005\n\027Profiler"
  "SectionBodyItem\022$\n\005Table\030\001 \001(\0132\025.Profile"
  "rSectionTable\022*\n\010BarChart\030\002 \001(\0132\030.Profil"
  "erSectionBarChart\0226\n\016HistogramChart\030\003 \001("
  "\0132\036.ProfilerSectionHistogramChart\022,\n\tLin"
  "eChart\030\004 \001(\0132\031.ProfilerSectionLineChart\022"
  "<\n\021MemorySharedTable\030e \001(\0132!.ProfilerSec"
  "tionMemorySharedTable\022N\n\032MemoryFirstLeve"
  "lCacheTable\030f \001(\0132*.ProfilerSectionMemor"
  "yFirstLevelCacheTable\022P\n\033MemorySecondLev"
  "elCacheTable\030g \001(\0132+.ProfilerSectionMemo"
  "rySecondLevelCacheTable\022H\n\027MemoryDeviceM"
  "emoryTable\030h \001(\0132\'.ProfilerSectionMemory"
  "DeviceMemoryTable\0220\n\013MemoryChart\030i \001(\0132\033"
  ".ProfilerSectionMemoryChart\022;\n\020GfxMetric"
  "sWidget\030\226\001 \001(\0132 .ProfilerSectionGfxMetri"
  "csWidget\022$\n\006Filter\030\310\001 \001(\0132\023.MetricOption"
  "Filter\"S\n\023ProfilerSectionBody\022\'\n\005Items\030\001"
  " \003(\0132\030.ProfilerSectionBodyItem\022\023\n\013Displa"
  "yName\030\002 \001(\t\"P\n\026ProfilerSectionMetrics\022\'\n"
  "\007Metrics\030\001 \003(\0132\026.ProfilerSectionMetric\022\r"
  "\n\005Order\030\002 \001(\r\"\345\001\n\017ProfilerSection\022\022\n\nIde"
  "ntifier\030\001 \002(\t\022\023\n\013DisplayName\030\002 \002(\t\022\r\n\005Or"
  "der\030\003 \001(\r\022&\n\006Header\030\004 \001(\0132\026.ProfilerSect"
  "ionHeader\022\"\n\004Body\030\005 \003(\0132\024.ProfilerSectio"
  "nBody\022(\n\007Metrics\030\006 \001(\0132\027.ProfilerSection"
  "Metrics\022\023\n\013Description\030\007 \001(\t\022\017\n\007Extends\030"
  "\t \001(\t\"6\n\020ProfilerSections\022\"\n\010Sections\030\001 "
  "\003(\0132\020.ProfilerSection*o\n\nHWUnitType\022\013\n\007I"
  "nvalid\020\000\022\013\n\007Default\020\001\022\007\n\003Gpc\020\002\022\007\n\003Tpc\020\003\022"
  "\006\n\002Sm\020\004\022\010\n\004Smsp\020\005\022\007\n\003Tex\020\006\022\007\n\003Lts\020\007\022\007\n\003L"
  "tc\020\010\022\010\n\004Fbpa\020\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProfilerSection_2eproto_deps[1] = {
  &::descriptor_table_ProfilerMetricOptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProfilerSection_2eproto_sccs[23] = {
  &scc_info_ProfilerSection_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionBody_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionHeader_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSectionTable_ProfilerSection_2eproto.base,
  &scc_info_ProfilerSections_ProfilerSection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProfilerSection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerSection_2eproto = {
  false, false, descriptor_table_protodef_ProfilerSection_2eproto, "ProfilerSection.proto", 3974,
  &descriptor_table_ProfilerSection_2eproto_once, descriptor_table_ProfilerSection_2eproto_sccs, descriptor_table_ProfilerSection_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_ProfilerSection_2eproto::offsets,
  file_level_metadata_ProfilerSection_2eproto, 23, file_level_enum_descriptors_ProfilerSection_2eproto, file_level_service_descriptors_ProfilerSection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProfilerSection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProfilerSection_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerSectionTable_LayoutOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerSection_2eproto);
  return file_level_enum_descriptors_ProfilerSection_2eproto[0];
}
bool ProfilerSectionTable_LayoutOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable::RowMajor;
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable::ColumnMajor;
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable::LayoutOrder_MIN;
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable::LayoutOrder_MAX;
constexpr int ProfilerSectionTable::LayoutOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerSectionBarChart_Directions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerSection_2eproto);
  return file_level_enum_descriptors_ProfilerSection_2eproto[1];
}
bool ProfilerSectionBarChart_Directions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart::Horizontal;
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart::Vertical;
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart::Directions_MIN;
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart::Directions_MAX;
constexpr int ProfilerSectionBarChart::Directions_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWUnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerSection_2eproto);
  return file_level_enum_descriptors_ProfilerSection_2eproto[2];
}
bool HWUnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProfilerSectionMetricOption::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMetricOption>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MetricOptionFilter& filter(const ProfilerSectionMetricOption* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::MetricOptionFilter&
ProfilerSectionMetricOption::_Internal::filter(const ProfilerSectionMetricOption* msg) {
  return *msg->filter_;
}
void ProfilerSectionMetricOption::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ProfilerSectionMetricOption::ProfilerSectionMetricOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMetricOption)
}
ProfilerSectionMetricOption::ProfilerSectionMetricOption(const ProfilerSectionMetricOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_filter()) {
    filter_ = new ::MetricOptionFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMetricOption)
}

void ProfilerSectionMetricOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_ = nullptr;
}

ProfilerSectionMetricOption::~ProfilerSectionMetricOption() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMetricOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMetricOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
}

void ProfilerSectionMetricOption::ArenaDtor(void* object) {
  ProfilerSectionMetricOption* _this = reinterpret_cast< ProfilerSectionMetricOption* >(object);
  (void)_this;
}
void ProfilerSectionMetricOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMetricOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMetricOption& ProfilerSectionMetricOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMetricOption_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMetricOption::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMetricOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMetricOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMetricOption.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMetricOption.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MetricOptionFilter Filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMetricOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMetricOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMetricOption.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string Label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMetricOption.Label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional .MetricOptionFilter Filter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMetricOption)
  return target;
}

size_t ProfilerSectionMetricOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMetricOption)
  size_t total_size = 0;

  // required string Name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string Label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .MetricOptionFilter Filter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMetricOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMetricOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMetricOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMetricOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMetricOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMetricOption)
    MergeFrom(*source);
  }
}

void ProfilerSectionMetricOption::MergeFrom(const ProfilerSectionMetricOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMetricOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_filter()->::MetricOptionFilter::MergeFrom(from._internal_filter());
    }
  }
}

void ProfilerSectionMetricOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMetricOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMetricOption::CopyFrom(const ProfilerSectionMetricOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMetricOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMetricOption::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProfilerSectionMetricOption::InternalSwap(ProfilerSectionMetricOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMetricOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMetric>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hwunit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_showinstances(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::MetricOptionFilter& filter(const ProfilerSectionMetric* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::MetricOptionFilter&
ProfilerSectionMetric::_Internal::filter(const ProfilerSectionMetric* msg) {
  return *msg->filter_;
}
void ProfilerSectionMetric::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ProfilerSectionMetric::ProfilerSectionMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMetric)
}
ProfilerSectionMetric::ProfilerSectionMetric(const ProfilerSectionMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  if (from._internal_has_filter()) {
    filter_ = new ::MetricOptionFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  ::memcpy(&hwunit_, &from.hwunit_,
    static_cast<size_t>(reinterpret_cast<char*>(&showinstances_) -
    reinterpret_cast<char*>(&hwunit_)) + sizeof(showinstances_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMetric)
}

void ProfilerSectionMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&showinstances_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(showinstances_));
}

ProfilerSectionMetric::~ProfilerSectionMetric() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMetric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
}

void ProfilerSectionMetric::ArenaDtor(void* object) {
  ProfilerSectionMetric* _this = reinterpret_cast< ProfilerSectionMetric* >(object);
  (void)_this;
}
void ProfilerSectionMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMetric& ProfilerSectionMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMetric_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&hwunit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showinstances_) -
        reinterpret_cast<char*>(&hwunit_)) + sizeof(showinstances_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMetric.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMetric.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HWUnitType HWUnit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HWUnitType_IsValid(val))) {
            _internal_set_hwunit(static_cast<::HWUnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool ShowInstances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showinstances(&has_bits);
          showinstances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMetric.Unit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MetricOptionFilter Filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetricOption Options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMetric.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string Label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMetric.Label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional .HWUnitType HWUnit = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_hwunit(), target);
  }

  // optional bool ShowInstances = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showinstances(), target);
  }

  // optional string Unit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMetric.Unit");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unit(), target);
  }

  // optional .MetricOptionFilter Filter = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::filter(this), target, stream);
  }

  // repeated .ProfilerSectionMetricOption Options = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMetric)
  return target;
}

size_t ProfilerSectionMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMetric)
  size_t total_size = 0;

  // required string Name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetricOption Options = 7;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string Label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string Unit = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional .MetricOptionFilter Filter = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

    // optional .HWUnitType HWUnit = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hwunit());
    }

    // optional bool ShowInstances = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMetric)
    MergeFrom(*source);
  }
}

void ProfilerSectionMetric::MergeFrom(const ProfilerSectionMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_filter()->::MetricOptionFilter::MergeFrom(from._internal_filter());
    }
    if (cached_has_bits & 0x00000010u) {
      hwunit_ = from.hwunit_;
    }
    if (cached_has_bits & 0x00000020u) {
      showinstances_ = from.showinstances_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMetric::CopyFrom(const ProfilerSectionMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMetric::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(options_)) return false;
  return true;
}

void ProfilerSectionMetric::InternalSwap(ProfilerSectionMetric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  options_.InternalSwap(&other->options_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionMetric, showinstances_)
      + sizeof(ProfilerSectionMetric::showinstances_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionMetric, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionHighlightX::_Internal {
 public:
};

ProfilerSectionHighlightX::ProfilerSectionHighlightX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionHighlightX)
}
ProfilerSectionHighlightX::ProfilerSectionHighlightX(const ProfilerSectionHighlightX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionHighlightX)
}

void ProfilerSectionHighlightX::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto.base);
}

ProfilerSectionHighlightX::~ProfilerSectionHighlightX() {
  // @@protoc_insertion_point(destructor:ProfilerSectionHighlightX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionHighlightX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSectionHighlightX::ArenaDtor(void* object) {
  ProfilerSectionHighlightX* _this = reinterpret_cast< ProfilerSectionHighlightX* >(object);
  (void)_this;
}
void ProfilerSectionHighlightX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionHighlightX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionHighlightX& ProfilerSectionHighlightX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionHighlightX_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionHighlightX::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionHighlightX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionHighlightX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProfilerSectionMetric Metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionHighlightX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionHighlightX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionHighlightX)
  return target;
}

size_t ProfilerSectionHighlightX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionHighlightX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionHighlightX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionHighlightX)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionHighlightX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionHighlightX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionHighlightX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionHighlightX)
    MergeFrom(*source);
  }
}

void ProfilerSectionHighlightX::MergeFrom(const ProfilerSectionHighlightX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionHighlightX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
}

void ProfilerSectionHighlightX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionHighlightX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionHighlightX::CopyFrom(const ProfilerSectionHighlightX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionHighlightX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionHighlightX::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionHighlightX::InternalSwap(ProfilerSectionHighlightX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionHighlightX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionTable>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ProfilerSectionTable::ProfilerSectionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionTable)
}
ProfilerSectionTable::ProfilerSectionTable(const ProfilerSectionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionTable)
}

void ProfilerSectionTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionTable_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(order_));
}

ProfilerSectionTable::~ProfilerSectionTable() {
  // @@protoc_insertion_point(destructor:ProfilerSectionTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionTable::ArenaDtor(void* object) {
  ProfilerSectionTable* _this = reinterpret_cast< ProfilerSectionTable* >(object);
  (void)_this;
}
void ProfilerSectionTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionTable& ProfilerSectionTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionTable_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&rows_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionTable.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rows(&has_bits);
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 Columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_columns(&has_bits);
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionTable.LayoutOrder Order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerSectionTable_LayoutOrder_IsValid(val))) {
            _internal_set_order(static_cast<::ProfilerSectionTable_LayoutOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetric Metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionTable.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional uint32 Rows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rows(), target);
  }

  // required uint32 Columns = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columns(), target);
  }

  // optional .ProfilerSectionTable.LayoutOrder Order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_order(), target);
  }

  // repeated .ProfilerSectionMetric Metrics = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionTable)
  return target;
}

size_t ProfilerSectionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionTable)
  size_t total_size = 0;

  // required uint32 Columns = 3;
  if (_internal_has_columns()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_columns());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 5;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional uint32 Rows = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rows());
    }

  }
  // optional .ProfilerSectionTable.LayoutOrder Order = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionTable)
    MergeFrom(*source);
  }
}

void ProfilerSectionTable::MergeFrom(const ProfilerSectionTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      rows_ = from.rows_;
    }
    if (cached_has_bits & 0x00000004u) {
      columns_ = from.columns_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionTable::CopyFrom(const ProfilerSectionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionTable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionTable::InternalSwap(ProfilerSectionTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionTable, order_)
      + sizeof(ProfilerSectionTable::order_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionTable, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionChartAxisRange::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionChartAxisRange>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilerSectionChartAxisRange::ProfilerSectionChartAxisRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionChartAxisRange)
}
ProfilerSectionChartAxisRange::ProfilerSectionChartAxisRange(const ProfilerSectionChartAxisRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionChartAxisRange)
}

void ProfilerSectionChartAxisRange::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

ProfilerSectionChartAxisRange::~ProfilerSectionChartAxisRange() {
  // @@protoc_insertion_point(destructor:ProfilerSectionChartAxisRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionChartAxisRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSectionChartAxisRange::ArenaDtor(void* object) {
  ProfilerSectionChartAxisRange* _this = reinterpret_cast< ProfilerSectionChartAxisRange* >(object);
  (void)_this;
}
void ProfilerSectionChartAxisRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionChartAxisRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionChartAxisRange& ProfilerSectionChartAxisRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionChartAxisRange_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionChartAxisRange::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionChartAxisRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionChartAxisRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 Min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 Max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionChartAxisRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionChartAxisRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 Min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_min(), target);
  }

  // optional int64 Max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionChartAxisRange)
  return target;
}

size_t ProfilerSectionChartAxisRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionChartAxisRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 Min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_min());
    }

    // optional int64 Max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionChartAxisRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionChartAxisRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionChartAxisRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionChartAxisRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionChartAxisRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionChartAxisRange)
    MergeFrom(*source);
  }
}

void ProfilerSectionChartAxisRange::MergeFrom(const ProfilerSectionChartAxisRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionChartAxisRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionChartAxisRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionChartAxisRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionChartAxisRange::CopyFrom(const ProfilerSectionChartAxisRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionChartAxisRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionChartAxisRange::IsInitialized() const {
  return true;
}

void ProfilerSectionChartAxisRange::InternalSwap(ProfilerSectionChartAxisRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionChartAxisRange, max_)
      + sizeof(ProfilerSectionChartAxisRange::max_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionChartAxisRange, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionChartAxisRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionChartValueAxis::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionChartValueAxis>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerSectionChartAxisRange& range(const ProfilerSectionChartValueAxis* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ProfilerSectionChartAxisRange&
ProfilerSectionChartValueAxis::_Internal::range(const ProfilerSectionChartValueAxis* msg) {
  return *msg->range_;
}
ProfilerSectionChartValueAxis::ProfilerSectionChartValueAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionChartValueAxis)
}
ProfilerSectionChartValueAxis::ProfilerSectionChartValueAxis(const ProfilerSectionChartValueAxis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_range()) {
    range_ = new ::ProfilerSectionChartAxisRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  ::memcpy(&tickcount_, &from.tickcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&tickcount_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionChartValueAxis)
}

void ProfilerSectionChartValueAxis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&range_)) + sizeof(precision_));
}

ProfilerSectionChartValueAxis::~ProfilerSectionChartValueAxis() {
  // @@protoc_insertion_point(destructor:ProfilerSectionChartValueAxis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionChartValueAxis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void ProfilerSectionChartValueAxis::ArenaDtor(void* object) {
  ProfilerSectionChartValueAxis* _this = reinterpret_cast< ProfilerSectionChartValueAxis* >(object);
  (void)_this;
}
void ProfilerSectionChartValueAxis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionChartValueAxis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionChartValueAxis& ProfilerSectionChartValueAxis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionChartValueAxis_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionChartValueAxis::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionChartValueAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&tickcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precision_) -
        reinterpret_cast<char*>(&tickcount_)) + sizeof(precision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionChartValueAxis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionChartValueAxis.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartAxisRange Range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 TickCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tickcount(&has_bits);
          tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 Size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Precision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionChartValueAxis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionChartValueAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionChartValueAxis.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional .ProfilerSectionChartAxisRange Range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // optional int64 TickCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tickcount(), target);
  }

  // optional int64 Size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  // optional uint32 Precision = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionChartValueAxis)
  return target;
}

size_t ProfilerSectionChartValueAxis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionChartValueAxis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .ProfilerSectionChartAxisRange Range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

    // optional int64 TickCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tickcount());
    }

    // optional int64 Size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_size());
    }

    // optional uint32 Precision = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_precision());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionChartValueAxis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionChartValueAxis)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionChartValueAxis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionChartValueAxis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionChartValueAxis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionChartValueAxis)
    MergeFrom(*source);
  }
}

void ProfilerSectionChartValueAxis::MergeFrom(const ProfilerSectionChartValueAxis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionChartValueAxis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_range()->::ProfilerSectionChartAxisRange::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000004u) {
      tickcount_ = from.tickcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionChartValueAxis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionChartValueAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionChartValueAxis::CopyFrom(const ProfilerSectionChartValueAxis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionChartValueAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionChartValueAxis::IsInitialized() const {
  return true;
}

void ProfilerSectionChartValueAxis::InternalSwap(ProfilerSectionChartValueAxis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionChartValueAxis, precision_)
      + sizeof(ProfilerSectionChartValueAxis::precision_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionChartValueAxis, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionChartValueAxis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionChartCategoryAxis::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionChartCategoryAxis>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilerSectionChartCategoryAxis::ProfilerSectionChartCategoryAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionChartCategoryAxis)
}
ProfilerSectionChartCategoryAxis::ProfilerSectionChartCategoryAxis(const ProfilerSectionChartCategoryAxis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionChartCategoryAxis)
}

void ProfilerSectionChartCategoryAxis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfilerSectionChartCategoryAxis::~ProfilerSectionChartCategoryAxis() {
  // @@protoc_insertion_point(destructor:ProfilerSectionChartCategoryAxis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionChartCategoryAxis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionChartCategoryAxis::ArenaDtor(void* object) {
  ProfilerSectionChartCategoryAxis* _this = reinterpret_cast< ProfilerSectionChartCategoryAxis* >(object);
  (void)_this;
}
void ProfilerSectionChartCategoryAxis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionChartCategoryAxis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionChartCategoryAxis& ProfilerSectionChartCategoryAxis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionChartCategoryAxis_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionChartCategoryAxis::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionChartCategoryAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionChartCategoryAxis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionChartCategoryAxis.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionChartCategoryAxis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionChartCategoryAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionChartCategoryAxis.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionChartCategoryAxis)
  return target;
}

size_t ProfilerSectionChartCategoryAxis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionChartCategoryAxis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string Label = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionChartCategoryAxis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionChartCategoryAxis)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionChartCategoryAxis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionChartCategoryAxis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionChartCategoryAxis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionChartCategoryAxis)
    MergeFrom(*source);
  }
}

void ProfilerSectionChartCategoryAxis::MergeFrom(const ProfilerSectionChartCategoryAxis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionChartCategoryAxis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_label()) {
    _internal_set_label(from._internal_label());
  }
}

void ProfilerSectionChartCategoryAxis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionChartCategoryAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionChartCategoryAxis::CopyFrom(const ProfilerSectionChartCategoryAxis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionChartCategoryAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionChartCategoryAxis::IsInitialized() const {
  return true;
}

void ProfilerSectionChartCategoryAxis::InternalSwap(ProfilerSectionChartCategoryAxis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionChartCategoryAxis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionChartHistogramAxis::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionChartHistogramAxis>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bincount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilerSectionChartHistogramAxis::ProfilerSectionChartHistogramAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionChartHistogramAxis)
}
ProfilerSectionChartHistogramAxis::ProfilerSectionChartHistogramAxis(const ProfilerSectionChartHistogramAxis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  bincount_ = from.bincount_;
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionChartHistogramAxis)
}

void ProfilerSectionChartHistogramAxis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bincount_ = PROTOBUF_LONGLONG(0);
}

ProfilerSectionChartHistogramAxis::~ProfilerSectionChartHistogramAxis() {
  // @@protoc_insertion_point(destructor:ProfilerSectionChartHistogramAxis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionChartHistogramAxis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionChartHistogramAxis::ArenaDtor(void* object) {
  ProfilerSectionChartHistogramAxis* _this = reinterpret_cast< ProfilerSectionChartHistogramAxis* >(object);
  (void)_this;
}
void ProfilerSectionChartHistogramAxis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionChartHistogramAxis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionChartHistogramAxis& ProfilerSectionChartHistogramAxis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionChartHistogramAxis_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionChartHistogramAxis::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionChartHistogramAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  bincount_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionChartHistogramAxis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionChartHistogramAxis.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 BinCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bincount(&has_bits);
          bincount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionChartHistogramAxis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionChartHistogramAxis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionChartHistogramAxis.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional int64 BinCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bincount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionChartHistogramAxis)
  return target;
}

size_t ProfilerSectionChartHistogramAxis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionChartHistogramAxis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional int64 BinCount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_bincount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionChartHistogramAxis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionChartHistogramAxis)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionChartHistogramAxis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionChartHistogramAxis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionChartHistogramAxis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionChartHistogramAxis)
    MergeFrom(*source);
  }
}

void ProfilerSectionChartHistogramAxis::MergeFrom(const ProfilerSectionChartHistogramAxis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionChartHistogramAxis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      bincount_ = from.bincount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionChartHistogramAxis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionChartHistogramAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionChartHistogramAxis::CopyFrom(const ProfilerSectionChartHistogramAxis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionChartHistogramAxis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionChartHistogramAxis::IsInitialized() const {
  return true;
}

void ProfilerSectionChartHistogramAxis::InternalSwap(ProfilerSectionChartHistogramAxis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bincount_, other->bincount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionChartHistogramAxis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionBarChart::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionBarChart>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ProfilerSectionChartCategoryAxis& categoryaxis(const ProfilerSectionBarChart* msg);
  static void set_has_categoryaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerSectionChartValueAxis& valueaxis(const ProfilerSectionBarChart* msg);
  static void set_has_valueaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ProfilerSectionChartCategoryAxis&
ProfilerSectionBarChart::_Internal::categoryaxis(const ProfilerSectionBarChart* msg) {
  return *msg->categoryaxis_;
}
const ::ProfilerSectionChartValueAxis&
ProfilerSectionBarChart::_Internal::valueaxis(const ProfilerSectionBarChart* msg) {
  return *msg->valueaxis_;
}
ProfilerSectionBarChart::ProfilerSectionBarChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionBarChart)
}
ProfilerSectionBarChart::ProfilerSectionBarChart(const ProfilerSectionBarChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_categoryaxis()) {
    categoryaxis_ = new ::ProfilerSectionChartCategoryAxis(*from.categoryaxis_);
  } else {
    categoryaxis_ = nullptr;
  }
  if (from._internal_has_valueaxis()) {
    valueaxis_ = new ::ProfilerSectionChartValueAxis(*from.valueaxis_);
  } else {
    valueaxis_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionBarChart)
}

void ProfilerSectionBarChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&categoryaxis_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&categoryaxis_)) + sizeof(direction_));
}

ProfilerSectionBarChart::~ProfilerSectionBarChart() {
  // @@protoc_insertion_point(destructor:ProfilerSectionBarChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionBarChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete categoryaxis_;
  if (this != internal_default_instance()) delete valueaxis_;
}

void ProfilerSectionBarChart::ArenaDtor(void* object) {
  ProfilerSectionBarChart* _this = reinterpret_cast< ProfilerSectionBarChart* >(object);
  (void)_this;
}
void ProfilerSectionBarChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionBarChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionBarChart& ProfilerSectionBarChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionBarChart::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionBarChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(categoryaxis_ != nullptr);
      categoryaxis_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(valueaxis_ != nullptr);
      valueaxis_->Clear();
    }
  }
  direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionBarChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionBarChart.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionBarChart.Directions Direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerSectionBarChart_Directions_IsValid(val))) {
            _internal_set_direction(static_cast<::ProfilerSectionBarChart_Directions>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartCategoryAxis CategoryAxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_categoryaxis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartValueAxis ValueAxis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_valueaxis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetric Metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionBarChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionBarChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionBarChart.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional .ProfilerSectionBarChart.Directions Direction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // optional .ProfilerSectionChartCategoryAxis CategoryAxis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::categoryaxis(this), target, stream);
  }

  // optional .ProfilerSectionChartValueAxis ValueAxis = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::valueaxis(this), target, stream);
  }

  // repeated .ProfilerSectionMetric Metrics = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionBarChart)
  return target;
}

size_t ProfilerSectionBarChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionBarChart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 5;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .ProfilerSectionChartCategoryAxis CategoryAxis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *categoryaxis_);
    }

    // optional .ProfilerSectionChartValueAxis ValueAxis = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *valueaxis_);
    }

    // optional .ProfilerSectionBarChart.Directions Direction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionBarChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionBarChart)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionBarChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionBarChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionBarChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionBarChart)
    MergeFrom(*source);
  }
}

void ProfilerSectionBarChart::MergeFrom(const ProfilerSectionBarChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionBarChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_categoryaxis()->::ProfilerSectionChartCategoryAxis::MergeFrom(from._internal_categoryaxis());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_valueaxis()->::ProfilerSectionChartValueAxis::MergeFrom(from._internal_valueaxis());
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionBarChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionBarChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionBarChart::CopyFrom(const ProfilerSectionBarChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionBarChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionBarChart::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionBarChart::InternalSwap(ProfilerSectionBarChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionBarChart, direction_)
      + sizeof(ProfilerSectionBarChart::direction_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionBarChart, categoryaxis_)>(
          reinterpret_cast<char*>(&categoryaxis_),
          reinterpret_cast<char*>(&other->categoryaxis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionBarChart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionHistogramChart::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionHistogramChart>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerSectionChartHistogramAxis& histogramaxis(const ProfilerSectionHistogramChart* msg);
  static void set_has_histogramaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerSectionChartValueAxis& valueaxis(const ProfilerSectionHistogramChart* msg);
  static void set_has_valueaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfilerSectionMetric& metric(const ProfilerSectionHistogramChart* msg);
  static void set_has_metric(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::ProfilerSectionChartHistogramAxis&
ProfilerSectionHistogramChart::_Internal::histogramaxis(const ProfilerSectionHistogramChart* msg) {
  return *msg->histogramaxis_;
}
const ::ProfilerSectionChartValueAxis&
ProfilerSectionHistogramChart::_Internal::valueaxis(const ProfilerSectionHistogramChart* msg) {
  return *msg->valueaxis_;
}
const ::ProfilerSectionMetric&
ProfilerSectionHistogramChart::_Internal::metric(const ProfilerSectionHistogramChart* msg) {
  return *msg->metric_;
}
ProfilerSectionHistogramChart::ProfilerSectionHistogramChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionHistogramChart)
}
ProfilerSectionHistogramChart::ProfilerSectionHistogramChart(const ProfilerSectionHistogramChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_histogramaxis()) {
    histogramaxis_ = new ::ProfilerSectionChartHistogramAxis(*from.histogramaxis_);
  } else {
    histogramaxis_ = nullptr;
  }
  if (from._internal_has_valueaxis()) {
    valueaxis_ = new ::ProfilerSectionChartValueAxis(*from.valueaxis_);
  } else {
    valueaxis_ = nullptr;
  }
  if (from._internal_has_metric()) {
    metric_ = new ::ProfilerSectionMetric(*from.metric_);
  } else {
    metric_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionHistogramChart)
}

void ProfilerSectionHistogramChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&histogramaxis_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&histogramaxis_)) + sizeof(metric_));
}

ProfilerSectionHistogramChart::~ProfilerSectionHistogramChart() {
  // @@protoc_insertion_point(destructor:ProfilerSectionHistogramChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionHistogramChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete histogramaxis_;
  if (this != internal_default_instance()) delete valueaxis_;
  if (this != internal_default_instance()) delete metric_;
}

void ProfilerSectionHistogramChart::ArenaDtor(void* object) {
  ProfilerSectionHistogramChart* _this = reinterpret_cast< ProfilerSectionHistogramChart* >(object);
  (void)_this;
}
void ProfilerSectionHistogramChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionHistogramChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionHistogramChart& ProfilerSectionHistogramChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionHistogramChart::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionHistogramChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(histogramaxis_ != nullptr);
      histogramaxis_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(valueaxis_ != nullptr);
      valueaxis_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metric_ != nullptr);
      metric_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionHistogramChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionHistogramChart.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartHistogramAxis HistogramAxis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogramaxis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartValueAxis ValueAxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_valueaxis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProfilerSectionMetric Metric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionHistogramChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionHistogramChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionHistogramChart.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional .ProfilerSectionChartHistogramAxis HistogramAxis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::histogramaxis(this), target, stream);
  }

  // optional .ProfilerSectionChartValueAxis ValueAxis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::valueaxis(this), target, stream);
  }

  // required .ProfilerSectionMetric Metric = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metric(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionHistogramChart)
  return target;
}

size_t ProfilerSectionHistogramChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionHistogramChart)
  size_t total_size = 0;

  // required .ProfilerSectionMetric Metric = 4;
  if (_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .ProfilerSectionChartHistogramAxis HistogramAxis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *histogramaxis_);
    }

    // optional .ProfilerSectionChartValueAxis ValueAxis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *valueaxis_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionHistogramChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionHistogramChart)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionHistogramChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionHistogramChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionHistogramChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionHistogramChart)
    MergeFrom(*source);
  }
}

void ProfilerSectionHistogramChart::MergeFrom(const ProfilerSectionHistogramChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionHistogramChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_histogramaxis()->::ProfilerSectionChartHistogramAxis::MergeFrom(from._internal_histogramaxis());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_valueaxis()->::ProfilerSectionChartValueAxis::MergeFrom(from._internal_valueaxis());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_metric()->::ProfilerSectionMetric::MergeFrom(from._internal_metric());
    }
  }
}

void ProfilerSectionHistogramChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionHistogramChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionHistogramChart::CopyFrom(const ProfilerSectionHistogramChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionHistogramChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionHistogramChart::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_metric()) {
    if (!metric_->IsInitialized()) return false;
  }
  return true;
}

void ProfilerSectionHistogramChart::InternalSwap(ProfilerSectionHistogramChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionHistogramChart, metric_)
      + sizeof(ProfilerSectionHistogramChart::metric_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionHistogramChart, histogramaxis_)>(
          reinterpret_cast<char*>(&histogramaxis_),
          reinterpret_cast<char*>(&other->histogramaxis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionHistogramChart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionLineChart::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionLineChart>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerSectionChartValueAxis& axisx(const ProfilerSectionLineChart* msg);
  static void set_has_axisx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerSectionChartValueAxis& axisy(const ProfilerSectionLineChart* msg);
  static void set_has_axisy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfilerSectionHighlightX& highlightx(const ProfilerSectionLineChart* msg);
  static void set_has_highlightx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ProfilerSectionChartValueAxis&
ProfilerSectionLineChart::_Internal::axisx(const ProfilerSectionLineChart* msg) {
  return *msg->axisx_;
}
const ::ProfilerSectionChartValueAxis&
ProfilerSectionLineChart::_Internal::axisy(const ProfilerSectionLineChart* msg) {
  return *msg->axisy_;
}
const ::ProfilerSectionHighlightX&
ProfilerSectionLineChart::_Internal::highlightx(const ProfilerSectionLineChart* msg) {
  return *msg->highlightx_;
}
ProfilerSectionLineChart::ProfilerSectionLineChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionLineChart)
}
ProfilerSectionLineChart::ProfilerSectionLineChart(const ProfilerSectionLineChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_axisx()) {
    axisx_ = new ::ProfilerSectionChartValueAxis(*from.axisx_);
  } else {
    axisx_ = nullptr;
  }
  if (from._internal_has_axisy()) {
    axisy_ = new ::ProfilerSectionChartValueAxis(*from.axisy_);
  } else {
    axisy_ = nullptr;
  }
  if (from._internal_has_highlightx()) {
    highlightx_ = new ::ProfilerSectionHighlightX(*from.highlightx_);
  } else {
    highlightx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionLineChart)
}

void ProfilerSectionLineChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&axisx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&highlightx_) -
      reinterpret_cast<char*>(&axisx_)) + sizeof(highlightx_));
}

ProfilerSectionLineChart::~ProfilerSectionLineChart() {
  // @@protoc_insertion_point(destructor:ProfilerSectionLineChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionLineChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete axisx_;
  if (this != internal_default_instance()) delete axisy_;
  if (this != internal_default_instance()) delete highlightx_;
}

void ProfilerSectionLineChart::ArenaDtor(void* object) {
  ProfilerSectionLineChart* _this = reinterpret_cast< ProfilerSectionLineChart* >(object);
  (void)_this;
}
void ProfilerSectionLineChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionLineChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionLineChart& ProfilerSectionLineChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionLineChart::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionLineChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(axisx_ != nullptr);
      axisx_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(axisy_ != nullptr);
      axisy_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(highlightx_ != nullptr);
      highlightx_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionLineChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionLineChart.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartValueAxis AxisX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axisx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionChartValueAxis AxisY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_axisy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetric Metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionHighlightX HighlightX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlightx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionLineChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionLineChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionLineChart.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional .ProfilerSectionChartValueAxis AxisX = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::axisx(this), target, stream);
  }

  // optional .ProfilerSectionChartValueAxis AxisY = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::axisy(this), target, stream);
  }

  // repeated .ProfilerSectionMetric Metrics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_metrics(i), target, stream);
  }

  // optional .ProfilerSectionHighlightX HighlightX = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::highlightx(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionLineChart)
  return target;
}

size_t ProfilerSectionLineChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionLineChart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 4;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .ProfilerSectionChartValueAxis AxisX = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axisx_);
    }

    // optional .ProfilerSectionChartValueAxis AxisY = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axisy_);
    }

    // optional .ProfilerSectionHighlightX HighlightX = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *highlightx_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionLineChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionLineChart)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionLineChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionLineChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionLineChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionLineChart)
    MergeFrom(*source);
  }
}

void ProfilerSectionLineChart::MergeFrom(const ProfilerSectionLineChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionLineChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_axisx()->::ProfilerSectionChartValueAxis::MergeFrom(from._internal_axisx());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_axisy()->::ProfilerSectionChartValueAxis::MergeFrom(from._internal_axisy());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_highlightx()->::ProfilerSectionHighlightX::MergeFrom(from._internal_highlightx());
    }
  }
}

void ProfilerSectionLineChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionLineChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionLineChart::CopyFrom(const ProfilerSectionLineChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionLineChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionLineChart::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  if (_internal_has_highlightx()) {
    if (!highlightx_->IsInitialized()) return false;
  }
  return true;
}

void ProfilerSectionLineChart::InternalSwap(ProfilerSectionLineChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionLineChart, highlightx_)
      + sizeof(ProfilerSectionLineChart::highlightx_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionLineChart, axisx_)>(
          reinterpret_cast<char*>(&axisx_),
          reinterpret_cast<char*>(&other->axisx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionLineChart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMemorySharedTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMemorySharedTable>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showloads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showstores(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_showatomics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_showtotals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ProfilerSectionMemorySharedTable::ProfilerSectionMemorySharedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMemorySharedTable)
}
ProfilerSectionMemorySharedTable::ProfilerSectionMemorySharedTable(const ProfilerSectionMemorySharedTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&showloads_, &from.showloads_,
    static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
    reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMemorySharedTable)
}

void ProfilerSectionMemorySharedTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&showloads_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
}

ProfilerSectionMemorySharedTable::~ProfilerSectionMemorySharedTable() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMemorySharedTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMemorySharedTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionMemorySharedTable::ArenaDtor(void* object) {
  ProfilerSectionMemorySharedTable* _this = reinterpret_cast< ProfilerSectionMemorySharedTable* >(object);
  (void)_this;
}
void ProfilerSectionMemorySharedTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMemorySharedTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMemorySharedTable& ProfilerSectionMemorySharedTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMemorySharedTable_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMemorySharedTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMemorySharedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  ::memset(&showloads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMemorySharedTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMemorySharedTable.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLoads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_showloads(&has_bits);
          showloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowStores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_showstores(&has_bits);
          showstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowAtomics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showatomics(&has_bits);
          showatomics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_showtotals(&has_bits);
          showtotals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMemorySharedTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMemorySharedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMemorySharedTable.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional bool ShowLoads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_showloads(), target);
  }

  // optional bool ShowStores = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_showstores(), target);
  }

  // optional bool ShowAtomics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showatomics(), target);
  }

  // optional bool ShowTotals = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_showtotals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMemorySharedTable)
  return target;
}

size_t ProfilerSectionMemorySharedTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMemorySharedTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool ShowLoads = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ShowStores = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ShowAtomics = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotals = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMemorySharedTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMemorySharedTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMemorySharedTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMemorySharedTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMemorySharedTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMemorySharedTable)
    MergeFrom(*source);
  }
}

void ProfilerSectionMemorySharedTable::MergeFrom(const ProfilerSectionMemorySharedTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMemorySharedTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      showloads_ = from.showloads_;
    }
    if (cached_has_bits & 0x00000004u) {
      showstores_ = from.showstores_;
    }
    if (cached_has_bits & 0x00000008u) {
      showatomics_ = from.showatomics_;
    }
    if (cached_has_bits & 0x00000010u) {
      showtotals_ = from.showtotals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionMemorySharedTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMemorySharedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMemorySharedTable::CopyFrom(const ProfilerSectionMemorySharedTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMemorySharedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMemorySharedTable::IsInitialized() const {
  return true;
}

void ProfilerSectionMemorySharedTable::InternalSwap(ProfilerSectionMemorySharedTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionMemorySharedTable, showtotals_)
      + sizeof(ProfilerSectionMemorySharedTable::showtotals_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionMemorySharedTable, showloads_)>(
          reinterpret_cast<char*>(&showloads_),
          reinterpret_cast<char*>(&other->showloads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMemorySharedTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMemoryFirstLevelCacheTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMemoryFirstLevelCacheTable>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showloads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showstores(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_showatomics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_showreductions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_showglobal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_showlocal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_showsurface(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_showtexture(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_showtotalloads(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_showtotalstores(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_showtotals(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

ProfilerSectionMemoryFirstLevelCacheTable::ProfilerSectionMemoryFirstLevelCacheTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMemoryFirstLevelCacheTable)
}
ProfilerSectionMemoryFirstLevelCacheTable::ProfilerSectionMemoryFirstLevelCacheTable(const ProfilerSectionMemoryFirstLevelCacheTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&showloads_, &from.showloads_,
    static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
    reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMemoryFirstLevelCacheTable)
}

void ProfilerSectionMemoryFirstLevelCacheTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&showloads_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
}

ProfilerSectionMemoryFirstLevelCacheTable::~ProfilerSectionMemoryFirstLevelCacheTable() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMemoryFirstLevelCacheTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMemoryFirstLevelCacheTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionMemoryFirstLevelCacheTable::ArenaDtor(void* object) {
  ProfilerSectionMemoryFirstLevelCacheTable* _this = reinterpret_cast< ProfilerSectionMemoryFirstLevelCacheTable* >(object);
  (void)_this;
}
void ProfilerSectionMemoryFirstLevelCacheTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMemoryFirstLevelCacheTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMemoryFirstLevelCacheTable& ProfilerSectionMemoryFirstLevelCacheTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMemoryFirstLevelCacheTable_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMemoryFirstLevelCacheTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMemoryFirstLevelCacheTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&showloads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showsurface_) -
        reinterpret_cast<char*>(&showloads_)) + sizeof(showsurface_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&showtexture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showtotals_) -
        reinterpret_cast<char*>(&showtexture_)) + sizeof(showtotals_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMemoryFirstLevelCacheTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMemoryFirstLevelCacheTable.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLoads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_showloads(&has_bits);
          showloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowStores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_showstores(&has_bits);
          showstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowAtomics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showatomics(&has_bits);
          showatomics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowReductions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_showreductions(&has_bits);
          showreductions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowGlobal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_showglobal(&has_bits);
          showglobal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLocal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_showlocal(&has_bits);
          showlocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowSurface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_showsurface(&has_bits);
          showsurface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTexture = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_showtexture(&has_bits);
          showtexture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotalLoads = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_showtotalloads(&has_bits);
          showtotalloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotalStores = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_showtotalstores(&has_bits);
          showtotalstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotals = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_showtotals(&has_bits);
          showtotals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMemoryFirstLevelCacheTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMemoryFirstLevelCacheTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMemoryFirstLevelCacheTable.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional bool ShowLoads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_showloads(), target);
  }

  // optional bool ShowStores = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_showstores(), target);
  }

  // optional bool ShowAtomics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showatomics(), target);
  }

  // optional bool ShowReductions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_showreductions(), target);
  }

  // optional bool ShowGlobal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_showglobal(), target);
  }

  // optional bool ShowLocal = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_showlocal(), target);
  }

  // optional bool ShowSurface = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_showsurface(), target);
  }

  // optional bool ShowTexture = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_showtexture(), target);
  }

  // optional bool ShowTotalLoads = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_showtotalloads(), target);
  }

  // optional bool ShowTotalStores = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_showtotalstores(), target);
  }

  // optional bool ShowTotals = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_showtotals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMemoryFirstLevelCacheTable)
  return target;
}

size_t ProfilerSectionMemoryFirstLevelCacheTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMemoryFirstLevelCacheTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool ShowLoads = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ShowStores = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ShowAtomics = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ShowReductions = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ShowGlobal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ShowLocal = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ShowSurface = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool ShowTexture = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotalLoads = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotalStores = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotals = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMemoryFirstLevelCacheTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMemoryFirstLevelCacheTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMemoryFirstLevelCacheTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMemoryFirstLevelCacheTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMemoryFirstLevelCacheTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMemoryFirstLevelCacheTable)
    MergeFrom(*source);
  }
}

void ProfilerSectionMemoryFirstLevelCacheTable::MergeFrom(const ProfilerSectionMemoryFirstLevelCacheTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMemoryFirstLevelCacheTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      showloads_ = from.showloads_;
    }
    if (cached_has_bits & 0x00000004u) {
      showstores_ = from.showstores_;
    }
    if (cached_has_bits & 0x00000008u) {
      showatomics_ = from.showatomics_;
    }
    if (cached_has_bits & 0x00000010u) {
      showreductions_ = from.showreductions_;
    }
    if (cached_has_bits & 0x00000020u) {
      showglobal_ = from.showglobal_;
    }
    if (cached_has_bits & 0x00000040u) {
      showlocal_ = from.showlocal_;
    }
    if (cached_has_bits & 0x00000080u) {
      showsurface_ = from.showsurface_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      showtexture_ = from.showtexture_;
    }
    if (cached_has_bits & 0x00000200u) {
      showtotalloads_ = from.showtotalloads_;
    }
    if (cached_has_bits & 0x00000400u) {
      showtotalstores_ = from.showtotalstores_;
    }
    if (cached_has_bits & 0x00000800u) {
      showtotals_ = from.showtotals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionMemoryFirstLevelCacheTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMemoryFirstLevelCacheTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMemoryFirstLevelCacheTable::CopyFrom(const ProfilerSectionMemoryFirstLevelCacheTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMemoryFirstLevelCacheTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMemoryFirstLevelCacheTable::IsInitialized() const {
  return true;
}

void ProfilerSectionMemoryFirstLevelCacheTable::InternalSwap(ProfilerSectionMemoryFirstLevelCacheTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionMemoryFirstLevelCacheTable, showtotals_)
      + sizeof(ProfilerSectionMemoryFirstLevelCacheTable::showtotals_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionMemoryFirstLevelCacheTable, showloads_)>(
          reinterpret_cast<char*>(&showloads_),
          reinterpret_cast<char*>(&other->showloads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMemoryFirstLevelCacheTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMemorySecondLevelCacheTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMemorySecondLevelCacheTable>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showloads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showstores(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_showatomics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_showreductions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_showglobal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_showlocal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_showsurface(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_showtexture(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_showtotalloads(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_showtotalstores(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_showtotals(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

ProfilerSectionMemorySecondLevelCacheTable::ProfilerSectionMemorySecondLevelCacheTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMemorySecondLevelCacheTable)
}
ProfilerSectionMemorySecondLevelCacheTable::ProfilerSectionMemorySecondLevelCacheTable(const ProfilerSectionMemorySecondLevelCacheTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&showloads_, &from.showloads_,
    static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
    reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMemorySecondLevelCacheTable)
}

void ProfilerSectionMemorySecondLevelCacheTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&showloads_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
}

ProfilerSectionMemorySecondLevelCacheTable::~ProfilerSectionMemorySecondLevelCacheTable() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMemorySecondLevelCacheTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMemorySecondLevelCacheTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionMemorySecondLevelCacheTable::ArenaDtor(void* object) {
  ProfilerSectionMemorySecondLevelCacheTable* _this = reinterpret_cast< ProfilerSectionMemorySecondLevelCacheTable* >(object);
  (void)_this;
}
void ProfilerSectionMemorySecondLevelCacheTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMemorySecondLevelCacheTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMemorySecondLevelCacheTable& ProfilerSectionMemorySecondLevelCacheTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMemorySecondLevelCacheTable_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMemorySecondLevelCacheTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMemorySecondLevelCacheTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&showloads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showsurface_) -
        reinterpret_cast<char*>(&showloads_)) + sizeof(showsurface_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&showtexture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showtotals_) -
        reinterpret_cast<char*>(&showtexture_)) + sizeof(showtotals_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMemorySecondLevelCacheTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMemorySecondLevelCacheTable.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLoads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_showloads(&has_bits);
          showloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowStores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_showstores(&has_bits);
          showstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowAtomics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showatomics(&has_bits);
          showatomics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowReductions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_showreductions(&has_bits);
          showreductions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowGlobal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_showglobal(&has_bits);
          showglobal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLocal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_showlocal(&has_bits);
          showlocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowSurface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_showsurface(&has_bits);
          showsurface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTexture = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_showtexture(&has_bits);
          showtexture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotalLoads = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_showtotalloads(&has_bits);
          showtotalloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotalStores = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_showtotalstores(&has_bits);
          showtotalstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotals = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_showtotals(&has_bits);
          showtotals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMemorySecondLevelCacheTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMemorySecondLevelCacheTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMemorySecondLevelCacheTable.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional bool ShowLoads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_showloads(), target);
  }

  // optional bool ShowStores = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_showstores(), target);
  }

  // optional bool ShowAtomics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showatomics(), target);
  }

  // optional bool ShowReductions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_showreductions(), target);
  }

  // optional bool ShowGlobal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_showglobal(), target);
  }

  // optional bool ShowLocal = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_showlocal(), target);
  }

  // optional bool ShowSurface = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_showsurface(), target);
  }

  // optional bool ShowTexture = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_showtexture(), target);
  }

  // optional bool ShowTotalLoads = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_showtotalloads(), target);
  }

  // optional bool ShowTotalStores = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_showtotalstores(), target);
  }

  // optional bool ShowTotals = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_showtotals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMemorySecondLevelCacheTable)
  return target;
}

size_t ProfilerSectionMemorySecondLevelCacheTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMemorySecondLevelCacheTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool ShowLoads = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ShowStores = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ShowAtomics = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ShowReductions = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ShowGlobal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ShowLocal = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ShowSurface = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool ShowTexture = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotalLoads = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotalStores = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotals = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMemorySecondLevelCacheTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMemorySecondLevelCacheTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMemorySecondLevelCacheTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMemorySecondLevelCacheTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMemorySecondLevelCacheTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMemorySecondLevelCacheTable)
    MergeFrom(*source);
  }
}

void ProfilerSectionMemorySecondLevelCacheTable::MergeFrom(const ProfilerSectionMemorySecondLevelCacheTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMemorySecondLevelCacheTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      showloads_ = from.showloads_;
    }
    if (cached_has_bits & 0x00000004u) {
      showstores_ = from.showstores_;
    }
    if (cached_has_bits & 0x00000008u) {
      showatomics_ = from.showatomics_;
    }
    if (cached_has_bits & 0x00000010u) {
      showreductions_ = from.showreductions_;
    }
    if (cached_has_bits & 0x00000020u) {
      showglobal_ = from.showglobal_;
    }
    if (cached_has_bits & 0x00000040u) {
      showlocal_ = from.showlocal_;
    }
    if (cached_has_bits & 0x00000080u) {
      showsurface_ = from.showsurface_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      showtexture_ = from.showtexture_;
    }
    if (cached_has_bits & 0x00000200u) {
      showtotalloads_ = from.showtotalloads_;
    }
    if (cached_has_bits & 0x00000400u) {
      showtotalstores_ = from.showtotalstores_;
    }
    if (cached_has_bits & 0x00000800u) {
      showtotals_ = from.showtotals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionMemorySecondLevelCacheTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMemorySecondLevelCacheTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMemorySecondLevelCacheTable::CopyFrom(const ProfilerSectionMemorySecondLevelCacheTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMemorySecondLevelCacheTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMemorySecondLevelCacheTable::IsInitialized() const {
  return true;
}

void ProfilerSectionMemorySecondLevelCacheTable::InternalSwap(ProfilerSectionMemorySecondLevelCacheTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionMemorySecondLevelCacheTable, showtotals_)
      + sizeof(ProfilerSectionMemorySecondLevelCacheTable::showtotals_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionMemorySecondLevelCacheTable, showloads_)>(
          reinterpret_cast<char*>(&showloads_),
          reinterpret_cast<char*>(&other->showloads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMemorySecondLevelCacheTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMemoryDeviceMemoryTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMemoryDeviceMemoryTable>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showloads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showstores(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_showtotals(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ProfilerSectionMemoryDeviceMemoryTable::ProfilerSectionMemoryDeviceMemoryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMemoryDeviceMemoryTable)
}
ProfilerSectionMemoryDeviceMemoryTable::ProfilerSectionMemoryDeviceMemoryTable(const ProfilerSectionMemoryDeviceMemoryTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  ::memcpy(&showloads_, &from.showloads_,
    static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
    reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMemoryDeviceMemoryTable)
}

void ProfilerSectionMemoryDeviceMemoryTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&showloads_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
}

ProfilerSectionMemoryDeviceMemoryTable::~ProfilerSectionMemoryDeviceMemoryTable() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMemoryDeviceMemoryTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMemoryDeviceMemoryTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionMemoryDeviceMemoryTable::ArenaDtor(void* object) {
  ProfilerSectionMemoryDeviceMemoryTable* _this = reinterpret_cast< ProfilerSectionMemoryDeviceMemoryTable* >(object);
  (void)_this;
}
void ProfilerSectionMemoryDeviceMemoryTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMemoryDeviceMemoryTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMemoryDeviceMemoryTable& ProfilerSectionMemoryDeviceMemoryTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMemoryDeviceMemoryTable_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMemoryDeviceMemoryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMemoryDeviceMemoryTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  ::memset(&showloads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showtotals_) -
      reinterpret_cast<char*>(&showloads_)) + sizeof(showtotals_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMemoryDeviceMemoryTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMemoryDeviceMemoryTable.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowLoads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_showloads(&has_bits);
          showloads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowStores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_showstores(&has_bits);
          showstores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ShowTotals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showtotals(&has_bits);
          showtotals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMemoryDeviceMemoryTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMemoryDeviceMemoryTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMemoryDeviceMemoryTable.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional bool ShowLoads = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_showloads(), target);
  }

  // optional bool ShowStores = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_showstores(), target);
  }

  // optional bool ShowTotals = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showtotals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMemoryDeviceMemoryTable)
  return target;
}

size_t ProfilerSectionMemoryDeviceMemoryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMemoryDeviceMemoryTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool ShowLoads = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ShowStores = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ShowTotals = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMemoryDeviceMemoryTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMemoryDeviceMemoryTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMemoryDeviceMemoryTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMemoryDeviceMemoryTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMemoryDeviceMemoryTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMemoryDeviceMemoryTable)
    MergeFrom(*source);
  }
}

void ProfilerSectionMemoryDeviceMemoryTable::MergeFrom(const ProfilerSectionMemoryDeviceMemoryTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMemoryDeviceMemoryTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      showloads_ = from.showloads_;
    }
    if (cached_has_bits & 0x00000004u) {
      showstores_ = from.showstores_;
    }
    if (cached_has_bits & 0x00000008u) {
      showtotals_ = from.showtotals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSectionMemoryDeviceMemoryTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMemoryDeviceMemoryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMemoryDeviceMemoryTable::CopyFrom(const ProfilerSectionMemoryDeviceMemoryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMemoryDeviceMemoryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMemoryDeviceMemoryTable::IsInitialized() const {
  return true;
}

void ProfilerSectionMemoryDeviceMemoryTable::InternalSwap(ProfilerSectionMemoryDeviceMemoryTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionMemoryDeviceMemoryTable, showtotals_)
      + sizeof(ProfilerSectionMemoryDeviceMemoryTable::showtotals_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionMemoryDeviceMemoryTable, showloads_)>(
          reinterpret_cast<char*>(&showloads_),
          reinterpret_cast<char*>(&other->showloads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMemoryDeviceMemoryTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMemoryChart::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMemoryChart>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilerSectionMemoryChart::ProfilerSectionMemoryChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMemoryChart)
}
ProfilerSectionMemoryChart::ProfilerSectionMemoryChart(const ProfilerSectionMemoryChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMemoryChart)
}

void ProfilerSectionMemoryChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfilerSectionMemoryChart::~ProfilerSectionMemoryChart() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMemoryChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMemoryChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionMemoryChart::ArenaDtor(void* object) {
  ProfilerSectionMemoryChart* _this = reinterpret_cast< ProfilerSectionMemoryChart* >(object);
  (void)_this;
}
void ProfilerSectionMemoryChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMemoryChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMemoryChart& ProfilerSectionMemoryChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMemoryChart_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMemoryChart::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMemoryChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMemoryChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionMemoryChart.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMemoryChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMemoryChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionMemoryChart.Label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMemoryChart)
  return target;
}

size_t ProfilerSectionMemoryChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMemoryChart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string Label = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMemoryChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMemoryChart)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMemoryChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMemoryChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMemoryChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMemoryChart)
    MergeFrom(*source);
  }
}

void ProfilerSectionMemoryChart::MergeFrom(const ProfilerSectionMemoryChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMemoryChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_label()) {
    _internal_set_label(from._internal_label());
  }
}

void ProfilerSectionMemoryChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMemoryChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMemoryChart::CopyFrom(const ProfilerSectionMemoryChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMemoryChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMemoryChart::IsInitialized() const {
  return true;
}

void ProfilerSectionMemoryChart::InternalSwap(ProfilerSectionMemoryChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMemoryChart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionGfxMetricsWidget::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionGfxMetricsWidget>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProfilerSectionGfxMetricsWidget::ProfilerSectionGfxMetricsWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionGfxMetricsWidget)
}
ProfilerSectionGfxMetricsWidget::ProfilerSectionGfxMetricsWidget(const ProfilerSectionGfxMetricsWidget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionGfxMetricsWidget)
}

void ProfilerSectionGfxMetricsWidget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfilerSectionGfxMetricsWidget::~ProfilerSectionGfxMetricsWidget() {
  // @@protoc_insertion_point(destructor:ProfilerSectionGfxMetricsWidget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionGfxMetricsWidget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionGfxMetricsWidget::ArenaDtor(void* object) {
  ProfilerSectionGfxMetricsWidget* _this = reinterpret_cast< ProfilerSectionGfxMetricsWidget* >(object);
  (void)_this;
}
void ProfilerSectionGfxMetricsWidget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionGfxMetricsWidget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionGfxMetricsWidget& ProfilerSectionGfxMetricsWidget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionGfxMetricsWidget_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionGfxMetricsWidget::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionGfxMetricsWidget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionGfxMetricsWidget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionGfxMetricsWidget.Type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionGfxMetricsWidget.Label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetric Metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionGfxMetricsWidget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionGfxMetricsWidget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionGfxMetricsWidget.Type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string Label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionGfxMetricsWidget.Label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // repeated .ProfilerSectionMetric Metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionGfxMetricsWidget)
  return target;
}

size_t ProfilerSectionGfxMetricsWidget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionGfxMetricsWidget)
  size_t total_size = 0;

  // required string Type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 3;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string Label = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionGfxMetricsWidget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionGfxMetricsWidget)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionGfxMetricsWidget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionGfxMetricsWidget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionGfxMetricsWidget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionGfxMetricsWidget)
    MergeFrom(*source);
  }
}

void ProfilerSectionGfxMetricsWidget::MergeFrom(const ProfilerSectionGfxMetricsWidget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionGfxMetricsWidget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
  }
}

void ProfilerSectionGfxMetricsWidget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionGfxMetricsWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionGfxMetricsWidget::CopyFrom(const ProfilerSectionGfxMetricsWidget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionGfxMetricsWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionGfxMetricsWidget::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionGfxMetricsWidget::InternalSwap(ProfilerSectionGfxMetricsWidget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionGfxMetricsWidget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionHeader>()._has_bits_);
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilerSectionHeader::ProfilerSectionHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionHeader)
}
ProfilerSectionHeader::ProfilerSectionHeader(const ProfilerSectionHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rows_ = from.rows_;
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionHeader)
}

void ProfilerSectionHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionHeader_ProfilerSection_2eproto.base);
  rows_ = 0u;
}

ProfilerSectionHeader::~ProfilerSectionHeader() {
  // @@protoc_insertion_point(destructor:ProfilerSectionHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSectionHeader::ArenaDtor(void* object) {
  ProfilerSectionHeader* _this = reinterpret_cast< ProfilerSectionHeader* >(object);
  (void)_this;
}
void ProfilerSectionHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionHeader& ProfilerSectionHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionHeader_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  rows_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 Rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rows(&has_bits);
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionMetric Metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 Rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rows(), target);
  }

  // repeated .ProfilerSectionMetric Metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionHeader)
  return target;
}

size_t ProfilerSectionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 Rows = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionHeader)
    MergeFrom(*source);
  }
}

void ProfilerSectionHeader::MergeFrom(const ProfilerSectionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from._internal_has_rows()) {
    _internal_set_rows(from._internal_rows());
  }
}

void ProfilerSectionHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionHeader::CopyFrom(const ProfilerSectionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionHeader::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionHeader::InternalSwap(ProfilerSectionHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  swap(rows_, other->rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionBodyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionBodyItem>()._has_bits_);
  static const ::ProfilerSectionTable& table(const ProfilerSectionBodyItem* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerSectionBarChart& barchart(const ProfilerSectionBodyItem* msg);
  static void set_has_barchart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerSectionHistogramChart& histogramchart(const ProfilerSectionBodyItem* msg);
  static void set_has_histogramchart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfilerSectionLineChart& linechart(const ProfilerSectionBodyItem* msg);
  static void set_has_linechart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ProfilerSectionMemorySharedTable& memorysharedtable(const ProfilerSectionBodyItem* msg);
  static void set_has_memorysharedtable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ProfilerSectionMemoryFirstLevelCacheTable& memoryfirstlevelcachetable(const ProfilerSectionBodyItem* msg);
  static void set_has_memoryfirstlevelcachetable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ProfilerSectionMemorySecondLevelCacheTable& memorysecondlevelcachetable(const ProfilerSectionBodyItem* msg);
  static void set_has_memorysecondlevelcachetable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ProfilerSectionMemoryDeviceMemoryTable& memorydevicememorytable(const ProfilerSectionBodyItem* msg);
  static void set_has_memorydevicememorytable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ProfilerSectionMemoryChart& memorychart(const ProfilerSectionBodyItem* msg);
  static void set_has_memorychart(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ProfilerSectionGfxMetricsWidget& gfxmetricswidget(const ProfilerSectionBodyItem* msg);
  static void set_has_gfxmetricswidget(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::MetricOptionFilter& filter(const ProfilerSectionBodyItem* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::ProfilerSectionTable&
ProfilerSectionBodyItem::_Internal::table(const ProfilerSectionBodyItem* msg) {
  return *msg->table_;
}
const ::ProfilerSectionBarChart&
ProfilerSectionBodyItem::_Internal::barchart(const ProfilerSectionBodyItem* msg) {
  return *msg->barchart_;
}
const ::ProfilerSectionHistogramChart&
ProfilerSectionBodyItem::_Internal::histogramchart(const ProfilerSectionBodyItem* msg) {
  return *msg->histogramchart_;
}
const ::ProfilerSectionLineChart&
ProfilerSectionBodyItem::_Internal::linechart(const ProfilerSectionBodyItem* msg) {
  return *msg->linechart_;
}
const ::ProfilerSectionMemorySharedTable&
ProfilerSectionBodyItem::_Internal::memorysharedtable(const ProfilerSectionBodyItem* msg) {
  return *msg->memorysharedtable_;
}
const ::ProfilerSectionMemoryFirstLevelCacheTable&
ProfilerSectionBodyItem::_Internal::memoryfirstlevelcachetable(const ProfilerSectionBodyItem* msg) {
  return *msg->memoryfirstlevelcachetable_;
}
const ::ProfilerSectionMemorySecondLevelCacheTable&
ProfilerSectionBodyItem::_Internal::memorysecondlevelcachetable(const ProfilerSectionBodyItem* msg) {
  return *msg->memorysecondlevelcachetable_;
}
const ::ProfilerSectionMemoryDeviceMemoryTable&
ProfilerSectionBodyItem::_Internal::memorydevicememorytable(const ProfilerSectionBodyItem* msg) {
  return *msg->memorydevicememorytable_;
}
const ::ProfilerSectionMemoryChart&
ProfilerSectionBodyItem::_Internal::memorychart(const ProfilerSectionBodyItem* msg) {
  return *msg->memorychart_;
}
const ::ProfilerSectionGfxMetricsWidget&
ProfilerSectionBodyItem::_Internal::gfxmetricswidget(const ProfilerSectionBodyItem* msg) {
  return *msg->gfxmetricswidget_;
}
const ::MetricOptionFilter&
ProfilerSectionBodyItem::_Internal::filter(const ProfilerSectionBodyItem* msg) {
  return *msg->filter_;
}
void ProfilerSectionBodyItem::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
ProfilerSectionBodyItem::ProfilerSectionBodyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionBodyItem)
}
ProfilerSectionBodyItem::ProfilerSectionBodyItem(const ProfilerSectionBodyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table()) {
    table_ = new ::ProfilerSectionTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  if (from._internal_has_barchart()) {
    barchart_ = new ::ProfilerSectionBarChart(*from.barchart_);
  } else {
    barchart_ = nullptr;
  }
  if (from._internal_has_histogramchart()) {
    histogramchart_ = new ::ProfilerSectionHistogramChart(*from.histogramchart_);
  } else {
    histogramchart_ = nullptr;
  }
  if (from._internal_has_linechart()) {
    linechart_ = new ::ProfilerSectionLineChart(*from.linechart_);
  } else {
    linechart_ = nullptr;
  }
  if (from._internal_has_memorysharedtable()) {
    memorysharedtable_ = new ::ProfilerSectionMemorySharedTable(*from.memorysharedtable_);
  } else {
    memorysharedtable_ = nullptr;
  }
  if (from._internal_has_memoryfirstlevelcachetable()) {
    memoryfirstlevelcachetable_ = new ::ProfilerSectionMemoryFirstLevelCacheTable(*from.memoryfirstlevelcachetable_);
  } else {
    memoryfirstlevelcachetable_ = nullptr;
  }
  if (from._internal_has_memorysecondlevelcachetable()) {
    memorysecondlevelcachetable_ = new ::ProfilerSectionMemorySecondLevelCacheTable(*from.memorysecondlevelcachetable_);
  } else {
    memorysecondlevelcachetable_ = nullptr;
  }
  if (from._internal_has_memorydevicememorytable()) {
    memorydevicememorytable_ = new ::ProfilerSectionMemoryDeviceMemoryTable(*from.memorydevicememorytable_);
  } else {
    memorydevicememorytable_ = nullptr;
  }
  if (from._internal_has_memorychart()) {
    memorychart_ = new ::ProfilerSectionMemoryChart(*from.memorychart_);
  } else {
    memorychart_ = nullptr;
  }
  if (from._internal_has_gfxmetricswidget()) {
    gfxmetricswidget_ = new ::ProfilerSectionGfxMetricsWidget(*from.gfxmetricswidget_);
  } else {
    gfxmetricswidget_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::MetricOptionFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionBodyItem)
}

void ProfilerSectionBodyItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&table_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&table_)) + sizeof(filter_));
}

ProfilerSectionBodyItem::~ProfilerSectionBodyItem() {
  // @@protoc_insertion_point(destructor:ProfilerSectionBodyItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionBodyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete barchart_;
  if (this != internal_default_instance()) delete histogramchart_;
  if (this != internal_default_instance()) delete linechart_;
  if (this != internal_default_instance()) delete memorysharedtable_;
  if (this != internal_default_instance()) delete memoryfirstlevelcachetable_;
  if (this != internal_default_instance()) delete memorysecondlevelcachetable_;
  if (this != internal_default_instance()) delete memorydevicememorytable_;
  if (this != internal_default_instance()) delete memorychart_;
  if (this != internal_default_instance()) delete gfxmetricswidget_;
  if (this != internal_default_instance()) delete filter_;
}

void ProfilerSectionBodyItem::ArenaDtor(void* object) {
  ProfilerSectionBodyItem* _this = reinterpret_cast< ProfilerSectionBodyItem* >(object);
  (void)_this;
}
void ProfilerSectionBodyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionBodyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionBodyItem& ProfilerSectionBodyItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionBodyItem_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionBodyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionBodyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_ != nullptr);
      table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(barchart_ != nullptr);
      barchart_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(histogramchart_ != nullptr);
      histogramchart_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linechart_ != nullptr);
      linechart_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(memorysharedtable_ != nullptr);
      memorysharedtable_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(memoryfirstlevelcachetable_ != nullptr);
      memoryfirstlevelcachetable_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(memorysecondlevelcachetable_ != nullptr);
      memorysecondlevelcachetable_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(memorydevicememorytable_ != nullptr);
      memorydevicememorytable_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(memorychart_ != nullptr);
      memorychart_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(gfxmetricswidget_ != nullptr);
      gfxmetricswidget_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionBodyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProfilerSectionTable Table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionBarChart BarChart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_barchart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionHistogramChart HistogramChart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogramchart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionLineChart LineChart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linechart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMemorySharedTable MemorySharedTable = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_memorysharedtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMemoryFirstLevelCacheTable MemoryFirstLevelCacheTable = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_memoryfirstlevelcachetable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMemorySecondLevelCacheTable MemorySecondLevelCacheTable = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_memorysecondlevelcachetable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMemoryDeviceMemoryTable MemoryDeviceMemoryTable = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_memorydevicememorytable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMemoryChart MemoryChart = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memorychart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionGfxMetricsWidget GfxMetricsWidget = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_gfxmetricswidget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MetricOptionFilter Filter = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionBodyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionBodyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfilerSectionTable Table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table(this), target, stream);
  }

  // optional .ProfilerSectionBarChart BarChart = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::barchart(this), target, stream);
  }

  // optional .ProfilerSectionHistogramChart HistogramChart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::histogramchart(this), target, stream);
  }

  // optional .ProfilerSectionLineChart LineChart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linechart(this), target, stream);
  }

  // optional .ProfilerSectionMemorySharedTable MemorySharedTable = 101;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::memorysharedtable(this), target, stream);
  }

  // optional .ProfilerSectionMemoryFirstLevelCacheTable MemoryFirstLevelCacheTable = 102;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::memoryfirstlevelcachetable(this), target, stream);
  }

  // optional .ProfilerSectionMemorySecondLevelCacheTable MemorySecondLevelCacheTable = 103;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::memorysecondlevelcachetable(this), target, stream);
  }

  // optional .ProfilerSectionMemoryDeviceMemoryTable MemoryDeviceMemoryTable = 104;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::memorydevicememorytable(this), target, stream);
  }

  // optional .ProfilerSectionMemoryChart MemoryChart = 105;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::memorychart(this), target, stream);
  }

  // optional .ProfilerSectionGfxMetricsWidget GfxMetricsWidget = 150;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        150, _Internal::gfxmetricswidget(this), target, stream);
  }

  // optional .MetricOptionFilter Filter = 200;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionBodyItem)
  return target;
}

size_t ProfilerSectionBodyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionBodyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ProfilerSectionTable Table = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_);
    }

    // optional .ProfilerSectionBarChart BarChart = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *barchart_);
    }

    // optional .ProfilerSectionHistogramChart HistogramChart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *histogramchart_);
    }

    // optional .ProfilerSectionLineChart LineChart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linechart_);
    }

    // optional .ProfilerSectionMemorySharedTable MemorySharedTable = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memorysharedtable_);
    }

    // optional .ProfilerSectionMemoryFirstLevelCacheTable MemoryFirstLevelCacheTable = 102;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memoryfirstlevelcachetable_);
    }

    // optional .ProfilerSectionMemorySecondLevelCacheTable MemorySecondLevelCacheTable = 103;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memorysecondlevelcachetable_);
    }

    // optional .ProfilerSectionMemoryDeviceMemoryTable MemoryDeviceMemoryTable = 104;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memorydevicememorytable_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .ProfilerSectionMemoryChart MemoryChart = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memorychart_);
    }

    // optional .ProfilerSectionGfxMetricsWidget GfxMetricsWidget = 150;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gfxmetricswidget_);
    }

    // optional .MetricOptionFilter Filter = 200;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionBodyItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionBodyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionBodyItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionBodyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionBodyItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionBodyItem)
    MergeFrom(*source);
  }
}

void ProfilerSectionBodyItem::MergeFrom(const ProfilerSectionBodyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionBodyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table()->::ProfilerSectionTable::MergeFrom(from._internal_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_barchart()->::ProfilerSectionBarChart::MergeFrom(from._internal_barchart());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_histogramchart()->::ProfilerSectionHistogramChart::MergeFrom(from._internal_histogramchart());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linechart()->::ProfilerSectionLineChart::MergeFrom(from._internal_linechart());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_memorysharedtable()->::ProfilerSectionMemorySharedTable::MergeFrom(from._internal_memorysharedtable());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_memoryfirstlevelcachetable()->::ProfilerSectionMemoryFirstLevelCacheTable::MergeFrom(from._internal_memoryfirstlevelcachetable());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_memorysecondlevelcachetable()->::ProfilerSectionMemorySecondLevelCacheTable::MergeFrom(from._internal_memorysecondlevelcachetable());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_memorydevicememorytable()->::ProfilerSectionMemoryDeviceMemoryTable::MergeFrom(from._internal_memorydevicememorytable());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_memorychart()->::ProfilerSectionMemoryChart::MergeFrom(from._internal_memorychart());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_gfxmetricswidget()->::ProfilerSectionGfxMetricsWidget::MergeFrom(from._internal_gfxmetricswidget());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_filter()->::MetricOptionFilter::MergeFrom(from._internal_filter());
    }
  }
}

void ProfilerSectionBodyItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionBodyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionBodyItem::CopyFrom(const ProfilerSectionBodyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionBodyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionBodyItem::IsInitialized() const {
  if (_internal_has_table()) {
    if (!table_->IsInitialized()) return false;
  }
  if (_internal_has_barchart()) {
    if (!barchart_->IsInitialized()) return false;
  }
  if (_internal_has_histogramchart()) {
    if (!histogramchart_->IsInitialized()) return false;
  }
  if (_internal_has_linechart()) {
    if (!linechart_->IsInitialized()) return false;
  }
  if (_internal_has_gfxmetricswidget()) {
    if (!gfxmetricswidget_->IsInitialized()) return false;
  }
  return true;
}

void ProfilerSectionBodyItem::InternalSwap(ProfilerSectionBodyItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSectionBodyItem, filter_)
      + sizeof(ProfilerSectionBodyItem::filter_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSectionBodyItem, table_)>(
          reinterpret_cast<char*>(&table_),
          reinterpret_cast<char*>(&other->table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionBodyItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionBody::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionBody>()._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilerSectionBody::ProfilerSectionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionBody)
}
ProfilerSectionBody::ProfilerSectionBody(const ProfilerSectionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displayname()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionBody)
}

void ProfilerSectionBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionBody_ProfilerSection_2eproto.base);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfilerSectionBody::~ProfilerSectionBody() {
  // @@protoc_insertion_point(destructor:ProfilerSectionBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerSectionBody::ArenaDtor(void* object) {
  ProfilerSectionBody* _this = reinterpret_cast< ProfilerSectionBody* >(object);
  (void)_this;
}
void ProfilerSectionBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionBody& ProfilerSectionBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionBody_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    displayname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProfilerSectionBodyItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string DisplayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSectionBody.DisplayName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfilerSectionBodyItem Items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string DisplayName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSectionBody.DisplayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionBody)
  return target;
}

size_t ProfilerSectionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionBodyItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string DisplayName = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionBody)
    MergeFrom(*source);
  }
}

void ProfilerSectionBody::MergeFrom(const ProfilerSectionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_displayname()) {
    _internal_set_displayname(from._internal_displayname());
  }
}

void ProfilerSectionBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionBody::CopyFrom(const ProfilerSectionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionBody::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  return true;
}

void ProfilerSectionBody::InternalSwap(ProfilerSectionBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSectionMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSectionMetrics>()._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilerSectionMetrics::ProfilerSectionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSectionMetrics)
}
ProfilerSectionMetrics::ProfilerSectionMetrics(const ProfilerSectionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:ProfilerSectionMetrics)
}

void ProfilerSectionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto.base);
  order_ = 0u;
}

ProfilerSectionMetrics::~ProfilerSectionMetrics() {
  // @@protoc_insertion_point(destructor:ProfilerSectionMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSectionMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSectionMetrics::ArenaDtor(void* object) {
  ProfilerSectionMetrics* _this = reinterpret_cast< ProfilerSectionMetrics* >(object);
  (void)_this;
}
void ProfilerSectionMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSectionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSectionMetrics& ProfilerSectionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSectionMetrics_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSectionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  order_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSectionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProfilerSectionMetric Metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 Order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSectionMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrics(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 Order = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSectionMetrics)
  return target;
}

size_t ProfilerSectionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSectionMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionMetric Metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 Order = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSectionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSectionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSectionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSectionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSectionMetrics)
    MergeFrom(*source);
  }
}

void ProfilerSectionMetrics::MergeFrom(const ProfilerSectionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from._internal_has_order()) {
    _internal_set_order(from._internal_order());
  }
}

void ProfilerSectionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSectionMetrics::CopyFrom(const ProfilerSectionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSectionMetrics::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void ProfilerSectionMetrics::InternalSwap(ProfilerSectionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSectionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSection::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSection>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ProfilerSectionHeader& header(const ProfilerSection* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ProfilerSectionMetrics& metrics(const ProfilerSection* msg);
  static void set_has_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extends(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::ProfilerSectionHeader&
ProfilerSection::_Internal::header(const ProfilerSection* msg) {
  return *msg->header_;
}
const ::ProfilerSectionMetrics&
ProfilerSection::_Internal::metrics(const ProfilerSection* msg) {
  return *msg->metrics_;
}
ProfilerSection::ProfilerSection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  body_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSection)
}
ProfilerSection::ProfilerSection(const ProfilerSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      body_(from.body_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displayname()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  extends_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extends()) {
    extends_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extends(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ProfilerSectionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::ProfilerSectionMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:ProfilerSection)
}

void ProfilerSection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSection_ProfilerSection_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extends_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&header_)) + sizeof(order_));
}

ProfilerSection::~ProfilerSection() {
  // @@protoc_insertion_point(destructor:ProfilerSection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extends_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete metrics_;
}

void ProfilerSection::ArenaDtor(void* object) {
  ProfilerSection* _this = reinterpret_cast< ProfilerSection* >(object);
  (void)_this;
}
void ProfilerSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSection& ProfilerSection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSection_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSection::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      extends_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(metrics_ != nullptr);
      metrics_->Clear();
    }
  }
  order_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSection.Identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string DisplayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSection.DisplayName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionHeader Header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSectionBody Body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_body(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionMetrics Metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSection.Description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Extends = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_extends();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSection.Extends");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSection.Identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required string DisplayName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSection.DisplayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  // optional uint32 Order = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_order(), target);
  }

  // optional .ProfilerSectionHeader Header = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::header(this), target, stream);
  }

  // repeated .ProfilerSectionBody Body = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_body_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_body(i), target, stream);
  }

  // optional .ProfilerSectionMetrics Metrics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metrics(this), target, stream);
  }

  // optional string Description = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSection.Description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // optional string Extends = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extends().data(), static_cast<int>(this->_internal_extends().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSection.Extends");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_extends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSection)
  return target;
}

size_t ProfilerSection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProfilerSection)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string Identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_displayname()) {
    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  return total_size;
}
size_t ProfilerSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSectionBody Body = 5;
  total_size += 1UL * this->_internal_body_size();
  for (const auto& msg : this->body_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional string Description = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string Extends = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extends());
    }

    // optional .ProfilerSectionHeader Header = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ProfilerSectionMetrics Metrics = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metrics_);
    }

    // optional uint32 Order = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSection)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSection)
    MergeFrom(*source);
  }
}

void ProfilerSection::MergeFrom(const ProfilerSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_extends(from._internal_extends());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_header()->::ProfilerSectionHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_metrics()->::ProfilerSectionMetrics::MergeFrom(from._internal_metrics());
    }
    if (cached_has_bits & 0x00000040u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSection::CopyFrom(const ProfilerSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(body_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_metrics()) {
    if (!metrics_->IsInitialized()) return false;
  }
  return true;
}

void ProfilerSection::InternalSwap(ProfilerSection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_.InternalSwap(&other->body_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extends_.Swap(&other->extends_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSection, order_)
      + sizeof(ProfilerSection::order_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSection, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSections::_Internal {
 public:
};

ProfilerSections::ProfilerSections(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSections)
}
ProfilerSections::ProfilerSections(const ProfilerSections& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sections_(from.sections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProfilerSections)
}

void ProfilerSections::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSections_ProfilerSection_2eproto.base);
}

ProfilerSections::~ProfilerSections() {
  // @@protoc_insertion_point(destructor:ProfilerSections)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSections::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSections::ArenaDtor(void* object) {
  ProfilerSections* _this = reinterpret_cast< ProfilerSections* >(object);
  (void)_this;
}
void ProfilerSections::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSections::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSections& ProfilerSections::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSections_ProfilerSection_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSections::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSections)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSections::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProfilerSection Sections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSections::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSections)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfilerSection Sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSections)
  return target;
}

size_t ProfilerSections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSections)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfilerSection Sections = 1;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSections::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSections)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSections* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSections>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSections)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSections)
    MergeFrom(*source);
  }
}

void ProfilerSections::MergeFrom(const ProfilerSections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
}

void ProfilerSections::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSections::CopyFrom(const ProfilerSections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSections::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sections_)) return false;
  return true;
}

void ProfilerSections::InternalSwap(ProfilerSections* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sections_.InternalSwap(&other->sections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSections::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProfilerSectionMetricOption* Arena::CreateMaybeMessage< ::ProfilerSectionMetricOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMetricOption >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMetric* Arena::CreateMaybeMessage< ::ProfilerSectionMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionHighlightX* Arena::CreateMaybeMessage< ::ProfilerSectionHighlightX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionHighlightX >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionTable* Arena::CreateMaybeMessage< ::ProfilerSectionTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionTable >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionChartAxisRange* Arena::CreateMaybeMessage< ::ProfilerSectionChartAxisRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionChartAxisRange >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionChartValueAxis* Arena::CreateMaybeMessage< ::ProfilerSectionChartValueAxis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionChartValueAxis >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionChartCategoryAxis* Arena::CreateMaybeMessage< ::ProfilerSectionChartCategoryAxis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionChartCategoryAxis >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionChartHistogramAxis* Arena::CreateMaybeMessage< ::ProfilerSectionChartHistogramAxis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionChartHistogramAxis >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionBarChart* Arena::CreateMaybeMessage< ::ProfilerSectionBarChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionBarChart >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionHistogramChart* Arena::CreateMaybeMessage< ::ProfilerSectionHistogramChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionHistogramChart >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionLineChart* Arena::CreateMaybeMessage< ::ProfilerSectionLineChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionLineChart >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMemorySharedTable* Arena::CreateMaybeMessage< ::ProfilerSectionMemorySharedTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMemorySharedTable >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMemoryFirstLevelCacheTable* Arena::CreateMaybeMessage< ::ProfilerSectionMemoryFirstLevelCacheTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMemoryFirstLevelCacheTable >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMemorySecondLevelCacheTable* Arena::CreateMaybeMessage< ::ProfilerSectionMemorySecondLevelCacheTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMemorySecondLevelCacheTable >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMemoryDeviceMemoryTable* Arena::CreateMaybeMessage< ::ProfilerSectionMemoryDeviceMemoryTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMemoryDeviceMemoryTable >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMemoryChart* Arena::CreateMaybeMessage< ::ProfilerSectionMemoryChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMemoryChart >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionGfxMetricsWidget* Arena::CreateMaybeMessage< ::ProfilerSectionGfxMetricsWidget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionGfxMetricsWidget >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionHeader* Arena::CreateMaybeMessage< ::ProfilerSectionHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionBodyItem* Arena::CreateMaybeMessage< ::ProfilerSectionBodyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionBodyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionBody* Arena::CreateMaybeMessage< ::ProfilerSectionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSectionMetrics* Arena::CreateMaybeMessage< ::ProfilerSectionMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSectionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSection* Arena::CreateMaybeMessage< ::ProfilerSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSection >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSections* Arena::CreateMaybeMessage< ::ProfilerSections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSections >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
