// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerReport.proto

#include "ProfilerReport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Comment_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommentID_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttribute_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttributes_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceProperties_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceProperty_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReportCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecutableSettings_ProfilerReportCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterOptions_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NvtxState_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherOptions_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessInfo_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileMetricListElement_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileMetricResult_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileMetricValue_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSection_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSettings_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerStringTable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerStringTable_ProfilerStringTable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReportSessionDetails_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResult_RuleResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplingOptions_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceData_ProfilerCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint64x3_ProfilerCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionInfo_ProfilerReport_2eproto;
class DevicePropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceProperty> _instance;
} _DeviceProperty_default_instance_;
class DevicePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceProperties> _instance;
} _DeviceProperties_default_instance_;
class DeviceAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttribute> _instance;
} _DeviceAttribute_default_instance_;
class DeviceAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributes> _instance;
} _DeviceAttributes_default_instance_;
class SystemInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemInfo> _instance;
} _SystemInfo_default_instance_;
class VersionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionInfo> _instance;
} _VersionInfo_default_instance_;
class FilterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterOptions> _instance;
} _FilterOptions_default_instance_;
class SamplingOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplingOptions> _instance;
} _SamplingOptions_default_instance_;
class OtherOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherOptions> _instance;
} _OtherOptions_default_instance_;
class ProfilerSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSettings> _instance;
} _ProfilerSettings_default_instance_;
class ReportSessionDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportSessionDetails> _instance;
} _ReportSessionDetails_default_instance_;
class ProfileMetricValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileMetricValue> _instance;
} _ProfileMetricValue_default_instance_;
class ProfileMetricListElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileMetricListElement> _instance;
} _ProfileMetricListElement_default_instance_;
class ProfileMetricResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileMetricResult> _instance;
} _ProfileMetricResult_default_instance_;
class CommentIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommentID> _instance;
} _CommentID_default_instance_;
class CommentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Comment> _instance;
} _Comment_default_instance_;
class ProfileSeriesInfoMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileSeriesInfoMessage> _instance;
} _ProfileSeriesInfoMessage_default_instance_;
class ProfileResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileResult> _instance;
} _ProfileResult_default_instance_;
class ProcessInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessInfo> _instance;
} _ProcessInfo_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class FileHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileHeader> _instance;
} _FileHeader_default_instance_;
static void InitDefaultsscc_info_BlockHeader_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BlockHeader_default_instance_;
    new (ptr) ::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BlockHeader_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BlockHeader_ProfilerReport_2eproto}, {
      &scc_info_ReportSessionDetails_ProfilerReport_2eproto.base,
      &scc_info_ProfilerStringTable_ProfilerStringTable_2eproto.base,
      &scc_info_ProcessInfo_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_Comment_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Comment_default_instance_;
    new (ptr) ::Comment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Comment_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Comment_ProfilerReport_2eproto}, {
      &scc_info_CommentID_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_CommentID_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommentID_default_instance_;
    new (ptr) ::CommentID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommentID_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommentID_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAttribute_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceAttribute_default_instance_;
    new (ptr) ::DeviceAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttribute_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceAttribute_ProfilerReport_2eproto}, {
      &scc_info_ProfileMetricValue_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_DeviceAttributes_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceAttributes_default_instance_;
    new (ptr) ::DeviceAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttributes_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceAttributes_ProfilerReport_2eproto}, {
      &scc_info_DeviceAttribute_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_DeviceProperties_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceProperties_default_instance_;
    new (ptr) ::DeviceProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceProperties_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceProperties_ProfilerReport_2eproto}, {
      &scc_info_DeviceProperty_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_DeviceProperty_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceProperty_default_instance_;
    new (ptr) ::DeviceProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceProperty_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceProperty_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_FileHeader_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileHeader_default_instance_;
    new (ptr) ::FileHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileHeader_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileHeader_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_FilterOptions_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FilterOptions_default_instance_;
    new (ptr) ::FilterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterOptions_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterOptions_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_OtherOptions_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OtherOptions_default_instance_;
    new (ptr) ::OtherOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherOptions_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherOptions_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_ProcessInfo_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessInfo_default_instance_;
    new (ptr) ::ProcessInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessInfo_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessInfo_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_ProfileMetricListElement_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfileMetricListElement_default_instance_;
    new (ptr) ::ProfileMetricListElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileMetricListElement_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileMetricListElement_ProfilerReport_2eproto}, {
      &scc_info_ProfileMetricValue_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_ProfileMetricResult_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfileMetricResult_default_instance_;
    new (ptr) ::ProfileMetricResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileMetricResult_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfileMetricResult_ProfilerReport_2eproto}, {
      &scc_info_ProfileMetricValue_ProfilerReport_2eproto.base,
      &scc_info_ProfileMetricListElement_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_ProfileMetricValue_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfileMetricValue_default_instance_;
    new (ptr) ::ProfileMetricValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileMetricValue_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileMetricValue_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_ProfileResult_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfileResult_default_instance_;
    new (ptr) ::ProfileResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ProfileResult_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_ProfileResult_ProfilerReport_2eproto}, {
      &scc_info_Uint64x3_ProfilerCommon_2eproto.base,
      &scc_info_ProfileMetricResult_ProfilerReport_2eproto.base,
      &scc_info_SourceData_ProfilerCommon_2eproto.base,
      &scc_info_ProfilerSection_ProfilerSection_2eproto.base,
      &scc_info_Comment_ProfilerReport_2eproto.base,
      &scc_info_RuleResult_RuleResults_2eproto.base,
      &scc_info_NvtxState_Nvtx_2eproto.base,
      &scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfileSeriesInfoMessage_default_instance_;
    new (ptr) ::ProfileSeriesInfoMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSettings_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSettings_default_instance_;
    new (ptr) ::ProfilerSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSettings_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProfilerSettings_ProfilerReport_2eproto}, {
      &scc_info_FilterOptions_ProfilerReport_2eproto.base,
      &scc_info_OtherOptions_ProfilerReport_2eproto.base,
      &scc_info_SamplingOptions_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_ReportSessionDetails_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportSessionDetails_default_instance_;
    new (ptr) ::ReportSessionDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReportSessionDetails_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ReportSessionDetails_ProfilerReport_2eproto}, {
      &scc_info_SystemInfo_ProfilerReport_2eproto.base,
      &scc_info_DeviceProperties_ProfilerReport_2eproto.base,
      &scc_info_DeviceAttributes_ProfilerReport_2eproto.base,
      &scc_info_VersionInfo_ProfilerReport_2eproto.base,
      &scc_info_ExecutableSettings_ProfilerReportCommon_2eproto.base,
      &scc_info_ProfilerSettings_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_SamplingOptions_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SamplingOptions_default_instance_;
    new (ptr) ::SamplingOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplingOptions_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SamplingOptions_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_SystemInfo_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SystemInfo_default_instance_;
    new (ptr) ::SystemInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemInfo_ProfilerReport_2eproto}, {}};

static void InitDefaultsscc_info_VersionInfo_ProfilerReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VersionInfo_default_instance_;
    new (ptr) ::VersionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionInfo_ProfilerReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionInfo_ProfilerReport_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProfilerReport_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProfilerReport_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProfilerReport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProfilerReport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DeviceProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeviceProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceProperty, key_),
  PROTOBUF_FIELD_OFFSET(::DeviceProperty, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceProperties, properties_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceAttribute, name_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttribute, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DeviceAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceAttributes, id_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttributes, name_),
  PROTOBUF_FIELD_OFFSET(::DeviceAttributes, attributes_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SystemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SystemInfo, osname_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, build_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, processor_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, architecture_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, computername_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, platform_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::VersionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersionInfo, provider_),
  PROTOBUF_FIELD_OFFSET(::VersionInfo, version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FilterOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FilterOptions, kernelregex_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, kernelregexbase_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, kernelid_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, skipcount_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, skipbeforematchcount_),
  PROTOBUF_FIELD_OFFSET(::FilterOptions, capturecount_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, intervalauto_),
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, interval_),
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, maxpasses_),
  PROTOBUF_FIELD_OFFSET(::SamplingOptions, buffersize_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::OtherOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OtherOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OtherOptions, applyrules_),
  PROTOBUF_FIELD_OFFSET(::OtherOptions, metrics_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, enablenvtx_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, disableprofilingstartstop_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, enableprofilingfromstart_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, activitytype_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, filteroptions_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, otheroptions_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, enabledsections_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, clockcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSettings, samplingoptions_),
  6,
  7,
  8,
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, processid_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, creationtime_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, hostsysteminfo_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, targetsysteminfo_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, deviceproperties_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, deviceattributes_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, comments_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, versioninfo_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, executablesettings_),
  PROTOBUF_FIELD_OFFSET(::ReportSessionDetails, profilersettings_),
  7,
  6,
  1,
  2,
  3,
  ~0u,
  0,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, stringvalue_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, floatvalue_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, doublevalue_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, uint32value_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricValue, uint64value_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ProfileMetricListElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfileMetricListElement, correlationid_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricListElement, elementvalue_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfileMetricResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfileMetricResult, nameid_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricResult, metricvalue_),
  PROTOBUF_FIELD_OFFSET(::ProfileMetricResult, metricvaluelist_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommentID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommentID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommentID, sectionid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Comment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Comment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Comment, id_),
  PROTOBUF_FIELD_OFFSET(::Comment, displayname_),
  PROTOBUF_FIELD_OFFSET(::Comment, text_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfileSeriesInfoMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileSeriesInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfileSeriesInfoMessage, seriesid_),
  PROTOBUF_FIELD_OFFSET(::ProfileSeriesInfoMessage, combinationstr_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProfileResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfileResult, threadid_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, apicallid_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, programhandle_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, kernelid_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, kernelmangledname_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, kernelfunctionname_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, kerneldemangledname_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, workdimensions_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, globalworkoffset_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, globalworksize_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, localworksize_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, comments_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, metricresults_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, creationtime_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, source_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, api_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, sections_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, sectioncomments_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, ruleresults_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, unsupporteddevice_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, nvtx_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, contextid_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, streamid_),
  PROTOBUF_FIELD_OFFSET(::ProfileResult, seriesinfo_),
  13,
  10,
  11,
  12,
  0,
  1,
  2,
  14,
  4,
  5,
  6,
  3,
  ~0u,
  15,
  7,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  8,
  18,
  19,
  9,
  PROTOBUF_FIELD_OFFSET(::ProcessInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessInfo, processid_),
  PROTOBUF_FIELD_OFFSET(::ProcessInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::ProcessInfo, processname_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::BlockHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BlockHeader, numsources_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, numresults_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, sessiondetails_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, stringtable_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, payloadsize_),
  PROTOBUF_FIELD_OFFSET(::BlockHeader, process_),
  3,
  4,
  0,
  1,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::FileHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FileHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileHeader, version_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::DeviceProperty)},
  { 9, -1, sizeof(::DeviceProperties)},
  { 15, 22, sizeof(::DeviceAttribute)},
  { 24, 32, sizeof(::DeviceAttributes)},
  { 35, 46, sizeof(::SystemInfo)},
  { 52, 59, sizeof(::VersionInfo)},
  { 61, 72, sizeof(::FilterOptions)},
  { 78, 87, sizeof(::SamplingOptions)},
  { 91, 98, sizeof(::OtherOptions)},
  { 100, 114, sizeof(::ProfilerSettings)},
  { 123, 138, sizeof(::ReportSessionDetails)},
  { 148, 158, sizeof(::ProfileMetricValue)},
  { 163, 170, sizeof(::ProfileMetricListElement)},
  { 172, 180, sizeof(::ProfileMetricResult)},
  { 183, 189, sizeof(::CommentID)},
  { 190, 198, sizeof(::Comment)},
  { 201, 208, sizeof(::ProfileSeriesInfoMessage)},
  { 210, 239, sizeof(::ProfileResult)},
  { 263, 271, sizeof(::ProcessInfo)},
  { 274, 285, sizeof(::BlockHeader)},
  { 291, 297, sizeof(::FileHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeviceProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeviceProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeviceAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeviceAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SystemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FilterOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SamplingOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OtherOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReportSessionDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileMetricValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileMetricListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileMetricResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommentID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Comment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileSeriesInfoMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FileHeader_default_instance_),
};

const char descriptor_table_protodef_ProfilerReport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ProfilerReport.proto\032\nNvtx.proto\032\031Prof"
  "ilerStringTable.proto\032\024ProfilerCommon.pr"
  "oto\032\032ProfilerReportCommon.proto\032\025Profile"
  "rSection.proto\032\021RuleResults.proto\",\n\016Dev"
  "iceProperty\022\013\n\003Key\030\001 \002(\t\022\r\n\005Value\030\002 \002(\t\""
  "7\n\020DeviceProperties\022#\n\nProperties\030\001 \003(\0132"
  "\017.DeviceProperty\"C\n\017DeviceAttribute\022\014\n\004N"
  "ame\030\001 \002(\t\022\"\n\005Value\030\002 \002(\0132\023.ProfileMetric"
  "Value\"R\n\020DeviceAttributes\022\n\n\002ID\030\001 \002(\r\022\014\n"
  "\004Name\030\002 \001(\t\022$\n\nAttributes\030\003 \003(\0132\020.Device"
  "Attribute\"\213\001\n\nSystemInfo\022\016\n\006OSName\030\001 \001(\t"
  "\022\r\n\005Build\030\002 \001(\t\022\021\n\tProcessor\030\003 \001(\t\022\024\n\014Ar"
  "chitecture\030\004 \001(\t\022\024\n\014ComputerName\030\005 \001(\t\022\037"
  "\n\010Platform\030\006 \001(\0162\r.PlatformType\"0\n\013Versi"
  "onInfo\022\020\n\010Provider\030\001 \002(\t\022\017\n\007Version\030\002 \002("
  "\t\"\226\001\n\rFilterOptions\022\023\n\013KernelRegex\030\001 \001(\t"
  "\022\027\n\017KernelRegexBase\030\002 \001(\t\022\020\n\010KernelId\030\003 "
  "\001(\t\022\021\n\tSkipCount\030\004 \001(\r\022\034\n\024SkipBeforeMatc"
  "hCount\030\005 \001(\r\022\024\n\014CaptureCount\030\006 \001(\r\"`\n\017Sa"
  "mplingOptions\022\024\n\014IntervalAuto\030\001 \001(\010\022\020\n\010I"
  "nterval\030\002 \001(\004\022\021\n\tMaxPasses\030\003 \001(\004\022\022\n\nBuff"
  "erSize\030\004 \001(\004\"3\n\014OtherOptions\022\022\n\nApplyRul"
  "es\030\001 \001(\010\022\017\n\007Metrics\030\002 \001(\t\"\253\002\n\020ProfilerSe"
  "ttings\022\022\n\nEnableNvtx\030\001 \001(\010\022!\n\031DisablePro"
  "filingStartStop\030\002 \001(\010\022 \n\030EnableProfiling"
  "FromStart\030\003 \001(\010\022\024\n\014ActivityType\030\004 \001(\t\022%\n"
  "\rFilterOptions\030\005 \001(\0132\016.FilterOptions\022#\n\014"
  "OtherOptions\030\006 \001(\0132\r.OtherOptions\022\027\n\017Ena"
  "bledSections\030\007 \001(\t\022\030\n\020ClockControlMode\030\010"
  " \001(\t\022)\n\017SamplingOptions\030\t \001(\0132\020.Sampling"
  "Options\"\370\002\n\024ReportSessionDetails\022\021\n\tProc"
  "essID\030\001 \001(\r\022\024\n\014CreationTime\030\002 \001(\004\022#\n\016Hos"
  "tSystemInfo\030\003 \001(\0132\013.SystemInfo\022%\n\020Target"
  "SystemInfo\030\004 \001(\0132\013.SystemInfo\022+\n\020DeviceP"
  "roperties\030\005 \001(\0132\021.DeviceProperties\022+\n\020De"
  "viceAttributes\030\006 \003(\0132\021.DeviceAttributes\022"
  "\020\n\010Comments\030\007 \001(\t\022!\n\013VersionInfo\030\010 \003(\0132\014"
  ".VersionInfo\022/\n\022ExecutableSettings\030\t \001(\013"
  "2\023.ExecutableSettings\022+\n\020ProfilerSetting"
  "s\030\n \001(\0132\021.ProfilerSettings\"|\n\022ProfileMet"
  "ricValue\022\023\n\013StringValue\030\001 \001(\t\022\022\n\nFloatVa"
  "lue\030\002 \001(\002\022\023\n\013DoubleValue\030\003 \001(\001\022\023\n\013Uint32"
  "Value\030\004 \001(\r\022\023\n\013Uint64Value\030\005 \001(\004\"q\n\030Prof"
  "ileMetricListElement\022*\n\rCorrelationId\030\001 "
  "\001(\0132\023.ProfileMetricValue\022)\n\014ElementValue"
  "\030\002 \002(\0132\023.ProfileMetricValue\"\203\001\n\023ProfileM"
  "etricResult\022\016\n\006NameId\030\001 \002(\r\022(\n\013MetricVal"
  "ue\030\002 \001(\0132\023.ProfileMetricValue\0222\n\017MetricV"
  "alueList\030\003 \003(\0132\031.ProfileMetricListElemen"
  "t\"\036\n\tCommentID\022\021\n\tSectionID\030\001 \002(\t\"D\n\007Com"
  "ment\022\026\n\002ID\030\001 \002(\0132\n.CommentID\022\023\n\013DisplayN"
  "ame\030\002 \002(\t\022\014\n\004Text\030\003 \002(\t\"D\n\030ProfileSeries"
  "InfoMessage\022\020\n\010SeriesID\030\001 \002(\r\022\026\n\016Combina"
  "tionStr\030\002 \001(\t\"\256\005\n\rProfileResult\022\020\n\010Threa"
  "dID\030\001 \002(\r\022\021\n\tAPICallID\030\002 \002(\004\022\025\n\rProgramH"
  "andle\030\003 \002(\004\022\020\n\010KernelID\030\004 \002(\004\022\031\n\021KernelM"
  "angledName\030\005 \002(\t\022\032\n\022KernelFunctionName\030\006"
  " \002(\t\022\033\n\023KernelDemangledName\030\007 \002(\t\022\026\n\016Wor"
  "kDimensions\030\010 \002(\r\022#\n\020GlobalWorkOffset\030\t "
  "\002(\0132\t.Uint64x3\022!\n\016GlobalWorkSize\030\n \002(\0132\t"
  ".Uint64x3\022 \n\rLocalWorkSize\030\013 \002(\0132\t.Uint6"
  "4x3\022\020\n\010Comments\030\014 \001(\t\022+\n\rMetricResults\030\r"
  " \003(\0132\024.ProfileMetricResult\022\024\n\014CreationTi"
  "me\030\016 \001(\004\022\033\n\006Source\030\017 \002(\0132\013.SourceData\022\025\n"
  "\003Api\030\020 \001(\0162\010.APIType\022\"\n\010Sections\030\021 \003(\0132\020"
  ".ProfilerSection\022!\n\017SectionComments\030\022 \003("
  "\0132\010.Comment\022 \n\013RuleResults\030\023 \003(\0132\013.RuleR"
  "esult\022\031\n\021UnsupportedDevice\030\024 \001(\010\022\030\n\004Nvtx"
  "\030\025 \001(\0132\n.NvtxState\022\021\n\tContextID\030\026 \001(\r\022\020\n"
  "\010StreamID\030\027 \001(\r\022-\n\nSeriesInfo\030\030 \001(\0132\031.Pr"
  "ofileSeriesInfoMessage\"G\n\013ProcessInfo\022\021\n"
  "\tProcessID\030\001 \002(\r\022\020\n\010Hostname\030\002 \001(\t\022\023\n\013Pr"
  "ocessName\030\003 \001(\t\"\303\001\n\013BlockHeader\022\022\n\nNumSo"
  "urces\030\001 \001(\r\022\022\n\nNumResults\030\002 \001(\r\022-\n\016Sessi"
  "onDetails\030\003 \001(\0132\025.ReportSessionDetails\022)"
  "\n\013StringTable\030\004 \001(\0132\024.ProfilerStringTabl"
  "e\022\023\n\013PayloadSize\030\005 \001(\r\022\035\n\007Process\030\006 \001(\0132"
  "\014.ProcessInfo\"\035\n\nFileHeader\022\017\n\007Version\030\001"
  " \002(\r*[\n\014PlatformType\022\013\n\007Unknown\020\000\022\013\n\007Win"
  "dows\020\001\022\t\n\005Linux\020\002\022\013\n\007Android\020\003\022\007\n\003OSX\020\004\022"
  "\007\n\003QNX\020\005\022\007\n\003Hos\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProfilerReport_2eproto_deps[6] = {
  &::descriptor_table_Nvtx_2eproto,
  &::descriptor_table_ProfilerCommon_2eproto,
  &::descriptor_table_ProfilerReportCommon_2eproto,
  &::descriptor_table_ProfilerSection_2eproto,
  &::descriptor_table_ProfilerStringTable_2eproto,
  &::descriptor_table_RuleResults_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProfilerReport_2eproto_sccs[21] = {
  &scc_info_BlockHeader_ProfilerReport_2eproto.base,
  &scc_info_Comment_ProfilerReport_2eproto.base,
  &scc_info_CommentID_ProfilerReport_2eproto.base,
  &scc_info_DeviceAttribute_ProfilerReport_2eproto.base,
  &scc_info_DeviceAttributes_ProfilerReport_2eproto.base,
  &scc_info_DeviceProperties_ProfilerReport_2eproto.base,
  &scc_info_DeviceProperty_ProfilerReport_2eproto.base,
  &scc_info_FileHeader_ProfilerReport_2eproto.base,
  &scc_info_FilterOptions_ProfilerReport_2eproto.base,
  &scc_info_OtherOptions_ProfilerReport_2eproto.base,
  &scc_info_ProcessInfo_ProfilerReport_2eproto.base,
  &scc_info_ProfileMetricListElement_ProfilerReport_2eproto.base,
  &scc_info_ProfileMetricResult_ProfilerReport_2eproto.base,
  &scc_info_ProfileMetricValue_ProfilerReport_2eproto.base,
  &scc_info_ProfileResult_ProfilerReport_2eproto.base,
  &scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto.base,
  &scc_info_ProfilerSettings_ProfilerReport_2eproto.base,
  &scc_info_ReportSessionDetails_ProfilerReport_2eproto.base,
  &scc_info_SamplingOptions_ProfilerReport_2eproto.base,
  &scc_info_SystemInfo_ProfilerReport_2eproto.base,
  &scc_info_VersionInfo_ProfilerReport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProfilerReport_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerReport_2eproto = {
  false, false, descriptor_table_protodef_ProfilerReport_2eproto, "ProfilerReport.proto", 3217,
  &descriptor_table_ProfilerReport_2eproto_once, descriptor_table_ProfilerReport_2eproto_sccs, descriptor_table_ProfilerReport_2eproto_deps, 21, 6,
  schemas, file_default_instances, TableStruct_ProfilerReport_2eproto::offsets,
  file_level_metadata_ProfilerReport_2eproto, 21, file_level_enum_descriptors_ProfilerReport_2eproto, file_level_service_descriptors_ProfilerReport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProfilerReport_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProfilerReport_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlatformType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerReport_2eproto);
  return file_level_enum_descriptors_ProfilerReport_2eproto[0];
}
bool PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DeviceProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceProperty>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DeviceProperty::DeviceProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeviceProperty)
}
DeviceProperty::DeviceProperty(const DeviceProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DeviceProperty)
}

void DeviceProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceProperty_ProfilerReport_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceProperty::~DeviceProperty() {
  // @@protoc_insertion_point(destructor:DeviceProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceProperty::ArenaDtor(void* object) {
  DeviceProperty* _this = reinterpret_cast< DeviceProperty* >(object);
  (void)_this;
}
void DeviceProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceProperty& DeviceProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceProperty_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void DeviceProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeviceProperty.Key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeviceProperty.Value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DeviceProperty.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string Value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DeviceProperty.Value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceProperty)
  return target;
}

size_t DeviceProperty::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeviceProperty)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string Key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t DeviceProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceProperty)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceProperty)
    MergeFrom(*source);
  }
}

void DeviceProperty::MergeFrom(const DeviceProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void DeviceProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceProperty::CopyFrom(const DeviceProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceProperty::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeviceProperty::InternalSwap(DeviceProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceProperties::_Internal {
 public:
};

DeviceProperties::DeviceProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeviceProperties)
}
DeviceProperties::DeviceProperties(const DeviceProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeviceProperties)
}

void DeviceProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceProperties_ProfilerReport_2eproto.base);
}

DeviceProperties::~DeviceProperties() {
  // @@protoc_insertion_point(destructor:DeviceProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceProperties::ArenaDtor(void* object) {
  DeviceProperties* _this = reinterpret_cast< DeviceProperties* >(object);
  (void)_this;
}
void DeviceProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceProperties& DeviceProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceProperties_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void DeviceProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DeviceProperty Properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceProperty Properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceProperties)
  return target;
}

size_t DeviceProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceProperty Properties = 1;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceProperties)
    MergeFrom(*source);
  }
}

void DeviceProperties::MergeFrom(const DeviceProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void DeviceProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceProperties::CopyFrom(const DeviceProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceProperties::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  return true;
}

void DeviceProperties::InternalSwap(DeviceProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttribute>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfileMetricValue& value(const DeviceAttribute* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::ProfileMetricValue&
DeviceAttribute::_Internal::value(const DeviceAttribute* msg) {
  return *msg->value_;
}
DeviceAttribute::DeviceAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeviceAttribute)
}
DeviceAttribute::DeviceAttribute(const DeviceAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::ProfileMetricValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DeviceAttribute)
}

void DeviceAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAttribute_ProfilerReport_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

DeviceAttribute::~DeviceAttribute() {
  // @@protoc_insertion_point(destructor:DeviceAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void DeviceAttribute::ArenaDtor(void* object) {
  DeviceAttribute* _this = reinterpret_cast< DeviceAttribute* >(object);
  (void)_this;
}
void DeviceAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttribute& DeviceAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttribute_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeviceAttribute.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProfileMetricValue Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DeviceAttribute.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .ProfileMetricValue Value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceAttribute)
  return target;
}

size_t DeviceAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeviceAttribute)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string Name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required .ProfileMetricValue Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t DeviceAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceAttribute)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .ProfileMetricValue Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceAttribute)
    MergeFrom(*source);
  }
}

void DeviceAttribute::MergeFrom(const DeviceAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::ProfileMetricValue::MergeFrom(from._internal_value());
    }
  }
}

void DeviceAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttribute::CopyFrom(const DeviceAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeviceAttribute::InternalSwap(DeviceAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttributes>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

DeviceAttributes::DeviceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeviceAttributes)
}
DeviceAttributes::DeviceAttributes(const DeviceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:DeviceAttributes)
}

void DeviceAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAttributes_ProfilerReport_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

DeviceAttributes::~DeviceAttributes() {
  // @@protoc_insertion_point(destructor:DeviceAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceAttributes::ArenaDtor(void* object) {
  DeviceAttributes* _this = reinterpret_cast< DeviceAttributes* >(object);
  (void)_this;
}
void DeviceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributes& DeviceAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributes_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeviceAttributes.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DeviceAttribute Attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DeviceAttributes.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .DeviceAttribute Attributes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceAttributes)
  return target;
}

size_t DeviceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceAttributes)
  size_t total_size = 0;

  // required uint32 ID = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceAttribute Attributes = 3;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string Name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceAttributes)
    MergeFrom(*source);
  }
}

void DeviceAttributes::MergeFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttributes::CopyFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attributes_)) return false;
  return true;
}

void DeviceAttributes::InternalSwap(DeviceAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SystemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemInfo>()._has_bits_);
  static void set_has_osname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_processor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_architecture(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_computername(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SystemInfo::SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_osname()) {
    osname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_osname(), 
      GetArena());
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_build()) {
    build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_build(), 
      GetArena());
  }
  processor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_processor()) {
    processor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_processor(), 
      GetArena());
  }
  architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_architecture()) {
    architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_architecture(), 
      GetArena());
  }
  computername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_computername()) {
    computername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_computername(), 
      GetArena());
  }
  platform_ = from.platform_;
  // @@protoc_insertion_point(copy_constructor:SystemInfo)
}

void SystemInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemInfo_ProfilerReport_2eproto.base);
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_ = 0;
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:SystemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  osname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  architecture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemInfo::ArenaDtor(void* object) {
  SystemInfo* _this = reinterpret_cast< SystemInfo* >(object);
  (void)_this;
}
void SystemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemInfo& SystemInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemInfo_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      osname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      processor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      architecture_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      computername_.ClearNonDefaultToEmpty();
    }
  }
  platform_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string OSName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_osname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SystemInfo.OSName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SystemInfo.Build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Processor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_processor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SystemInfo.Processor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Architecture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_architecture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SystemInfo.Architecture");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ComputerName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_computername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SystemInfo.ComputerName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlatformType Platform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PlatformType_IsValid(val))) {
            _internal_set_platform(static_cast<::PlatformType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string OSName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_osname().data(), static_cast<int>(this->_internal_osname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemInfo.OSName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_osname(), target);
  }

  // optional string Build = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemInfo.Build");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_build(), target);
  }

  // optional string Processor = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_processor().data(), static_cast<int>(this->_internal_processor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemInfo.Processor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_processor(), target);
  }

  // optional string Architecture = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_architecture().data(), static_cast<int>(this->_internal_architecture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemInfo.Architecture");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_architecture(), target);
  }

  // optional string ComputerName = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_computername().data(), static_cast<int>(this->_internal_computername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SystemInfo.ComputerName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_computername(), target);
  }

  // optional .PlatformType Platform = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SystemInfo)
  return target;
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string OSName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_osname());
    }

    // optional string Build = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build());
    }

    // optional string Processor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_processor());
    }

    // optional string Architecture = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_architecture());
    }

    // optional string ComputerName = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_computername());
    }

    // optional .PlatformType Platform = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SystemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SystemInfo)
    MergeFrom(*source);
  }
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_osname(from._internal_osname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_processor(from._internal_processor());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_architecture(from._internal_architecture());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_computername(from._internal_computername());
    }
    if (cached_has_bits & 0x00000020u) {
      platform_ = from.platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::InternalSwap(SystemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  osname_.Swap(&other->osname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  processor_.Swap(&other->processor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  architecture_.Swap(&other->architecture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  computername_.Swap(&other->computername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(platform_, other->platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionInfo>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VersionInfo::VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_provider()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:VersionInfo)
}

void VersionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionInfo_ProfilerReport_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:VersionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionInfo::ArenaDtor(void* object) {
  VersionInfo* _this = reinterpret_cast< VersionInfo* >(object);
  (void)_this;
}
void VersionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionInfo& VersionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionInfo_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:VersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      provider_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VersionInfo.Provider");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VersionInfo.Version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VersionInfo.Provider");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider(), target);
  }

  // required string Version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VersionInfo.Version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersionInfo)
  return target;
}

size_t VersionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VersionInfo)
  size_t total_size = 0;

  if (_internal_has_provider()) {
    // required string Provider = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  if (_internal_has_version()) {
    // required string Version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return total_size;
}
size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersionInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Provider = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());

    // required string Version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersionInfo)
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_provider(from._internal_provider());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
  }
}

void VersionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterOptions>()._has_bits_);
  static void set_has_kernelregex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernelregexbase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skipcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skipbeforematchcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_capturecount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FilterOptions::FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FilterOptions)
}
FilterOptions::FilterOptions(const FilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kernelregex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelregex()) {
    kernelregex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelregex(), 
      GetArena());
  }
  kernelregexbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelregexbase()) {
    kernelregexbase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelregexbase(), 
      GetArena());
  }
  kernelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelid()) {
    kernelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelid(), 
      GetArena());
  }
  ::memcpy(&skipcount_, &from.skipcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&capturecount_) -
    reinterpret_cast<char*>(&skipcount_)) + sizeof(capturecount_));
  // @@protoc_insertion_point(copy_constructor:FilterOptions)
}

void FilterOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterOptions_ProfilerReport_2eproto.base);
  kernelregex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelregexbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&skipcount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&capturecount_) -
      reinterpret_cast<char*>(&skipcount_)) + sizeof(capturecount_));
}

FilterOptions::~FilterOptions() {
  // @@protoc_insertion_point(destructor:FilterOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kernelregex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelregexbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilterOptions::ArenaDtor(void* object) {
  FilterOptions* _this = reinterpret_cast< FilterOptions* >(object);
  (void)_this;
}
void FilterOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterOptions& FilterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterOptions_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void FilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kernelregex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      kernelregexbase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      kernelid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&skipcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capturecount_) -
        reinterpret_cast<char*>(&skipcount_)) + sizeof(capturecount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string KernelRegex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_kernelregex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FilterOptions.KernelRegex");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string KernelRegexBase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kernelregexbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FilterOptions.KernelRegexBase");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string KernelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kernelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FilterOptions.KernelId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 SkipCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skipcount(&has_bits);
          skipcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 SkipBeforeMatchCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_skipbeforematchcount(&has_bits);
          skipbeforematchcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 CaptureCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_capturecount(&has_bits);
          capturecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string KernelRegex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelregex().data(), static_cast<int>(this->_internal_kernelregex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FilterOptions.KernelRegex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kernelregex(), target);
  }

  // optional string KernelRegexBase = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelregexbase().data(), static_cast<int>(this->_internal_kernelregexbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FilterOptions.KernelRegexBase");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kernelregexbase(), target);
  }

  // optional string KernelId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelid().data(), static_cast<int>(this->_internal_kernelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FilterOptions.KernelId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_kernelid(), target);
  }

  // optional uint32 SkipCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skipcount(), target);
  }

  // optional uint32 SkipBeforeMatchCount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_skipbeforematchcount(), target);
  }

  // optional uint32 CaptureCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_capturecount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterOptions)
  return target;
}

size_t FilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilterOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string KernelRegex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kernelregex());
    }

    // optional string KernelRegexBase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kernelregexbase());
    }

    // optional string KernelId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kernelid());
    }

    // optional uint32 SkipCount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skipcount());
    }

    // optional uint32 SkipBeforeMatchCount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skipbeforematchcount());
    }

    // optional uint32 CaptureCount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capturecount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FilterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FilterOptions)
    MergeFrom(*source);
  }
}

void FilterOptions::MergeFrom(const FilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kernelregex(from._internal_kernelregex());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_kernelregexbase(from._internal_kernelregexbase());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_kernelid(from._internal_kernelid());
    }
    if (cached_has_bits & 0x00000008u) {
      skipcount_ = from.skipcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      skipbeforematchcount_ = from.skipbeforematchcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      capturecount_ = from.capturecount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FilterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterOptions::CopyFrom(const FilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterOptions::IsInitialized() const {
  return true;
}

void FilterOptions::InternalSwap(FilterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kernelregex_.Swap(&other->kernelregex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelregexbase_.Swap(&other->kernelregexbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelid_.Swap(&other->kernelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterOptions, capturecount_)
      + sizeof(FilterOptions::capturecount_)
      - PROTOBUF_FIELD_OFFSET(FilterOptions, skipcount_)>(
          reinterpret_cast<char*>(&skipcount_),
          reinterpret_cast<char*>(&other->skipcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SamplingOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SamplingOptions>()._has_bits_);
  static void set_has_intervalauto(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxpasses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buffersize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SamplingOptions::SamplingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SamplingOptions)
}
SamplingOptions::SamplingOptions(const SamplingOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&intervalauto_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(intervalauto_));
  // @@protoc_insertion_point(copy_constructor:SamplingOptions)
}

void SamplingOptions::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&intervalauto_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(intervalauto_));
}

SamplingOptions::~SamplingOptions() {
  // @@protoc_insertion_point(destructor:SamplingOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplingOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SamplingOptions::ArenaDtor(void* object) {
  SamplingOptions* _this = reinterpret_cast< SamplingOptions* >(object);
  (void)_this;
}
void SamplingOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplingOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplingOptions& SamplingOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplingOptions_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void SamplingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:SamplingOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&intervalauto_) -
        reinterpret_cast<char*>(&interval_)) + sizeof(intervalauto_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool IntervalAuto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_intervalauto(&has_bits);
          intervalauto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 Interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_interval(&has_bits);
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 MaxPasses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxpasses(&has_bits);
          maxpasses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 BufferSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_buffersize(&has_bits);
          buffersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplingOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SamplingOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool IntervalAuto = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_intervalauto(), target);
  }

  // optional uint64 Interval = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_interval(), target);
  }

  // optional uint64 MaxPasses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_maxpasses(), target);
  }

  // optional uint64 BufferSize = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_buffersize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SamplingOptions)
  return target;
}

size_t SamplingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SamplingOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 Interval = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_interval());
    }

    // optional uint64 MaxPasses = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_maxpasses());
    }

    // optional uint64 BufferSize = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_buffersize());
    }

    // optional bool IntervalAuto = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplingOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SamplingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplingOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SamplingOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SamplingOptions)
    MergeFrom(*source);
  }
}

void SamplingOptions::MergeFrom(const SamplingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SamplingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      interval_ = from.interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxpasses_ = from.maxpasses_;
    }
    if (cached_has_bits & 0x00000004u) {
      buffersize_ = from.buffersize_;
    }
    if (cached_has_bits & 0x00000008u) {
      intervalauto_ = from.intervalauto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SamplingOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SamplingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingOptions::CopyFrom(const SamplingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SamplingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingOptions::IsInitialized() const {
  return true;
}

void SamplingOptions::InternalSwap(SamplingOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplingOptions, intervalauto_)
      + sizeof(SamplingOptions::intervalauto_)
      - PROTOBUF_FIELD_OFFSET(SamplingOptions, interval_)>(
          reinterpret_cast<char*>(&interval_),
          reinterpret_cast<char*>(&other->interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OtherOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<OtherOptions>()._has_bits_);
  static void set_has_applyrules(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OtherOptions::OtherOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OtherOptions)
}
OtherOptions::OtherOptions(const OtherOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metrics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metrics()) {
    metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metrics(), 
      GetArena());
  }
  applyrules_ = from.applyrules_;
  // @@protoc_insertion_point(copy_constructor:OtherOptions)
}

void OtherOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherOptions_ProfilerReport_2eproto.base);
  metrics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  applyrules_ = false;
}

OtherOptions::~OtherOptions() {
  // @@protoc_insertion_point(destructor:OtherOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OtherOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metrics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherOptions::ArenaDtor(void* object) {
  OtherOptions* _this = reinterpret_cast< OtherOptions* >(object);
  (void)_this;
}
void OtherOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherOptions& OtherOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherOptions_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void OtherOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metrics_.ClearNonDefaultToEmpty();
  }
  applyrules_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ApplyRules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_applyrules(&has_bits);
          applyrules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metrics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OtherOptions.Metrics");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OtherOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ApplyRules = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_applyrules(), target);
  }

  // optional string Metrics = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metrics().data(), static_cast<int>(this->_internal_metrics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "OtherOptions.Metrics");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metrics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherOptions)
  return target;
}

size_t OtherOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string Metrics = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metrics());
    }

    // optional bool ApplyRules = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OtherOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OtherOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OtherOptions)
    MergeFrom(*source);
  }
}

void OtherOptions::MergeFrom(const OtherOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metrics(from._internal_metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      applyrules_ = from.applyrules_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OtherOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OtherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherOptions::CopyFrom(const OtherOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherOptions::IsInitialized() const {
  return true;
}

void OtherOptions::InternalSwap(OtherOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.Swap(&other->metrics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(applyrules_, other->applyrules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSettings>()._has_bits_);
  static void set_has_enablenvtx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disableprofilingstartstop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enableprofilingfromstart(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_activitytype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::FilterOptions& filteroptions(const ProfilerSettings* msg);
  static void set_has_filteroptions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::OtherOptions& otheroptions(const ProfilerSettings* msg);
  static void set_has_otheroptions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabledsections(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clockcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SamplingOptions& samplingoptions(const ProfilerSettings* msg);
  static void set_has_samplingoptions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::FilterOptions&
ProfilerSettings::_Internal::filteroptions(const ProfilerSettings* msg) {
  return *msg->filteroptions_;
}
const ::OtherOptions&
ProfilerSettings::_Internal::otheroptions(const ProfilerSettings* msg) {
  return *msg->otheroptions_;
}
const ::SamplingOptions&
ProfilerSettings::_Internal::samplingoptions(const ProfilerSettings* msg) {
  return *msg->samplingoptions_;
}
ProfilerSettings::ProfilerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSettings)
}
ProfilerSettings::ProfilerSettings(const ProfilerSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activitytype()) {
    activitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activitytype(), 
      GetArena());
  }
  enabledsections_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enabledsections()) {
    enabledsections_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enabledsections(), 
      GetArena());
  }
  clockcontrolmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clockcontrolmode()) {
    clockcontrolmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clockcontrolmode(), 
      GetArena());
  }
  if (from._internal_has_filteroptions()) {
    filteroptions_ = new ::FilterOptions(*from.filteroptions_);
  } else {
    filteroptions_ = nullptr;
  }
  if (from._internal_has_otheroptions()) {
    otheroptions_ = new ::OtherOptions(*from.otheroptions_);
  } else {
    otheroptions_ = nullptr;
  }
  if (from._internal_has_samplingoptions()) {
    samplingoptions_ = new ::SamplingOptions(*from.samplingoptions_);
  } else {
    samplingoptions_ = nullptr;
  }
  ::memcpy(&enablenvtx_, &from.enablenvtx_,
    static_cast<size_t>(reinterpret_cast<char*>(&enableprofilingfromstart_) -
    reinterpret_cast<char*>(&enablenvtx_)) + sizeof(enableprofilingfromstart_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSettings)
}

void ProfilerSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSettings_ProfilerReport_2eproto.base);
  activitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enabledsections_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clockcontrolmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filteroptions_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enableprofilingfromstart_) -
      reinterpret_cast<char*>(&filteroptions_)) + sizeof(enableprofilingfromstart_));
}

ProfilerSettings::~ProfilerSettings() {
  // @@protoc_insertion_point(destructor:ProfilerSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enabledsections_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clockcontrolmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filteroptions_;
  if (this != internal_default_instance()) delete otheroptions_;
  if (this != internal_default_instance()) delete samplingoptions_;
}

void ProfilerSettings::ArenaDtor(void* object) {
  ProfilerSettings* _this = reinterpret_cast< ProfilerSettings* >(object);
  (void)_this;
}
void ProfilerSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSettings& ProfilerSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSettings_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      activitytype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      enabledsections_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      clockcontrolmode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(filteroptions_ != nullptr);
      filteroptions_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(otheroptions_ != nullptr);
      otheroptions_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(samplingoptions_ != nullptr);
      samplingoptions_->Clear();
    }
  }
  ::memset(&enablenvtx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disableprofilingstartstop_) -
      reinterpret_cast<char*>(&enablenvtx_)) + sizeof(disableprofilingstartstop_));
  enableprofilingfromstart_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool EnableNvtx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enablenvtx(&has_bits);
          enablenvtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DisableProfilingStartStop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disableprofilingstartstop(&has_bits);
          disableprofilingstartstop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool EnableProfilingFromStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enableprofilingfromstart(&has_bits);
          enableprofilingfromstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ActivityType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_activitytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSettings.ActivityType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FilterOptions FilterOptions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_filteroptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .OtherOptions OtherOptions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_otheroptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string EnabledSections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_enabledsections();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSettings.EnabledSections");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ClockControlMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_clockcontrolmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerSettings.ClockControlMode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SamplingOptions SamplingOptions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_samplingoptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool EnableNvtx = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enablenvtx(), target);
  }

  // optional bool DisableProfilingStartStop = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disableprofilingstartstop(), target);
  }

  // optional bool EnableProfilingFromStart = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enableprofilingfromstart(), target);
  }

  // optional string ActivityType = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activitytype().data(), static_cast<int>(this->_internal_activitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSettings.ActivityType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activitytype(), target);
  }

  // optional .FilterOptions FilterOptions = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::filteroptions(this), target, stream);
  }

  // optional .OtherOptions OtherOptions = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::otheroptions(this), target, stream);
  }

  // optional string EnabledSections = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enabledsections().data(), static_cast<int>(this->_internal_enabledsections().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSettings.EnabledSections");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_enabledsections(), target);
  }

  // optional string ClockControlMode = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clockcontrolmode().data(), static_cast<int>(this->_internal_clockcontrolmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerSettings.ClockControlMode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_clockcontrolmode(), target);
  }

  // optional .SamplingOptions SamplingOptions = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::samplingoptions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSettings)
  return target;
}

size_t ProfilerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ActivityType = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activitytype());
    }

    // optional string EnabledSections = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enabledsections());
    }

    // optional string ClockControlMode = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clockcontrolmode());
    }

    // optional .FilterOptions FilterOptions = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filteroptions_);
    }

    // optional .OtherOptions OtherOptions = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *otheroptions_);
    }

    // optional .SamplingOptions SamplingOptions = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *samplingoptions_);
    }

    // optional bool EnableNvtx = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool DisableProfilingStartStop = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool EnableProfilingFromStart = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSettings)
    MergeFrom(*source);
  }
}

void ProfilerSettings::MergeFrom(const ProfilerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activitytype(from._internal_activitytype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_enabledsections(from._internal_enabledsections());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_clockcontrolmode(from._internal_clockcontrolmode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_filteroptions()->::FilterOptions::MergeFrom(from._internal_filteroptions());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_otheroptions()->::OtherOptions::MergeFrom(from._internal_otheroptions());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_samplingoptions()->::SamplingOptions::MergeFrom(from._internal_samplingoptions());
    }
    if (cached_has_bits & 0x00000040u) {
      enablenvtx_ = from.enablenvtx_;
    }
    if (cached_has_bits & 0x00000080u) {
      disableprofilingstartstop_ = from.disableprofilingstartstop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_enableprofilingfromstart(from._internal_enableprofilingfromstart());
  }
}

void ProfilerSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSettings::CopyFrom(const ProfilerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSettings::IsInitialized() const {
  return true;
}

void ProfilerSettings::InternalSwap(ProfilerSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activitytype_.Swap(&other->activitytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enabledsections_.Swap(&other->enabledsections_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clockcontrolmode_.Swap(&other->clockcontrolmode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerSettings, enableprofilingfromstart_)
      + sizeof(ProfilerSettings::enableprofilingfromstart_)
      - PROTOBUF_FIELD_OFFSET(ProfilerSettings, filteroptions_)>(
          reinterpret_cast<char*>(&filteroptions_),
          reinterpret_cast<char*>(&other->filteroptions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReportSessionDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportSessionDetails>()._has_bits_);
  static void set_has_processid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_creationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SystemInfo& hostsysteminfo(const ReportSessionDetails* msg);
  static void set_has_hostsysteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SystemInfo& targetsysteminfo(const ReportSessionDetails* msg);
  static void set_has_targetsysteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::DeviceProperties& deviceproperties(const ReportSessionDetails* msg);
  static void set_has_deviceproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ExecutableSettings& executablesettings(const ReportSessionDetails* msg);
  static void set_has_executablesettings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ProfilerSettings& profilersettings(const ReportSessionDetails* msg);
  static void set_has_profilersettings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::SystemInfo&
ReportSessionDetails::_Internal::hostsysteminfo(const ReportSessionDetails* msg) {
  return *msg->hostsysteminfo_;
}
const ::SystemInfo&
ReportSessionDetails::_Internal::targetsysteminfo(const ReportSessionDetails* msg) {
  return *msg->targetsysteminfo_;
}
const ::DeviceProperties&
ReportSessionDetails::_Internal::deviceproperties(const ReportSessionDetails* msg) {
  return *msg->deviceproperties_;
}
const ::ExecutableSettings&
ReportSessionDetails::_Internal::executablesettings(const ReportSessionDetails* msg) {
  return *msg->executablesettings_;
}
const ::ProfilerSettings&
ReportSessionDetails::_Internal::profilersettings(const ReportSessionDetails* msg) {
  return *msg->profilersettings_;
}
void ReportSessionDetails::clear_executablesettings() {
  if (executablesettings_ != nullptr) executablesettings_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ReportSessionDetails::ReportSessionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deviceattributes_(arena),
  versioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReportSessionDetails)
}
ReportSessionDetails::ReportSessionDetails(const ReportSessionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      deviceattributes_(from.deviceattributes_),
      versioninfo_(from.versioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comments()) {
    comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comments(), 
      GetArena());
  }
  if (from._internal_has_hostsysteminfo()) {
    hostsysteminfo_ = new ::SystemInfo(*from.hostsysteminfo_);
  } else {
    hostsysteminfo_ = nullptr;
  }
  if (from._internal_has_targetsysteminfo()) {
    targetsysteminfo_ = new ::SystemInfo(*from.targetsysteminfo_);
  } else {
    targetsysteminfo_ = nullptr;
  }
  if (from._internal_has_deviceproperties()) {
    deviceproperties_ = new ::DeviceProperties(*from.deviceproperties_);
  } else {
    deviceproperties_ = nullptr;
  }
  if (from._internal_has_executablesettings()) {
    executablesettings_ = new ::ExecutableSettings(*from.executablesettings_);
  } else {
    executablesettings_ = nullptr;
  }
  if (from._internal_has_profilersettings()) {
    profilersettings_ = new ::ProfilerSettings(*from.profilersettings_);
  } else {
    profilersettings_ = nullptr;
  }
  ::memcpy(&creationtime_, &from.creationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&creationtime_)) + sizeof(processid_));
  // @@protoc_insertion_point(copy_constructor:ReportSessionDetails)
}

void ReportSessionDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportSessionDetails_ProfilerReport_2eproto.base);
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hostsysteminfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&hostsysteminfo_)) + sizeof(processid_));
}

ReportSessionDetails::~ReportSessionDetails() {
  // @@protoc_insertion_point(destructor:ReportSessionDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportSessionDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hostsysteminfo_;
  if (this != internal_default_instance()) delete targetsysteminfo_;
  if (this != internal_default_instance()) delete deviceproperties_;
  if (this != internal_default_instance()) delete executablesettings_;
  if (this != internal_default_instance()) delete profilersettings_;
}

void ReportSessionDetails::ArenaDtor(void* object) {
  ReportSessionDetails* _this = reinterpret_cast< ReportSessionDetails* >(object);
  (void)_this;
}
void ReportSessionDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportSessionDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportSessionDetails& ReportSessionDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportSessionDetails_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ReportSessionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportSessionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceattributes_.Clear();
  versioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      comments_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hostsysteminfo_ != nullptr);
      hostsysteminfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(targetsysteminfo_ != nullptr);
      targetsysteminfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deviceproperties_ != nullptr);
      deviceproperties_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(executablesettings_ != nullptr);
      executablesettings_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(profilersettings_ != nullptr);
      profilersettings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&creationtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processid_) -
        reinterpret_cast<char*>(&creationtime_)) + sizeof(processid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportSessionDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ProcessID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_processid(&has_bits);
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 CreationTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_creationtime(&has_bits);
          creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SystemInfo HostSystemInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostsysteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SystemInfo TargetSystemInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetsysteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DeviceProperties DeviceProperties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceproperties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DeviceAttributes DeviceAttributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deviceattributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string Comments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_comments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReportSessionDetails.Comments");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VersionInfo VersionInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ExecutableSettings ExecutableSettings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_executablesettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSettings ProfilerSettings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilersettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportSessionDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportSessionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ProcessID = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processid(), target);
  }

  // optional uint64 CreationTime = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_creationtime(), target);
  }

  // optional .SystemInfo HostSystemInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hostsysteminfo(this), target, stream);
  }

  // optional .SystemInfo TargetSystemInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::targetsysteminfo(this), target, stream);
  }

  // optional .DeviceProperties DeviceProperties = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::deviceproperties(this), target, stream);
  }

  // repeated .DeviceAttributes DeviceAttributes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deviceattributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_deviceattributes(i), target, stream);
  }

  // optional string Comments = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comments().data(), static_cast<int>(this->_internal_comments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReportSessionDetails.Comments");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_comments(), target);
  }

  // repeated .VersionInfo VersionInfo = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_versioninfo(i), target, stream);
  }

  // optional .ExecutableSettings ExecutableSettings = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::executablesettings(this), target, stream);
  }

  // optional .ProfilerSettings ProfilerSettings = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::profilersettings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportSessionDetails)
  return target;
}

size_t ReportSessionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportSessionDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceAttributes DeviceAttributes = 6;
  total_size += 1UL * this->_internal_deviceattributes_size();
  for (const auto& msg : this->deviceattributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .VersionInfo VersionInfo = 8;
  total_size += 1UL * this->_internal_versioninfo_size();
  for (const auto& msg : this->versioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Comments = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comments());
    }

    // optional .SystemInfo HostSystemInfo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hostsysteminfo_);
    }

    // optional .SystemInfo TargetSystemInfo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *targetsysteminfo_);
    }

    // optional .DeviceProperties DeviceProperties = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deviceproperties_);
    }

    // optional .ExecutableSettings ExecutableSettings = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *executablesettings_);
    }

    // optional .ProfilerSettings ProfilerSettings = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profilersettings_);
    }

    // optional uint64 CreationTime = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creationtime());
    }

    // optional uint32 ProcessID = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_processid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportSessionDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReportSessionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSessionDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportSessionDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReportSessionDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReportSessionDetails)
    MergeFrom(*source);
  }
}

void ReportSessionDetails::MergeFrom(const ReportSessionDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportSessionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deviceattributes_.MergeFrom(from.deviceattributes_);
  versioninfo_.MergeFrom(from.versioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comments(from._internal_comments());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hostsysteminfo()->::SystemInfo::MergeFrom(from._internal_hostsysteminfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_targetsysteminfo()->::SystemInfo::MergeFrom(from._internal_targetsysteminfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_deviceproperties()->::DeviceProperties::MergeFrom(from._internal_deviceproperties());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_executablesettings()->::ExecutableSettings::MergeFrom(from._internal_executablesettings());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_profilersettings()->::ProfilerSettings::MergeFrom(from._internal_profilersettings());
    }
    if (cached_has_bits & 0x00000040u) {
      creationtime_ = from.creationtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      processid_ = from.processid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportSessionDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReportSessionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSessionDetails::CopyFrom(const ReportSessionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportSessionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSessionDetails::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deviceattributes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(versioninfo_)) return false;
  if (_internal_has_deviceproperties()) {
    if (!deviceproperties_->IsInitialized()) return false;
  }
  if (_internal_has_executablesettings()) {
    if (!executablesettings_->IsInitialized()) return false;
  }
  return true;
}

void ReportSessionDetails::InternalSwap(ReportSessionDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deviceattributes_.InternalSwap(&other->deviceattributes_);
  versioninfo_.InternalSwap(&other->versioninfo_);
  comments_.Swap(&other->comments_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportSessionDetails, processid_)
      + sizeof(ReportSessionDetails::processid_)
      - PROTOBUF_FIELD_OFFSET(ReportSessionDetails, hostsysteminfo_)>(
          reinterpret_cast<char*>(&hostsysteminfo_),
          reinterpret_cast<char*>(&other->hostsysteminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportSessionDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileMetricValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileMetricValue>()._has_bits_);
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_floatvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_doublevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uint32value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint64value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ProfileMetricValue::ProfileMetricValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfileMetricValue)
}
ProfileMetricValue::ProfileMetricValue(const ProfileMetricValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringvalue()) {
    stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringvalue(), 
      GetArena());
  }
  ::memcpy(&doublevalue_, &from.doublevalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint64value_) -
    reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
  // @@protoc_insertion_point(copy_constructor:ProfileMetricValue)
}

void ProfileMetricValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileMetricValue_ProfilerReport_2eproto.base);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&doublevalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uint64value_) -
      reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
}

ProfileMetricValue::~ProfileMetricValue() {
  // @@protoc_insertion_point(destructor:ProfileMetricValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileMetricValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileMetricValue::ArenaDtor(void* object) {
  ProfileMetricValue* _this = reinterpret_cast< ProfileMetricValue* >(object);
  (void)_this;
}
void ProfileMetricValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileMetricValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileMetricValue& ProfileMetricValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileMetricValue_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfileMetricValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileMetricValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stringvalue_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&doublevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint64value_) -
        reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileMetricValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string StringValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileMetricValue.StringValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float FloatValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_floatvalue(&has_bits);
          floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double DoubleValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_doublevalue(&has_bits);
          doublevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 Uint32Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uint32value(&has_bits);
          uint32value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 Uint64Value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint64value(&has_bits);
          uint64value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileMetricValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileMetricValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string StringValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileMetricValue.StringValue");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stringvalue(), target);
  }

  // optional float FloatValue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_floatvalue(), target);
  }

  // optional double DoubleValue = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_doublevalue(), target);
  }

  // optional uint32 Uint32Value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32value(), target);
  }

  // optional uint64 Uint64Value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileMetricValue)
  return target;
}

size_t ProfileMetricValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileMetricValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string StringValue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional double DoubleValue = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float FloatValue = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 Uint32Value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32value());
    }

    // optional uint64 Uint64Value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileMetricValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfileMetricValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileMetricValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileMetricValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfileMetricValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfileMetricValue)
    MergeFrom(*source);
  }
}

void ProfileMetricValue::MergeFrom(const ProfileMetricValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileMetricValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      doublevalue_ = from.doublevalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      floatvalue_ = from.floatvalue_;
    }
    if (cached_has_bits & 0x00000008u) {
      uint32value_ = from.uint32value_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint64value_ = from.uint64value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileMetricValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfileMetricValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileMetricValue::CopyFrom(const ProfileMetricValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileMetricValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileMetricValue::IsInitialized() const {
  return true;
}

void ProfileMetricValue::InternalSwap(ProfileMetricValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stringvalue_.Swap(&other->stringvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileMetricValue, uint64value_)
      + sizeof(ProfileMetricValue::uint64value_)
      - PROTOBUF_FIELD_OFFSET(ProfileMetricValue, doublevalue_)>(
          reinterpret_cast<char*>(&doublevalue_),
          reinterpret_cast<char*>(&other->doublevalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileMetricValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileMetricListElement::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileMetricListElement>()._has_bits_);
  static const ::ProfileMetricValue& correlationid(const ProfileMetricListElement* msg);
  static void set_has_correlationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfileMetricValue& elementvalue(const ProfileMetricListElement* msg);
  static void set_has_elementvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::ProfileMetricValue&
ProfileMetricListElement::_Internal::correlationid(const ProfileMetricListElement* msg) {
  return *msg->correlationid_;
}
const ::ProfileMetricValue&
ProfileMetricListElement::_Internal::elementvalue(const ProfileMetricListElement* msg) {
  return *msg->elementvalue_;
}
ProfileMetricListElement::ProfileMetricListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfileMetricListElement)
}
ProfileMetricListElement::ProfileMetricListElement(const ProfileMetricListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_correlationid()) {
    correlationid_ = new ::ProfileMetricValue(*from.correlationid_);
  } else {
    correlationid_ = nullptr;
  }
  if (from._internal_has_elementvalue()) {
    elementvalue_ = new ::ProfileMetricValue(*from.elementvalue_);
  } else {
    elementvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfileMetricListElement)
}

void ProfileMetricListElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileMetricListElement_ProfilerReport_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&correlationid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&elementvalue_) -
      reinterpret_cast<char*>(&correlationid_)) + sizeof(elementvalue_));
}

ProfileMetricListElement::~ProfileMetricListElement() {
  // @@protoc_insertion_point(destructor:ProfileMetricListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileMetricListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete correlationid_;
  if (this != internal_default_instance()) delete elementvalue_;
}

void ProfileMetricListElement::ArenaDtor(void* object) {
  ProfileMetricListElement* _this = reinterpret_cast< ProfileMetricListElement* >(object);
  (void)_this;
}
void ProfileMetricListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileMetricListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileMetricListElement& ProfileMetricListElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileMetricListElement_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfileMetricListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileMetricListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(correlationid_ != nullptr);
      correlationid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(elementvalue_ != nullptr);
      elementvalue_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileMetricListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProfileMetricValue CorrelationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_correlationid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProfileMetricValue ElementValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_elementvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileMetricListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileMetricListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileMetricValue CorrelationId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::correlationid(this), target, stream);
  }

  // required .ProfileMetricValue ElementValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::elementvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileMetricListElement)
  return target;
}

size_t ProfileMetricListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileMetricListElement)
  size_t total_size = 0;

  // required .ProfileMetricValue ElementValue = 2;
  if (_internal_has_elementvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elementvalue_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileMetricValue CorrelationId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *correlationid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileMetricListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfileMetricListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileMetricListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileMetricListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfileMetricListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfileMetricListElement)
    MergeFrom(*source);
  }
}

void ProfileMetricListElement::MergeFrom(const ProfileMetricListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileMetricListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_correlationid()->::ProfileMetricValue::MergeFrom(from._internal_correlationid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_elementvalue()->::ProfileMetricValue::MergeFrom(from._internal_elementvalue());
    }
  }
}

void ProfileMetricListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfileMetricListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileMetricListElement::CopyFrom(const ProfileMetricListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileMetricListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileMetricListElement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProfileMetricListElement::InternalSwap(ProfileMetricListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileMetricListElement, elementvalue_)
      + sizeof(ProfileMetricListElement::elementvalue_)
      - PROTOBUF_FIELD_OFFSET(ProfileMetricListElement, correlationid_)>(
          reinterpret_cast<char*>(&correlationid_),
          reinterpret_cast<char*>(&other->correlationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileMetricListElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileMetricResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileMetricResult>()._has_bits_);
  static void set_has_nameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfileMetricValue& metricvalue(const ProfileMetricResult* msg);
  static void set_has_metricvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::ProfileMetricValue&
ProfileMetricResult::_Internal::metricvalue(const ProfileMetricResult* msg) {
  return *msg->metricvalue_;
}
ProfileMetricResult::ProfileMetricResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metricvaluelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfileMetricResult)
}
ProfileMetricResult::ProfileMetricResult(const ProfileMetricResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metricvaluelist_(from.metricvaluelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metricvalue()) {
    metricvalue_ = new ::ProfileMetricValue(*from.metricvalue_);
  } else {
    metricvalue_ = nullptr;
  }
  nameid_ = from.nameid_;
  // @@protoc_insertion_point(copy_constructor:ProfileMetricResult)
}

void ProfileMetricResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileMetricResult_ProfilerReport_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metricvalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nameid_) -
      reinterpret_cast<char*>(&metricvalue_)) + sizeof(nameid_));
}

ProfileMetricResult::~ProfileMetricResult() {
  // @@protoc_insertion_point(destructor:ProfileMetricResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileMetricResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metricvalue_;
}

void ProfileMetricResult::ArenaDtor(void* object) {
  ProfileMetricResult* _this = reinterpret_cast< ProfileMetricResult* >(object);
  (void)_this;
}
void ProfileMetricResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileMetricResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileMetricResult& ProfileMetricResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileMetricResult_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfileMetricResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileMetricResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metricvaluelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metricvalue_ != nullptr);
    metricvalue_->Clear();
  }
  nameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileMetricResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 NameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nameid(&has_bits);
          nameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfileMetricValue MetricValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metricvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfileMetricListElement MetricValueList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metricvaluelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileMetricResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileMetricResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 NameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nameid(), target);
  }

  // optional .ProfileMetricValue MetricValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metricvalue(this), target, stream);
  }

  // repeated .ProfileMetricListElement MetricValueList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metricvaluelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_metricvaluelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileMetricResult)
  return target;
}

size_t ProfileMetricResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileMetricResult)
  size_t total_size = 0;

  // required uint32 NameId = 1;
  if (_internal_has_nameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileMetricListElement MetricValueList = 3;
  total_size += 1UL * this->_internal_metricvaluelist_size();
  for (const auto& msg : this->metricvaluelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ProfileMetricValue MetricValue = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metricvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileMetricResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfileMetricResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileMetricResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileMetricResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfileMetricResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfileMetricResult)
    MergeFrom(*source);
  }
}

void ProfileMetricResult::MergeFrom(const ProfileMetricResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileMetricResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metricvaluelist_.MergeFrom(from.metricvaluelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metricvalue()->::ProfileMetricValue::MergeFrom(from._internal_metricvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      nameid_ = from.nameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileMetricResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfileMetricResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileMetricResult::CopyFrom(const ProfileMetricResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileMetricResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileMetricResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metricvaluelist_)) return false;
  return true;
}

void ProfileMetricResult::InternalSwap(ProfileMetricResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metricvaluelist_.InternalSwap(&other->metricvaluelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileMetricResult, nameid_)
      + sizeof(ProfileMetricResult::nameid_)
      - PROTOBUF_FIELD_OFFSET(ProfileMetricResult, metricvalue_)>(
          reinterpret_cast<char*>(&metricvalue_),
          reinterpret_cast<char*>(&other->metricvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileMetricResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommentID::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentID>()._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CommentID::CommentID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommentID)
}
CommentID::CommentID(const CommentID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sectionid()) {
    sectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sectionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CommentID)
}

void CommentID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommentID_ProfilerReport_2eproto.base);
  sectionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommentID::~CommentID() {
  // @@protoc_insertion_point(destructor:CommentID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sectionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommentID::ArenaDtor(void* object) {
  CommentID* _this = reinterpret_cast< CommentID* >(object);
  (void)_this;
}
void CommentID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommentID& CommentID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommentID_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void CommentID::Clear() {
// @@protoc_insertion_point(message_clear_start:CommentID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sectionid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string SectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sectionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommentID.SectionID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommentID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string SectionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sectionid().data(), static_cast<int>(this->_internal_sectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommentID.SectionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommentID)
  return target;
}

size_t CommentID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommentID)
  size_t total_size = 0;

  // required string SectionID = 1;
  if (_internal_has_sectionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sectionid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommentID)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommentID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommentID)
    MergeFrom(*source);
  }
}

void CommentID::MergeFrom(const CommentID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommentID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sectionid()) {
    _internal_set_sectionid(from._internal_sectionid());
  }
}

void CommentID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommentID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentID::CopyFrom(const CommentID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommentID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommentID::InternalSwap(CommentID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sectionid_.Swap(&other->sectionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Comment::_Internal {
 public:
  using HasBits = decltype(std::declval<Comment>()._has_bits_);
  static const ::CommentID& id(const Comment* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::CommentID&
Comment::_Internal::id(const Comment* msg) {
  return *msg->id_;
}
Comment::Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Comment)
}
Comment::Comment(const Comment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displayname()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::CommentID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Comment)
}

void Comment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Comment_ProfilerReport_2eproto.base);
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:Comment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Comment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void Comment::ArenaDtor(void* object) {
  Comment* _this = reinterpret_cast< Comment* >(object);
  (void)_this;
}
void Comment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Comment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Comment& Comment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Comment_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:Comment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Comment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CommentID ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string DisplayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Comment.DisplayName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Comment.Text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Comment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Comment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CommentID ID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // required string DisplayName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Comment.DisplayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  // required string Text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Comment.Text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Comment)
  return target;
}

size_t Comment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Comment)
  size_t total_size = 0;

  if (_internal_has_displayname()) {
    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  if (_internal_has_text()) {
    // required string Text = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_id()) {
    // required .CommentID ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return total_size;
}
size_t Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Comment)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());

    // required string Text = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required .CommentID ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Comment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Comment)
  GOOGLE_DCHECK_NE(&from, this);
  const Comment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Comment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Comment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Comment)
    MergeFrom(*source);
  }
}

void Comment::MergeFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Comment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id()->::CommentID::MergeFrom(from._internal_id());
    }
  }
}

void Comment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void Comment::InternalSwap(Comment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Comment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileSeriesInfoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileSeriesInfoMessage>()._has_bits_);
  static void set_has_seriesid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_combinationstr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ProfileSeriesInfoMessage::ProfileSeriesInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfileSeriesInfoMessage)
}
ProfileSeriesInfoMessage::ProfileSeriesInfoMessage(const ProfileSeriesInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  combinationstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_combinationstr()) {
    combinationstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_combinationstr(), 
      GetArena());
  }
  seriesid_ = from.seriesid_;
  // @@protoc_insertion_point(copy_constructor:ProfileSeriesInfoMessage)
}

void ProfileSeriesInfoMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto.base);
  combinationstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seriesid_ = 0u;
}

ProfileSeriesInfoMessage::~ProfileSeriesInfoMessage() {
  // @@protoc_insertion_point(destructor:ProfileSeriesInfoMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileSeriesInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  combinationstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileSeriesInfoMessage::ArenaDtor(void* object) {
  ProfileSeriesInfoMessage* _this = reinterpret_cast< ProfileSeriesInfoMessage* >(object);
  (void)_this;
}
void ProfileSeriesInfoMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileSeriesInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileSeriesInfoMessage& ProfileSeriesInfoMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfileSeriesInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileSeriesInfoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    combinationstr_.ClearNonDefaultToEmpty();
  }
  seriesid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileSeriesInfoMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 SeriesID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seriesid(&has_bits);
          seriesid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string CombinationStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_combinationstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileSeriesInfoMessage.CombinationStr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileSeriesInfoMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileSeriesInfoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 SeriesID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seriesid(), target);
  }

  // optional string CombinationStr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_combinationstr().data(), static_cast<int>(this->_internal_combinationstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileSeriesInfoMessage.CombinationStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_combinationstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileSeriesInfoMessage)
  return target;
}

size_t ProfileSeriesInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileSeriesInfoMessage)
  size_t total_size = 0;

  // required uint32 SeriesID = 1;
  if (_internal_has_seriesid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seriesid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string CombinationStr = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combinationstr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileSeriesInfoMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfileSeriesInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSeriesInfoMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileSeriesInfoMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfileSeriesInfoMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfileSeriesInfoMessage)
    MergeFrom(*source);
  }
}

void ProfileSeriesInfoMessage::MergeFrom(const ProfileSeriesInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileSeriesInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_combinationstr(from._internal_combinationstr());
    }
    if (cached_has_bits & 0x00000002u) {
      seriesid_ = from.seriesid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileSeriesInfoMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfileSeriesInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSeriesInfoMessage::CopyFrom(const ProfileSeriesInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileSeriesInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSeriesInfoMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProfileSeriesInfoMessage::InternalSwap(ProfileSeriesInfoMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  combinationstr_.Swap(&other->combinationstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(seriesid_, other->seriesid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileSeriesInfoMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileResult>()._has_bits_);
  static void set_has_threadid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_apicallid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_programhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_kernelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_kernelmangledname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernelfunctionname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kerneldemangledname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_workdimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::Uint64x3& globalworkoffset(const ProfileResult* msg);
  static void set_has_globalworkoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Uint64x3& globalworksize(const ProfileResult* msg);
  static void set_has_globalworksize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Uint64x3& localworksize(const ProfileResult* msg);
  static void set_has_localworksize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::SourceData& source(const ProfileResult* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_api(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unsupporteddevice(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::NvtxState& nvtx(const ProfileResult* msg);
  static void set_has_nvtx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_streamid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::ProfileSeriesInfoMessage& seriesinfo(const ProfileResult* msg);
  static void set_has_seriesinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00007cf7) ^ 0x00007cf7) != 0;
  }
};

const ::Uint64x3&
ProfileResult::_Internal::globalworkoffset(const ProfileResult* msg) {
  return *msg->globalworkoffset_;
}
const ::Uint64x3&
ProfileResult::_Internal::globalworksize(const ProfileResult* msg) {
  return *msg->globalworksize_;
}
const ::Uint64x3&
ProfileResult::_Internal::localworksize(const ProfileResult* msg) {
  return *msg->localworksize_;
}
const ::SourceData&
ProfileResult::_Internal::source(const ProfileResult* msg) {
  return *msg->source_;
}
const ::NvtxState&
ProfileResult::_Internal::nvtx(const ProfileResult* msg) {
  return *msg->nvtx_;
}
const ::ProfileSeriesInfoMessage&
ProfileResult::_Internal::seriesinfo(const ProfileResult* msg) {
  return *msg->seriesinfo_;
}
void ProfileResult::clear_globalworkoffset() {
  if (globalworkoffset_ != nullptr) globalworkoffset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ProfileResult::clear_globalworksize() {
  if (globalworksize_ != nullptr) globalworksize_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ProfileResult::clear_localworksize() {
  if (localworksize_ != nullptr) localworksize_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ProfileResult::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ProfileResult::clear_sections() {
  sections_.Clear();
}
void ProfileResult::clear_ruleresults() {
  ruleresults_.Clear();
}
void ProfileResult::clear_nvtx() {
  if (nvtx_ != nullptr) nvtx_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ProfileResult::ProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metricresults_(arena),
  sections_(arena),
  sectioncomments_(arena),
  ruleresults_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfileResult)
}
ProfileResult::ProfileResult(const ProfileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metricresults_(from.metricresults_),
      sections_(from.sections_),
      sectioncomments_(from.sectioncomments_),
      ruleresults_(from.ruleresults_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kernelmangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelmangledname()) {
    kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelmangledname(), 
      GetArena());
  }
  kernelfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kernelfunctionname()) {
    kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelfunctionname(), 
      GetArena());
  }
  kerneldemangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kerneldemangledname()) {
    kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kerneldemangledname(), 
      GetArena());
  }
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comments()) {
    comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comments(), 
      GetArena());
  }
  if (from._internal_has_globalworkoffset()) {
    globalworkoffset_ = new ::Uint64x3(*from.globalworkoffset_);
  } else {
    globalworkoffset_ = nullptr;
  }
  if (from._internal_has_globalworksize()) {
    globalworksize_ = new ::Uint64x3(*from.globalworksize_);
  } else {
    globalworksize_ = nullptr;
  }
  if (from._internal_has_localworksize()) {
    localworksize_ = new ::Uint64x3(*from.localworksize_);
  } else {
    localworksize_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::SourceData(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_nvtx()) {
    nvtx_ = new ::NvtxState(*from.nvtx_);
  } else {
    nvtx_ = nullptr;
  }
  if (from._internal_has_seriesinfo()) {
    seriesinfo_ = new ::ProfileSeriesInfoMessage(*from.seriesinfo_);
  } else {
    seriesinfo_ = nullptr;
  }
  ::memcpy(&apicallid_, &from.apicallid_,
    static_cast<size_t>(reinterpret_cast<char*>(&streamid_) -
    reinterpret_cast<char*>(&apicallid_)) + sizeof(streamid_));
  // @@protoc_insertion_point(copy_constructor:ProfileResult)
}

void ProfileResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileResult_ProfilerReport_2eproto.base);
  kernelmangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kerneldemangledname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&globalworkoffset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&streamid_) -
      reinterpret_cast<char*>(&globalworkoffset_)) + sizeof(streamid_));
}

ProfileResult::~ProfileResult() {
  // @@protoc_insertion_point(destructor:ProfileResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kernelmangledname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelfunctionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kerneldemangledname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete globalworkoffset_;
  if (this != internal_default_instance()) delete globalworksize_;
  if (this != internal_default_instance()) delete localworksize_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete nvtx_;
  if (this != internal_default_instance()) delete seriesinfo_;
}

void ProfileResult::ArenaDtor(void* object) {
  ProfileResult* _this = reinterpret_cast< ProfileResult* >(object);
  (void)_this;
}
void ProfileResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileResult& ProfileResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileResult_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProfileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metricresults_.Clear();
  sections_.Clear();
  sectioncomments_.Clear();
  ruleresults_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      kernelmangledname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      kernelfunctionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      kerneldemangledname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      comments_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(globalworkoffset_ != nullptr);
      globalworkoffset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(globalworksize_ != nullptr);
      globalworksize_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(localworksize_ != nullptr);
      localworksize_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(nvtx_ != nullptr);
      nvtx_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(seriesinfo_ != nullptr);
      seriesinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&apicallid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creationtime_) -
        reinterpret_cast<char*>(&apicallid_)) + sizeof(creationtime_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&api_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streamid_) -
        reinterpret_cast<char*>(&api_)) + sizeof(streamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ThreadID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threadid(&has_bits);
          threadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 APICallID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_apicallid(&has_bits);
          apicallid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ProgramHandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_programhandle(&has_bits);
          programhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 KernelID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kernelid(&has_bits);
          kernelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelMangledName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_kernelmangledname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileResult.KernelMangledName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelFunctionName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_kernelfunctionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileResult.KernelFunctionName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string KernelDemangledName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_kerneldemangledname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileResult.KernelDemangledName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 WorkDimensions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_workdimensions(&has_bits);
          workdimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 GlobalWorkOffset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalworkoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 GlobalWorkSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalworksize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Uint64x3 LocalWorkSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_localworksize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Comments = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_comments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileResult.Comments");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfileMetricResult MetricResults = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metricresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 CreationTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_creationtime(&has_bits);
          creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SourceData Source = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .APIType Api = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::APIType_IsValid(val))) {
            _internal_set_api(static_cast<::APIType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerSection Sections = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Comment SectionComments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sectioncomments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RuleResult RuleResults = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ruleresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool UnsupportedDevice = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_unsupporteddevice(&has_bits);
          unsupporteddevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NvtxState Nvtx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_nvtx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ContextID = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_contextid(&has_bits);
          contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 StreamID = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_streamid(&has_bits);
          streamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfileSeriesInfoMessage SeriesInfo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_seriesinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ThreadID = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_threadid(), target);
  }

  // required uint64 APICallID = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_apicallid(), target);
  }

  // required uint64 ProgramHandle = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_programhandle(), target);
  }

  // required uint64 KernelID = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_kernelid(), target);
  }

  // required string KernelMangledName = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelmangledname().data(), static_cast<int>(this->_internal_kernelmangledname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileResult.KernelMangledName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_kernelmangledname(), target);
  }

  // required string KernelFunctionName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kernelfunctionname().data(), static_cast<int>(this->_internal_kernelfunctionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileResult.KernelFunctionName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_kernelfunctionname(), target);
  }

  // required string KernelDemangledName = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kerneldemangledname().data(), static_cast<int>(this->_internal_kerneldemangledname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileResult.KernelDemangledName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_kerneldemangledname(), target);
  }

  // required uint32 WorkDimensions = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_workdimensions(), target);
  }

  // required .Uint64x3 GlobalWorkOffset = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::globalworkoffset(this), target, stream);
  }

  // required .Uint64x3 GlobalWorkSize = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::globalworksize(this), target, stream);
  }

  // required .Uint64x3 LocalWorkSize = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::localworksize(this), target, stream);
  }

  // optional string Comments = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comments().data(), static_cast<int>(this->_internal_comments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileResult.Comments");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_comments(), target);
  }

  // repeated .ProfileMetricResult MetricResults = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metricresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_metricresults(i), target, stream);
  }

  // optional uint64 CreationTime = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_creationtime(), target);
  }

  // required .SourceData Source = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::source(this), target, stream);
  }

  // optional .APIType Api = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_api(), target);
  }

  // repeated .ProfilerSection Sections = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_sections(i), target, stream);
  }

  // repeated .Comment SectionComments = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sectioncomments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_sectioncomments(i), target, stream);
  }

  // repeated .RuleResult RuleResults = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ruleresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_ruleresults(i), target, stream);
  }

  // optional bool UnsupportedDevice = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_unsupporteddevice(), target);
  }

  // optional .NvtxState Nvtx = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::nvtx(this), target, stream);
  }

  // optional uint32 ContextID = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_contextid(), target);
  }

  // optional uint32 StreamID = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_streamid(), target);
  }

  // optional .ProfileSeriesInfoMessage SeriesInfo = 24;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::seriesinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileResult)
  return target;
}

size_t ProfileResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProfileResult)
  size_t total_size = 0;

  if (_internal_has_kernelmangledname()) {
    // required string KernelMangledName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelmangledname());
  }

  if (_internal_has_kernelfunctionname()) {
    // required string KernelFunctionName = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelfunctionname());
  }

  if (_internal_has_kerneldemangledname()) {
    // required string KernelDemangledName = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kerneldemangledname());
  }

  if (_internal_has_globalworkoffset()) {
    // required .Uint64x3 GlobalWorkOffset = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworkoffset_);
  }

  if (_internal_has_globalworksize()) {
    // required .Uint64x3 GlobalWorkSize = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworksize_);
  }

  if (_internal_has_localworksize()) {
    // required .Uint64x3 LocalWorkSize = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localworksize_);
  }

  if (_internal_has_source()) {
    // required .SourceData Source = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  if (_internal_has_apicallid()) {
    // required uint64 APICallID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_apicallid());
  }

  if (_internal_has_programhandle()) {
    // required uint64 ProgramHandle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_programhandle());
  }

  if (_internal_has_kernelid()) {
    // required uint64 KernelID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kernelid());
  }

  if (_internal_has_threadid()) {
    // required uint32 ThreadID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threadid());
  }

  if (_internal_has_workdimensions()) {
    // required uint32 WorkDimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_workdimensions());
  }

  return total_size;
}
size_t ProfileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007cf7) ^ 0x00007cf7) == 0) {  // All required fields are present.
    // required string KernelMangledName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelmangledname());

    // required string KernelFunctionName = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelfunctionname());

    // required string KernelDemangledName = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kerneldemangledname());

    // required .Uint64x3 GlobalWorkOffset = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworkoffset_);

    // required .Uint64x3 GlobalWorkSize = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalworksize_);

    // required .Uint64x3 LocalWorkSize = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localworksize_);

    // required .SourceData Source = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);

    // required uint64 APICallID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_apicallid());

    // required uint64 ProgramHandle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_programhandle());

    // required uint64 KernelID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kernelid());

    // required uint32 ThreadID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threadid());

    // required uint32 WorkDimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_workdimensions());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileMetricResult MetricResults = 13;
  total_size += 1UL * this->_internal_metricresults_size();
  for (const auto& msg : this->metricresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfilerSection Sections = 17;
  total_size += 2UL * this->_internal_sections_size();
  for (const auto& msg : this->sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Comment SectionComments = 18;
  total_size += 2UL * this->_internal_sectioncomments_size();
  for (const auto& msg : this->sectioncomments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RuleResult RuleResults = 19;
  total_size += 2UL * this->_internal_ruleresults_size();
  for (const auto& msg : this->ruleresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string Comments = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comments());
  }

  if (cached_has_bits & 0x00000300u) {
    // optional .NvtxState Nvtx = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nvtx_);
    }

    // optional .ProfileSeriesInfoMessage SeriesInfo = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *seriesinfo_);
    }

  }
  // optional uint64 CreationTime = 14;
  if (cached_has_bits & 0x00008000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_creationtime());
  }

  if (cached_has_bits & 0x000f0000u) {
    // optional .APIType Api = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_api());
    }

    // optional bool UnsupportedDevice = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 ContextID = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contextid());
    }

    // optional uint32 StreamID = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_streamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfileResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfileResult)
    MergeFrom(*source);
  }
}

void ProfileResult::MergeFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metricresults_.MergeFrom(from.metricresults_);
  sections_.MergeFrom(from.sections_);
  sectioncomments_.MergeFrom(from.sectioncomments_);
  ruleresults_.MergeFrom(from.ruleresults_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kernelmangledname(from._internal_kernelmangledname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_kernelfunctionname(from._internal_kernelfunctionname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_kerneldemangledname(from._internal_kerneldemangledname());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_comments(from._internal_comments());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_globalworkoffset()->::Uint64x3::MergeFrom(from._internal_globalworkoffset());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_globalworksize()->::Uint64x3::MergeFrom(from._internal_globalworksize());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_localworksize()->::Uint64x3::MergeFrom(from._internal_localworksize());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_source()->::SourceData::MergeFrom(from._internal_source());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_nvtx()->::NvtxState::MergeFrom(from._internal_nvtx());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_seriesinfo()->::ProfileSeriesInfoMessage::MergeFrom(from._internal_seriesinfo());
    }
    if (cached_has_bits & 0x00000400u) {
      apicallid_ = from.apicallid_;
    }
    if (cached_has_bits & 0x00000800u) {
      programhandle_ = from.programhandle_;
    }
    if (cached_has_bits & 0x00001000u) {
      kernelid_ = from.kernelid_;
    }
    if (cached_has_bits & 0x00002000u) {
      threadid_ = from.threadid_;
    }
    if (cached_has_bits & 0x00004000u) {
      workdimensions_ = from.workdimensions_;
    }
    if (cached_has_bits & 0x00008000u) {
      creationtime_ = from.creationtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      api_ = from.api_;
    }
    if (cached_has_bits & 0x00020000u) {
      unsupporteddevice_ = from.unsupporteddevice_;
    }
    if (cached_has_bits & 0x00040000u) {
      contextid_ = from.contextid_;
    }
    if (cached_has_bits & 0x00080000u) {
      streamid_ = from.streamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResult::CopyFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metricresults_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sections_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sectioncomments_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ruleresults_)) return false;
  if (_internal_has_nvtx()) {
    if (!nvtx_->IsInitialized()) return false;
  }
  if (_internal_has_seriesinfo()) {
    if (!seriesinfo_->IsInitialized()) return false;
  }
  return true;
}

void ProfileResult::InternalSwap(ProfileResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metricresults_.InternalSwap(&other->metricresults_);
  sections_.InternalSwap(&other->sections_);
  sectioncomments_.InternalSwap(&other->sectioncomments_);
  ruleresults_.InternalSwap(&other->ruleresults_);
  kernelmangledname_.Swap(&other->kernelmangledname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelfunctionname_.Swap(&other->kernelfunctionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kerneldemangledname_.Swap(&other->kerneldemangledname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comments_.Swap(&other->comments_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileResult, streamid_)
      + sizeof(ProfileResult::streamid_)
      - PROTOBUF_FIELD_OFFSET(ProfileResult, globalworkoffset_)>(
          reinterpret_cast<char*>(&globalworkoffset_),
          reinterpret_cast<char*>(&other->globalworkoffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessInfo>()._has_bits_);
  static void set_has_processid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ProcessInfo::ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_processname()) {
    processname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_processname(), 
      GetArena());
  }
  processid_ = from.processid_;
  // @@protoc_insertion_point(copy_constructor:ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessInfo_ProfilerReport_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processid_ = 0u;
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:ProcessInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessInfo::ArenaDtor(void* object) {
  ProcessInfo* _this = reinterpret_cast< ProcessInfo* >(object);
  (void)_this;
}
void ProcessInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessInfo& ProcessInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessInfo_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      processname_.ClearNonDefaultToEmpty();
    }
  }
  processid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ProcessID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_processid(&has_bits);
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessInfo.Hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ProcessName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_processname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessInfo.ProcessName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ProcessID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_processid(), target);
  }

  // optional string Hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProcessInfo.Hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // optional string ProcessName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProcessInfo.ProcessName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_processname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessInfo)
  size_t total_size = 0;

  // required uint32 ProcessID = 1;
  if (_internal_has_processid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string Hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string ProcessName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_processname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessInfo)
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_processname(from._internal_processname());
    }
    if (cached_has_bits & 0x00000004u) {
      processid_ = from.processid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  processname_.Swap(&other->processname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(processid_, other->processid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockHeader>()._has_bits_);
  static void set_has_numsources(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numresults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ReportSessionDetails& sessiondetails(const BlockHeader* msg);
  static void set_has_sessiondetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerStringTable& stringtable(const BlockHeader* msg);
  static void set_has_stringtable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payloadsize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ProcessInfo& process(const BlockHeader* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ReportSessionDetails&
BlockHeader::_Internal::sessiondetails(const BlockHeader* msg) {
  return *msg->sessiondetails_;
}
const ::ProfilerStringTable&
BlockHeader::_Internal::stringtable(const BlockHeader* msg) {
  return *msg->stringtable_;
}
const ::ProcessInfo&
BlockHeader::_Internal::process(const BlockHeader* msg) {
  return *msg->process_;
}
void BlockHeader::clear_stringtable() {
  if (stringtable_ != nullptr) stringtable_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sessiondetails()) {
    sessiondetails_ = new ::ReportSessionDetails(*from.sessiondetails_);
  } else {
    sessiondetails_ = nullptr;
  }
  if (from._internal_has_stringtable()) {
    stringtable_ = new ::ProfilerStringTable(*from.stringtable_);
  } else {
    stringtable_ = nullptr;
  }
  if (from._internal_has_process()) {
    process_ = new ::ProcessInfo(*from.process_);
  } else {
    process_ = nullptr;
  }
  ::memcpy(&numsources_, &from.numsources_,
    static_cast<size_t>(reinterpret_cast<char*>(&payloadsize_) -
    reinterpret_cast<char*>(&numsources_)) + sizeof(payloadsize_));
  // @@protoc_insertion_point(copy_constructor:BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_ProfilerReport_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sessiondetails_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&payloadsize_) -
      reinterpret_cast<char*>(&sessiondetails_)) + sizeof(payloadsize_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sessiondetails_;
  if (this != internal_default_instance()) delete stringtable_;
  if (this != internal_default_instance()) delete process_;
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sessiondetails_ != nullptr);
      sessiondetails_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stringtable_ != nullptr);
      stringtable_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&numsources_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&payloadsize_) -
        reinterpret_cast<char*>(&numsources_)) + sizeof(payloadsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 NumSources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_numsources(&has_bits);
          numsources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 NumResults = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_numresults(&has_bits);
          numresults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReportSessionDetails SessionDetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessiondetails(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerStringTable StringTable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 PayloadSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_payloadsize(&has_bits);
          payloadsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProcessInfo Process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 NumSources = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_numsources(), target);
  }

  // optional uint32 NumResults = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numresults(), target);
  }

  // optional .ReportSessionDetails SessionDetails = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sessiondetails(this), target, stream);
  }

  // optional .ProfilerStringTable StringTable = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stringtable(this), target, stream);
  }

  // optional uint32 PayloadSize = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_payloadsize(), target);
  }

  // optional .ProcessInfo Process = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ReportSessionDetails SessionDetails = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sessiondetails_);
    }

    // optional .ProfilerStringTable StringTable = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stringtable_);
    }

    // optional .ProcessInfo Process = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

    // optional uint32 NumSources = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numsources());
    }

    // optional uint32 NumResults = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numresults());
    }

    // optional uint32 PayloadSize = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_payloadsize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sessiondetails()->::ReportSessionDetails::MergeFrom(from._internal_sessiondetails());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stringtable()->::ProfilerStringTable::MergeFrom(from._internal_stringtable());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process()->::ProcessInfo::MergeFrom(from._internal_process());
    }
    if (cached_has_bits & 0x00000008u) {
      numsources_ = from.numsources_;
    }
    if (cached_has_bits & 0x00000010u) {
      numresults_ = from.numresults_;
    }
    if (cached_has_bits & 0x00000020u) {
      payloadsize_ = from.payloadsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  if (_internal_has_sessiondetails()) {
    if (!sessiondetails_->IsInitialized()) return false;
  }
  if (_internal_has_process()) {
    if (!process_->IsInitialized()) return false;
  }
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader, payloadsize_)
      + sizeof(BlockHeader::payloadsize_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader, sessiondetails_)>(
          reinterpret_cast<char*>(&sessiondetails_),
          reinterpret_cast<char*>(&other->sessiondetails_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<FileHeader>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FileHeader::FileHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FileHeader)
}
FileHeader::FileHeader(const FileHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:FileHeader)
}

void FileHeader::SharedCtor() {
  version_ = 0u;
}

FileHeader::~FileHeader() {
  // @@protoc_insertion_point(destructor:FileHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileHeader::ArenaDtor(void* object) {
  FileHeader* _this = reinterpret_cast< FileHeader* >(object);
  (void)_this;
}
void FileHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileHeader& FileHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileHeader_ProfilerReport_2eproto.base);
  return *internal_default_instance();
}


void FileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:FileHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileHeader)
  return target;
}

size_t FileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileHeader)
  size_t total_size = 0;

  // required uint32 Version = 1;
  if (_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const FileHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileHeader)
    MergeFrom(*source);
  }
}

void FileHeader::MergeFrom(const FileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void FileHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileHeader::CopyFrom(const FileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileHeader::InternalSwap(FileHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceProperty* Arena::CreateMaybeMessage< ::DeviceProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceProperties* Arena::CreateMaybeMessage< ::DeviceProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceAttribute* Arena::CreateMaybeMessage< ::DeviceAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceAttributes* Arena::CreateMaybeMessage< ::DeviceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::SystemInfo* Arena::CreateMaybeMessage< ::SystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::VersionInfo* Arena::CreateMaybeMessage< ::VersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FilterOptions* Arena::CreateMaybeMessage< ::FilterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FilterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::SamplingOptions* Arena::CreateMaybeMessage< ::SamplingOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SamplingOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::OtherOptions* Arena::CreateMaybeMessage< ::OtherOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OtherOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSettings* Arena::CreateMaybeMessage< ::ProfilerSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportSessionDetails* Arena::CreateMaybeMessage< ::ReportSessionDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportSessionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileMetricValue* Arena::CreateMaybeMessage< ::ProfileMetricValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileMetricValue >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileMetricListElement* Arena::CreateMaybeMessage< ::ProfileMetricListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileMetricListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileMetricResult* Arena::CreateMaybeMessage< ::ProfileMetricResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileMetricResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CommentID* Arena::CreateMaybeMessage< ::CommentID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommentID >(arena);
}
template<> PROTOBUF_NOINLINE ::Comment* Arena::CreateMaybeMessage< ::Comment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Comment >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileSeriesInfoMessage* Arena::CreateMaybeMessage< ::ProfileSeriesInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileSeriesInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileResult* Arena::CreateMaybeMessage< ::ProfileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessInfo* Arena::CreateMaybeMessage< ::ProcessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockHeader* Arena::CreateMaybeMessage< ::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::FileHeader* Arena::CreateMaybeMessage< ::FileHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
