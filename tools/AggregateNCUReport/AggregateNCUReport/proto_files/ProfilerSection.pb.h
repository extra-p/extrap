// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerSection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProfilerSection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProfilerSection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProfilerMetricOptions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProfilerSection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerSection_2eproto;
class ProfilerSection;
class ProfilerSectionDefaultTypeInternal;
extern ProfilerSectionDefaultTypeInternal _ProfilerSection_default_instance_;
class ProfilerSectionBarChart;
class ProfilerSectionBarChartDefaultTypeInternal;
extern ProfilerSectionBarChartDefaultTypeInternal _ProfilerSectionBarChart_default_instance_;
class ProfilerSectionBody;
class ProfilerSectionBodyDefaultTypeInternal;
extern ProfilerSectionBodyDefaultTypeInternal _ProfilerSectionBody_default_instance_;
class ProfilerSectionBodyItem;
class ProfilerSectionBodyItemDefaultTypeInternal;
extern ProfilerSectionBodyItemDefaultTypeInternal _ProfilerSectionBodyItem_default_instance_;
class ProfilerSectionChartAxisRange;
class ProfilerSectionChartAxisRangeDefaultTypeInternal;
extern ProfilerSectionChartAxisRangeDefaultTypeInternal _ProfilerSectionChartAxisRange_default_instance_;
class ProfilerSectionChartCategoryAxis;
class ProfilerSectionChartCategoryAxisDefaultTypeInternal;
extern ProfilerSectionChartCategoryAxisDefaultTypeInternal _ProfilerSectionChartCategoryAxis_default_instance_;
class ProfilerSectionChartHistogramAxis;
class ProfilerSectionChartHistogramAxisDefaultTypeInternal;
extern ProfilerSectionChartHistogramAxisDefaultTypeInternal _ProfilerSectionChartHistogramAxis_default_instance_;
class ProfilerSectionChartValueAxis;
class ProfilerSectionChartValueAxisDefaultTypeInternal;
extern ProfilerSectionChartValueAxisDefaultTypeInternal _ProfilerSectionChartValueAxis_default_instance_;
class ProfilerSectionGfxMetricsWidget;
class ProfilerSectionGfxMetricsWidgetDefaultTypeInternal;
extern ProfilerSectionGfxMetricsWidgetDefaultTypeInternal _ProfilerSectionGfxMetricsWidget_default_instance_;
class ProfilerSectionHeader;
class ProfilerSectionHeaderDefaultTypeInternal;
extern ProfilerSectionHeaderDefaultTypeInternal _ProfilerSectionHeader_default_instance_;
class ProfilerSectionHighlightX;
class ProfilerSectionHighlightXDefaultTypeInternal;
extern ProfilerSectionHighlightXDefaultTypeInternal _ProfilerSectionHighlightX_default_instance_;
class ProfilerSectionHistogramChart;
class ProfilerSectionHistogramChartDefaultTypeInternal;
extern ProfilerSectionHistogramChartDefaultTypeInternal _ProfilerSectionHistogramChart_default_instance_;
class ProfilerSectionLineChart;
class ProfilerSectionLineChartDefaultTypeInternal;
extern ProfilerSectionLineChartDefaultTypeInternal _ProfilerSectionLineChart_default_instance_;
class ProfilerSectionMemoryChart;
class ProfilerSectionMemoryChartDefaultTypeInternal;
extern ProfilerSectionMemoryChartDefaultTypeInternal _ProfilerSectionMemoryChart_default_instance_;
class ProfilerSectionMemoryDeviceMemoryTable;
class ProfilerSectionMemoryDeviceMemoryTableDefaultTypeInternal;
extern ProfilerSectionMemoryDeviceMemoryTableDefaultTypeInternal _ProfilerSectionMemoryDeviceMemoryTable_default_instance_;
class ProfilerSectionMemoryFirstLevelCacheTable;
class ProfilerSectionMemoryFirstLevelCacheTableDefaultTypeInternal;
extern ProfilerSectionMemoryFirstLevelCacheTableDefaultTypeInternal _ProfilerSectionMemoryFirstLevelCacheTable_default_instance_;
class ProfilerSectionMemorySecondLevelCacheTable;
class ProfilerSectionMemorySecondLevelCacheTableDefaultTypeInternal;
extern ProfilerSectionMemorySecondLevelCacheTableDefaultTypeInternal _ProfilerSectionMemorySecondLevelCacheTable_default_instance_;
class ProfilerSectionMemorySharedTable;
class ProfilerSectionMemorySharedTableDefaultTypeInternal;
extern ProfilerSectionMemorySharedTableDefaultTypeInternal _ProfilerSectionMemorySharedTable_default_instance_;
class ProfilerSectionMetric;
class ProfilerSectionMetricDefaultTypeInternal;
extern ProfilerSectionMetricDefaultTypeInternal _ProfilerSectionMetric_default_instance_;
class ProfilerSectionMetricOption;
class ProfilerSectionMetricOptionDefaultTypeInternal;
extern ProfilerSectionMetricOptionDefaultTypeInternal _ProfilerSectionMetricOption_default_instance_;
class ProfilerSectionMetrics;
class ProfilerSectionMetricsDefaultTypeInternal;
extern ProfilerSectionMetricsDefaultTypeInternal _ProfilerSectionMetrics_default_instance_;
class ProfilerSectionTable;
class ProfilerSectionTableDefaultTypeInternal;
extern ProfilerSectionTableDefaultTypeInternal _ProfilerSectionTable_default_instance_;
class ProfilerSections;
class ProfilerSectionsDefaultTypeInternal;
extern ProfilerSectionsDefaultTypeInternal _ProfilerSections_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProfilerSection* Arena::CreateMaybeMessage<::ProfilerSection>(Arena*);
template<> ::ProfilerSectionBarChart* Arena::CreateMaybeMessage<::ProfilerSectionBarChart>(Arena*);
template<> ::ProfilerSectionBody* Arena::CreateMaybeMessage<::ProfilerSectionBody>(Arena*);
template<> ::ProfilerSectionBodyItem* Arena::CreateMaybeMessage<::ProfilerSectionBodyItem>(Arena*);
template<> ::ProfilerSectionChartAxisRange* Arena::CreateMaybeMessage<::ProfilerSectionChartAxisRange>(Arena*);
template<> ::ProfilerSectionChartCategoryAxis* Arena::CreateMaybeMessage<::ProfilerSectionChartCategoryAxis>(Arena*);
template<> ::ProfilerSectionChartHistogramAxis* Arena::CreateMaybeMessage<::ProfilerSectionChartHistogramAxis>(Arena*);
template<> ::ProfilerSectionChartValueAxis* Arena::CreateMaybeMessage<::ProfilerSectionChartValueAxis>(Arena*);
template<> ::ProfilerSectionGfxMetricsWidget* Arena::CreateMaybeMessage<::ProfilerSectionGfxMetricsWidget>(Arena*);
template<> ::ProfilerSectionHeader* Arena::CreateMaybeMessage<::ProfilerSectionHeader>(Arena*);
template<> ::ProfilerSectionHighlightX* Arena::CreateMaybeMessage<::ProfilerSectionHighlightX>(Arena*);
template<> ::ProfilerSectionHistogramChart* Arena::CreateMaybeMessage<::ProfilerSectionHistogramChart>(Arena*);
template<> ::ProfilerSectionLineChart* Arena::CreateMaybeMessage<::ProfilerSectionLineChart>(Arena*);
template<> ::ProfilerSectionMemoryChart* Arena::CreateMaybeMessage<::ProfilerSectionMemoryChart>(Arena*);
template<> ::ProfilerSectionMemoryDeviceMemoryTable* Arena::CreateMaybeMessage<::ProfilerSectionMemoryDeviceMemoryTable>(Arena*);
template<> ::ProfilerSectionMemoryFirstLevelCacheTable* Arena::CreateMaybeMessage<::ProfilerSectionMemoryFirstLevelCacheTable>(Arena*);
template<> ::ProfilerSectionMemorySecondLevelCacheTable* Arena::CreateMaybeMessage<::ProfilerSectionMemorySecondLevelCacheTable>(Arena*);
template<> ::ProfilerSectionMemorySharedTable* Arena::CreateMaybeMessage<::ProfilerSectionMemorySharedTable>(Arena*);
template<> ::ProfilerSectionMetric* Arena::CreateMaybeMessage<::ProfilerSectionMetric>(Arena*);
template<> ::ProfilerSectionMetricOption* Arena::CreateMaybeMessage<::ProfilerSectionMetricOption>(Arena*);
template<> ::ProfilerSectionMetrics* Arena::CreateMaybeMessage<::ProfilerSectionMetrics>(Arena*);
template<> ::ProfilerSectionTable* Arena::CreateMaybeMessage<::ProfilerSectionTable>(Arena*);
template<> ::ProfilerSections* Arena::CreateMaybeMessage<::ProfilerSections>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ProfilerSectionTable_LayoutOrder : int {
  ProfilerSectionTable_LayoutOrder_RowMajor = 0,
  ProfilerSectionTable_LayoutOrder_ColumnMajor = 1
};
bool ProfilerSectionTable_LayoutOrder_IsValid(int value);
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable_LayoutOrder_LayoutOrder_MIN = ProfilerSectionTable_LayoutOrder_RowMajor;
constexpr ProfilerSectionTable_LayoutOrder ProfilerSectionTable_LayoutOrder_LayoutOrder_MAX = ProfilerSectionTable_LayoutOrder_ColumnMajor;
constexpr int ProfilerSectionTable_LayoutOrder_LayoutOrder_ARRAYSIZE = ProfilerSectionTable_LayoutOrder_LayoutOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerSectionTable_LayoutOrder_descriptor();
template<typename T>
inline const std::string& ProfilerSectionTable_LayoutOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProfilerSectionTable_LayoutOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProfilerSectionTable_LayoutOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProfilerSectionTable_LayoutOrder_descriptor(), enum_t_value);
}
inline bool ProfilerSectionTable_LayoutOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfilerSectionTable_LayoutOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProfilerSectionTable_LayoutOrder>(
    ProfilerSectionTable_LayoutOrder_descriptor(), name, value);
}
enum ProfilerSectionBarChart_Directions : int {
  ProfilerSectionBarChart_Directions_Horizontal = 0,
  ProfilerSectionBarChart_Directions_Vertical = 1
};
bool ProfilerSectionBarChart_Directions_IsValid(int value);
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart_Directions_Directions_MIN = ProfilerSectionBarChart_Directions_Horizontal;
constexpr ProfilerSectionBarChart_Directions ProfilerSectionBarChart_Directions_Directions_MAX = ProfilerSectionBarChart_Directions_Vertical;
constexpr int ProfilerSectionBarChart_Directions_Directions_ARRAYSIZE = ProfilerSectionBarChart_Directions_Directions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerSectionBarChart_Directions_descriptor();
template<typename T>
inline const std::string& ProfilerSectionBarChart_Directions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProfilerSectionBarChart_Directions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProfilerSectionBarChart_Directions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProfilerSectionBarChart_Directions_descriptor(), enum_t_value);
}
inline bool ProfilerSectionBarChart_Directions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfilerSectionBarChart_Directions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProfilerSectionBarChart_Directions>(
    ProfilerSectionBarChart_Directions_descriptor(), name, value);
}
enum HWUnitType : int {
  Invalid = 0,
  Default = 1,
  Gpc = 2,
  Tpc = 3,
  Sm = 4,
  Smsp = 5,
  Tex = 6,
  Lts = 7,
  Ltc = 8,
  Fbpa = 9
};
bool HWUnitType_IsValid(int value);
constexpr HWUnitType HWUnitType_MIN = Invalid;
constexpr HWUnitType HWUnitType_MAX = Fbpa;
constexpr int HWUnitType_ARRAYSIZE = HWUnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWUnitType_descriptor();
template<typename T>
inline const std::string& HWUnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HWUnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HWUnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HWUnitType_descriptor(), enum_t_value);
}
inline bool HWUnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HWUnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HWUnitType>(
    HWUnitType_descriptor(), name, value);
}
// ===================================================================

class ProfilerSectionMetricOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMetricOption) */ {
 public:
  inline ProfilerSectionMetricOption() : ProfilerSectionMetricOption(nullptr) {}
  virtual ~ProfilerSectionMetricOption();

  ProfilerSectionMetricOption(const ProfilerSectionMetricOption& from);
  ProfilerSectionMetricOption(ProfilerSectionMetricOption&& from) noexcept
    : ProfilerSectionMetricOption() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMetricOption& operator=(const ProfilerSectionMetricOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMetricOption& operator=(ProfilerSectionMetricOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMetricOption& default_instance();

  static inline const ProfilerSectionMetricOption* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMetricOption*>(
               &_ProfilerSectionMetricOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilerSectionMetricOption& a, ProfilerSectionMetricOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMetricOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMetricOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMetricOption* New() const final {
    return CreateMaybeMessage<ProfilerSectionMetricOption>(nullptr);
  }

  ProfilerSectionMetricOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMetricOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMetricOption& from);
  void MergeFrom(const ProfilerSectionMetricOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMetricOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMetricOption";
  }
  protected:
  explicit ProfilerSectionMetricOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kFilterFieldNumber = 3,
  };
  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .MetricOptionFilter Filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::MetricOptionFilter& filter() const;
  ::MetricOptionFilter* release_filter();
  ::MetricOptionFilter* mutable_filter();
  void set_allocated_filter(::MetricOptionFilter* filter);
  private:
  const ::MetricOptionFilter& _internal_filter() const;
  ::MetricOptionFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::MetricOptionFilter* filter);
  ::MetricOptionFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:ProfilerSectionMetricOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::MetricOptionFilter* filter_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMetric) */ {
 public:
  inline ProfilerSectionMetric() : ProfilerSectionMetric(nullptr) {}
  virtual ~ProfilerSectionMetric();

  ProfilerSectionMetric(const ProfilerSectionMetric& from);
  ProfilerSectionMetric(ProfilerSectionMetric&& from) noexcept
    : ProfilerSectionMetric() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMetric& operator=(const ProfilerSectionMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMetric& operator=(ProfilerSectionMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMetric& default_instance();

  static inline const ProfilerSectionMetric* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMetric*>(
               &_ProfilerSectionMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfilerSectionMetric& a, ProfilerSectionMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMetric* New() const final {
    return CreateMaybeMessage<ProfilerSectionMetric>(nullptr);
  }

  ProfilerSectionMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMetric& from);
  void MergeFrom(const ProfilerSectionMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMetric";
  }
  protected:
  explicit ProfilerSectionMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 7,
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kUnitFieldNumber = 5,
    kFilterFieldNumber = 6,
    kHWUnitFieldNumber = 3,
    kShowInstancesFieldNumber = 4,
  };
  // repeated .ProfilerSectionMetricOption Options = 7;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::ProfilerSectionMetricOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetricOption >*
      mutable_options();
  private:
  const ::ProfilerSectionMetricOption& _internal_options(int index) const;
  ::ProfilerSectionMetricOption* _internal_add_options();
  public:
  const ::ProfilerSectionMetricOption& options(int index) const;
  ::ProfilerSectionMetricOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetricOption >&
      options() const;

  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string Unit = 5;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional .MetricOptionFilter Filter = 6;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::MetricOptionFilter& filter() const;
  ::MetricOptionFilter* release_filter();
  ::MetricOptionFilter* mutable_filter();
  void set_allocated_filter(::MetricOptionFilter* filter);
  private:
  const ::MetricOptionFilter& _internal_filter() const;
  ::MetricOptionFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::MetricOptionFilter* filter);
  ::MetricOptionFilter* unsafe_arena_release_filter();

  // optional .HWUnitType HWUnit = 3;
  bool has_hwunit() const;
  private:
  bool _internal_has_hwunit() const;
  public:
  void clear_hwunit();
  ::HWUnitType hwunit() const;
  void set_hwunit(::HWUnitType value);
  private:
  ::HWUnitType _internal_hwunit() const;
  void _internal_set_hwunit(::HWUnitType value);
  public:

  // optional bool ShowInstances = 4;
  bool has_showinstances() const;
  private:
  bool _internal_has_showinstances() const;
  public:
  void clear_showinstances();
  bool showinstances() const;
  void set_showinstances(bool value);
  private:
  bool _internal_showinstances() const;
  void _internal_set_showinstances(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetricOption > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::MetricOptionFilter* filter_;
  int hwunit_;
  bool showinstances_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionHighlightX PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionHighlightX) */ {
 public:
  inline ProfilerSectionHighlightX() : ProfilerSectionHighlightX(nullptr) {}
  virtual ~ProfilerSectionHighlightX();

  ProfilerSectionHighlightX(const ProfilerSectionHighlightX& from);
  ProfilerSectionHighlightX(ProfilerSectionHighlightX&& from) noexcept
    : ProfilerSectionHighlightX() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionHighlightX& operator=(const ProfilerSectionHighlightX& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionHighlightX& operator=(ProfilerSectionHighlightX&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionHighlightX& default_instance();

  static inline const ProfilerSectionHighlightX* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionHighlightX*>(
               &_ProfilerSectionHighlightX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProfilerSectionHighlightX& a, ProfilerSectionHighlightX& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionHighlightX* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionHighlightX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionHighlightX* New() const final {
    return CreateMaybeMessage<ProfilerSectionHighlightX>(nullptr);
  }

  ProfilerSectionHighlightX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionHighlightX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionHighlightX& from);
  void MergeFrom(const ProfilerSectionHighlightX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionHighlightX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionHighlightX";
  }
  protected:
  explicit ProfilerSectionHighlightX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .ProfilerSectionMetric Metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:ProfilerSectionHighlightX)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionTable) */ {
 public:
  inline ProfilerSectionTable() : ProfilerSectionTable(nullptr) {}
  virtual ~ProfilerSectionTable();

  ProfilerSectionTable(const ProfilerSectionTable& from);
  ProfilerSectionTable(ProfilerSectionTable&& from) noexcept
    : ProfilerSectionTable() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionTable& operator=(const ProfilerSectionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionTable& operator=(ProfilerSectionTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionTable& default_instance();

  static inline const ProfilerSectionTable* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionTable*>(
               &_ProfilerSectionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProfilerSectionTable& a, ProfilerSectionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionTable* New() const final {
    return CreateMaybeMessage<ProfilerSectionTable>(nullptr);
  }

  ProfilerSectionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionTable& from);
  void MergeFrom(const ProfilerSectionTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionTable";
  }
  protected:
  explicit ProfilerSectionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProfilerSectionTable_LayoutOrder LayoutOrder;
  static constexpr LayoutOrder RowMajor =
    ProfilerSectionTable_LayoutOrder_RowMajor;
  static constexpr LayoutOrder ColumnMajor =
    ProfilerSectionTable_LayoutOrder_ColumnMajor;
  static inline bool LayoutOrder_IsValid(int value) {
    return ProfilerSectionTable_LayoutOrder_IsValid(value);
  }
  static constexpr LayoutOrder LayoutOrder_MIN =
    ProfilerSectionTable_LayoutOrder_LayoutOrder_MIN;
  static constexpr LayoutOrder LayoutOrder_MAX =
    ProfilerSectionTable_LayoutOrder_LayoutOrder_MAX;
  static constexpr int LayoutOrder_ARRAYSIZE =
    ProfilerSectionTable_LayoutOrder_LayoutOrder_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayoutOrder_descriptor() {
    return ProfilerSectionTable_LayoutOrder_descriptor();
  }
  template<typename T>
  static inline const std::string& LayoutOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayoutOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayoutOrder_Name.");
    return ProfilerSectionTable_LayoutOrder_Name(enum_t_value);
  }
  static inline bool LayoutOrder_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LayoutOrder* value) {
    return ProfilerSectionTable_LayoutOrder_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 5,
    kLabelFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColumnsFieldNumber = 3,
    kOrderFieldNumber = 4,
  };
  // repeated .ProfilerSectionMetric Metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional uint32 Rows = 2;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Columns = 3;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 columns() const;
  void set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_columns() const;
  void _internal_set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ProfilerSectionTable.LayoutOrder Order = 4;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  ::ProfilerSectionTable_LayoutOrder order() const;
  void set_order(::ProfilerSectionTable_LayoutOrder value);
  private:
  ::ProfilerSectionTable_LayoutOrder _internal_order() const;
  void _internal_set_order(::ProfilerSectionTable_LayoutOrder value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 columns_;
  int order_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionChartAxisRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionChartAxisRange) */ {
 public:
  inline ProfilerSectionChartAxisRange() : ProfilerSectionChartAxisRange(nullptr) {}
  virtual ~ProfilerSectionChartAxisRange();

  ProfilerSectionChartAxisRange(const ProfilerSectionChartAxisRange& from);
  ProfilerSectionChartAxisRange(ProfilerSectionChartAxisRange&& from) noexcept
    : ProfilerSectionChartAxisRange() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionChartAxisRange& operator=(const ProfilerSectionChartAxisRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionChartAxisRange& operator=(ProfilerSectionChartAxisRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionChartAxisRange& default_instance();

  static inline const ProfilerSectionChartAxisRange* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionChartAxisRange*>(
               &_ProfilerSectionChartAxisRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfilerSectionChartAxisRange& a, ProfilerSectionChartAxisRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionChartAxisRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionChartAxisRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionChartAxisRange* New() const final {
    return CreateMaybeMessage<ProfilerSectionChartAxisRange>(nullptr);
  }

  ProfilerSectionChartAxisRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionChartAxisRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionChartAxisRange& from);
  void MergeFrom(const ProfilerSectionChartAxisRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionChartAxisRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionChartAxisRange";
  }
  protected:
  explicit ProfilerSectionChartAxisRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // optional int64 Min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int64 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 Max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionChartAxisRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionChartValueAxis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionChartValueAxis) */ {
 public:
  inline ProfilerSectionChartValueAxis() : ProfilerSectionChartValueAxis(nullptr) {}
  virtual ~ProfilerSectionChartValueAxis();

  ProfilerSectionChartValueAxis(const ProfilerSectionChartValueAxis& from);
  ProfilerSectionChartValueAxis(ProfilerSectionChartValueAxis&& from) noexcept
    : ProfilerSectionChartValueAxis() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionChartValueAxis& operator=(const ProfilerSectionChartValueAxis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionChartValueAxis& operator=(ProfilerSectionChartValueAxis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionChartValueAxis& default_instance();

  static inline const ProfilerSectionChartValueAxis* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionChartValueAxis*>(
               &_ProfilerSectionChartValueAxis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProfilerSectionChartValueAxis& a, ProfilerSectionChartValueAxis& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionChartValueAxis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionChartValueAxis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionChartValueAxis* New() const final {
    return CreateMaybeMessage<ProfilerSectionChartValueAxis>(nullptr);
  }

  ProfilerSectionChartValueAxis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionChartValueAxis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionChartValueAxis& from);
  void MergeFrom(const ProfilerSectionChartValueAxis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionChartValueAxis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionChartValueAxis";
  }
  protected:
  explicit ProfilerSectionChartValueAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kRangeFieldNumber = 2,
    kTickCountFieldNumber = 3,
    kSizeFieldNumber = 4,
    kPrecisionFieldNumber = 5,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .ProfilerSectionChartAxisRange Range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::ProfilerSectionChartAxisRange& range() const;
  ::ProfilerSectionChartAxisRange* release_range();
  ::ProfilerSectionChartAxisRange* mutable_range();
  void set_allocated_range(::ProfilerSectionChartAxisRange* range);
  private:
  const ::ProfilerSectionChartAxisRange& _internal_range() const;
  ::ProfilerSectionChartAxisRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::ProfilerSectionChartAxisRange* range);
  ::ProfilerSectionChartAxisRange* unsafe_arena_release_range();

  // optional int64 TickCount = 3;
  bool has_tickcount() const;
  private:
  bool _internal_has_tickcount() const;
  public:
  void clear_tickcount();
  ::PROTOBUF_NAMESPACE_ID::int64 tickcount() const;
  void set_tickcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tickcount() const;
  void _internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 Size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 Precision = 5;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionChartValueAxis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::ProfilerSectionChartAxisRange* range_;
  ::PROTOBUF_NAMESPACE_ID::int64 tickcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionChartCategoryAxis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionChartCategoryAxis) */ {
 public:
  inline ProfilerSectionChartCategoryAxis() : ProfilerSectionChartCategoryAxis(nullptr) {}
  virtual ~ProfilerSectionChartCategoryAxis();

  ProfilerSectionChartCategoryAxis(const ProfilerSectionChartCategoryAxis& from);
  ProfilerSectionChartCategoryAxis(ProfilerSectionChartCategoryAxis&& from) noexcept
    : ProfilerSectionChartCategoryAxis() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionChartCategoryAxis& operator=(const ProfilerSectionChartCategoryAxis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionChartCategoryAxis& operator=(ProfilerSectionChartCategoryAxis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionChartCategoryAxis& default_instance();

  static inline const ProfilerSectionChartCategoryAxis* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionChartCategoryAxis*>(
               &_ProfilerSectionChartCategoryAxis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProfilerSectionChartCategoryAxis& a, ProfilerSectionChartCategoryAxis& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionChartCategoryAxis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionChartCategoryAxis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionChartCategoryAxis* New() const final {
    return CreateMaybeMessage<ProfilerSectionChartCategoryAxis>(nullptr);
  }

  ProfilerSectionChartCategoryAxis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionChartCategoryAxis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionChartCategoryAxis& from);
  void MergeFrom(const ProfilerSectionChartCategoryAxis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionChartCategoryAxis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionChartCategoryAxis";
  }
  protected:
  explicit ProfilerSectionChartCategoryAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionChartCategoryAxis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionChartHistogramAxis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionChartHistogramAxis) */ {
 public:
  inline ProfilerSectionChartHistogramAxis() : ProfilerSectionChartHistogramAxis(nullptr) {}
  virtual ~ProfilerSectionChartHistogramAxis();

  ProfilerSectionChartHistogramAxis(const ProfilerSectionChartHistogramAxis& from);
  ProfilerSectionChartHistogramAxis(ProfilerSectionChartHistogramAxis&& from) noexcept
    : ProfilerSectionChartHistogramAxis() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionChartHistogramAxis& operator=(const ProfilerSectionChartHistogramAxis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionChartHistogramAxis& operator=(ProfilerSectionChartHistogramAxis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionChartHistogramAxis& default_instance();

  static inline const ProfilerSectionChartHistogramAxis* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionChartHistogramAxis*>(
               &_ProfilerSectionChartHistogramAxis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProfilerSectionChartHistogramAxis& a, ProfilerSectionChartHistogramAxis& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionChartHistogramAxis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionChartHistogramAxis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionChartHistogramAxis* New() const final {
    return CreateMaybeMessage<ProfilerSectionChartHistogramAxis>(nullptr);
  }

  ProfilerSectionChartHistogramAxis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionChartHistogramAxis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionChartHistogramAxis& from);
  void MergeFrom(const ProfilerSectionChartHistogramAxis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionChartHistogramAxis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionChartHistogramAxis";
  }
  protected:
  explicit ProfilerSectionChartHistogramAxis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kBinCountFieldNumber = 2,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional int64 BinCount = 2;
  bool has_bincount() const;
  private:
  bool _internal_has_bincount() const;
  public:
  void clear_bincount();
  ::PROTOBUF_NAMESPACE_ID::int64 bincount() const;
  void set_bincount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bincount() const;
  void _internal_set_bincount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionChartHistogramAxis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 bincount_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionBarChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionBarChart) */ {
 public:
  inline ProfilerSectionBarChart() : ProfilerSectionBarChart(nullptr) {}
  virtual ~ProfilerSectionBarChart();

  ProfilerSectionBarChart(const ProfilerSectionBarChart& from);
  ProfilerSectionBarChart(ProfilerSectionBarChart&& from) noexcept
    : ProfilerSectionBarChart() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionBarChart& operator=(const ProfilerSectionBarChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionBarChart& operator=(ProfilerSectionBarChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionBarChart& default_instance();

  static inline const ProfilerSectionBarChart* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionBarChart*>(
               &_ProfilerSectionBarChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProfilerSectionBarChart& a, ProfilerSectionBarChart& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionBarChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionBarChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionBarChart* New() const final {
    return CreateMaybeMessage<ProfilerSectionBarChart>(nullptr);
  }

  ProfilerSectionBarChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionBarChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionBarChart& from);
  void MergeFrom(const ProfilerSectionBarChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionBarChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionBarChart";
  }
  protected:
  explicit ProfilerSectionBarChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProfilerSectionBarChart_Directions Directions;
  static constexpr Directions Horizontal =
    ProfilerSectionBarChart_Directions_Horizontal;
  static constexpr Directions Vertical =
    ProfilerSectionBarChart_Directions_Vertical;
  static inline bool Directions_IsValid(int value) {
    return ProfilerSectionBarChart_Directions_IsValid(value);
  }
  static constexpr Directions Directions_MIN =
    ProfilerSectionBarChart_Directions_Directions_MIN;
  static constexpr Directions Directions_MAX =
    ProfilerSectionBarChart_Directions_Directions_MAX;
  static constexpr int Directions_ARRAYSIZE =
    ProfilerSectionBarChart_Directions_Directions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Directions_descriptor() {
    return ProfilerSectionBarChart_Directions_descriptor();
  }
  template<typename T>
  static inline const std::string& Directions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Directions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Directions_Name.");
    return ProfilerSectionBarChart_Directions_Name(enum_t_value);
  }
  static inline bool Directions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Directions* value) {
    return ProfilerSectionBarChart_Directions_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 5,
    kLabelFieldNumber = 1,
    kCategoryAxisFieldNumber = 3,
    kValueAxisFieldNumber = 4,
    kDirectionFieldNumber = 2,
  };
  // repeated .ProfilerSectionMetric Metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .ProfilerSectionChartCategoryAxis CategoryAxis = 3;
  bool has_categoryaxis() const;
  private:
  bool _internal_has_categoryaxis() const;
  public:
  void clear_categoryaxis();
  const ::ProfilerSectionChartCategoryAxis& categoryaxis() const;
  ::ProfilerSectionChartCategoryAxis* release_categoryaxis();
  ::ProfilerSectionChartCategoryAxis* mutable_categoryaxis();
  void set_allocated_categoryaxis(::ProfilerSectionChartCategoryAxis* categoryaxis);
  private:
  const ::ProfilerSectionChartCategoryAxis& _internal_categoryaxis() const;
  ::ProfilerSectionChartCategoryAxis* _internal_mutable_categoryaxis();
  public:
  void unsafe_arena_set_allocated_categoryaxis(
      ::ProfilerSectionChartCategoryAxis* categoryaxis);
  ::ProfilerSectionChartCategoryAxis* unsafe_arena_release_categoryaxis();

  // optional .ProfilerSectionChartValueAxis ValueAxis = 4;
  bool has_valueaxis() const;
  private:
  bool _internal_has_valueaxis() const;
  public:
  void clear_valueaxis();
  const ::ProfilerSectionChartValueAxis& valueaxis() const;
  ::ProfilerSectionChartValueAxis* release_valueaxis();
  ::ProfilerSectionChartValueAxis* mutable_valueaxis();
  void set_allocated_valueaxis(::ProfilerSectionChartValueAxis* valueaxis);
  private:
  const ::ProfilerSectionChartValueAxis& _internal_valueaxis() const;
  ::ProfilerSectionChartValueAxis* _internal_mutable_valueaxis();
  public:
  void unsafe_arena_set_allocated_valueaxis(
      ::ProfilerSectionChartValueAxis* valueaxis);
  ::ProfilerSectionChartValueAxis* unsafe_arena_release_valueaxis();

  // optional .ProfilerSectionBarChart.Directions Direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::ProfilerSectionBarChart_Directions direction() const;
  void set_direction(::ProfilerSectionBarChart_Directions value);
  private:
  ::ProfilerSectionBarChart_Directions _internal_direction() const;
  void _internal_set_direction(::ProfilerSectionBarChart_Directions value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionBarChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::ProfilerSectionChartCategoryAxis* categoryaxis_;
  ::ProfilerSectionChartValueAxis* valueaxis_;
  int direction_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionHistogramChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionHistogramChart) */ {
 public:
  inline ProfilerSectionHistogramChart() : ProfilerSectionHistogramChart(nullptr) {}
  virtual ~ProfilerSectionHistogramChart();

  ProfilerSectionHistogramChart(const ProfilerSectionHistogramChart& from);
  ProfilerSectionHistogramChart(ProfilerSectionHistogramChart&& from) noexcept
    : ProfilerSectionHistogramChart() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionHistogramChart& operator=(const ProfilerSectionHistogramChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionHistogramChart& operator=(ProfilerSectionHistogramChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionHistogramChart& default_instance();

  static inline const ProfilerSectionHistogramChart* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionHistogramChart*>(
               &_ProfilerSectionHistogramChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProfilerSectionHistogramChart& a, ProfilerSectionHistogramChart& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionHistogramChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionHistogramChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionHistogramChart* New() const final {
    return CreateMaybeMessage<ProfilerSectionHistogramChart>(nullptr);
  }

  ProfilerSectionHistogramChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionHistogramChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionHistogramChart& from);
  void MergeFrom(const ProfilerSectionHistogramChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionHistogramChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionHistogramChart";
  }
  protected:
  explicit ProfilerSectionHistogramChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kHistogramAxisFieldNumber = 2,
    kValueAxisFieldNumber = 3,
    kMetricFieldNumber = 4,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .ProfilerSectionChartHistogramAxis HistogramAxis = 2;
  bool has_histogramaxis() const;
  private:
  bool _internal_has_histogramaxis() const;
  public:
  void clear_histogramaxis();
  const ::ProfilerSectionChartHistogramAxis& histogramaxis() const;
  ::ProfilerSectionChartHistogramAxis* release_histogramaxis();
  ::ProfilerSectionChartHistogramAxis* mutable_histogramaxis();
  void set_allocated_histogramaxis(::ProfilerSectionChartHistogramAxis* histogramaxis);
  private:
  const ::ProfilerSectionChartHistogramAxis& _internal_histogramaxis() const;
  ::ProfilerSectionChartHistogramAxis* _internal_mutable_histogramaxis();
  public:
  void unsafe_arena_set_allocated_histogramaxis(
      ::ProfilerSectionChartHistogramAxis* histogramaxis);
  ::ProfilerSectionChartHistogramAxis* unsafe_arena_release_histogramaxis();

  // optional .ProfilerSectionChartValueAxis ValueAxis = 3;
  bool has_valueaxis() const;
  private:
  bool _internal_has_valueaxis() const;
  public:
  void clear_valueaxis();
  const ::ProfilerSectionChartValueAxis& valueaxis() const;
  ::ProfilerSectionChartValueAxis* release_valueaxis();
  ::ProfilerSectionChartValueAxis* mutable_valueaxis();
  void set_allocated_valueaxis(::ProfilerSectionChartValueAxis* valueaxis);
  private:
  const ::ProfilerSectionChartValueAxis& _internal_valueaxis() const;
  ::ProfilerSectionChartValueAxis* _internal_mutable_valueaxis();
  public:
  void unsafe_arena_set_allocated_valueaxis(
      ::ProfilerSectionChartValueAxis* valueaxis);
  ::ProfilerSectionChartValueAxis* unsafe_arena_release_valueaxis();

  // required .ProfilerSectionMetric Metric = 4;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::ProfilerSectionMetric& metric() const;
  ::ProfilerSectionMetric* release_metric();
  ::ProfilerSectionMetric* mutable_metric();
  void set_allocated_metric(::ProfilerSectionMetric* metric);
  private:
  const ::ProfilerSectionMetric& _internal_metric() const;
  ::ProfilerSectionMetric* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::ProfilerSectionMetric* metric);
  ::ProfilerSectionMetric* unsafe_arena_release_metric();

  // @@protoc_insertion_point(class_scope:ProfilerSectionHistogramChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::ProfilerSectionChartHistogramAxis* histogramaxis_;
  ::ProfilerSectionChartValueAxis* valueaxis_;
  ::ProfilerSectionMetric* metric_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionLineChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionLineChart) */ {
 public:
  inline ProfilerSectionLineChart() : ProfilerSectionLineChart(nullptr) {}
  virtual ~ProfilerSectionLineChart();

  ProfilerSectionLineChart(const ProfilerSectionLineChart& from);
  ProfilerSectionLineChart(ProfilerSectionLineChart&& from) noexcept
    : ProfilerSectionLineChart() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionLineChart& operator=(const ProfilerSectionLineChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionLineChart& operator=(ProfilerSectionLineChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionLineChart& default_instance();

  static inline const ProfilerSectionLineChart* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionLineChart*>(
               &_ProfilerSectionLineChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProfilerSectionLineChart& a, ProfilerSectionLineChart& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionLineChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionLineChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionLineChart* New() const final {
    return CreateMaybeMessage<ProfilerSectionLineChart>(nullptr);
  }

  ProfilerSectionLineChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionLineChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionLineChart& from);
  void MergeFrom(const ProfilerSectionLineChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionLineChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionLineChart";
  }
  protected:
  explicit ProfilerSectionLineChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 4,
    kLabelFieldNumber = 1,
    kAxisXFieldNumber = 2,
    kAxisYFieldNumber = 3,
    kHighlightXFieldNumber = 5,
  };
  // repeated .ProfilerSectionMetric Metrics = 4;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .ProfilerSectionChartValueAxis AxisX = 2;
  bool has_axisx() const;
  private:
  bool _internal_has_axisx() const;
  public:
  void clear_axisx();
  const ::ProfilerSectionChartValueAxis& axisx() const;
  ::ProfilerSectionChartValueAxis* release_axisx();
  ::ProfilerSectionChartValueAxis* mutable_axisx();
  void set_allocated_axisx(::ProfilerSectionChartValueAxis* axisx);
  private:
  const ::ProfilerSectionChartValueAxis& _internal_axisx() const;
  ::ProfilerSectionChartValueAxis* _internal_mutable_axisx();
  public:
  void unsafe_arena_set_allocated_axisx(
      ::ProfilerSectionChartValueAxis* axisx);
  ::ProfilerSectionChartValueAxis* unsafe_arena_release_axisx();

  // optional .ProfilerSectionChartValueAxis AxisY = 3;
  bool has_axisy() const;
  private:
  bool _internal_has_axisy() const;
  public:
  void clear_axisy();
  const ::ProfilerSectionChartValueAxis& axisy() const;
  ::ProfilerSectionChartValueAxis* release_axisy();
  ::ProfilerSectionChartValueAxis* mutable_axisy();
  void set_allocated_axisy(::ProfilerSectionChartValueAxis* axisy);
  private:
  const ::ProfilerSectionChartValueAxis& _internal_axisy() const;
  ::ProfilerSectionChartValueAxis* _internal_mutable_axisy();
  public:
  void unsafe_arena_set_allocated_axisy(
      ::ProfilerSectionChartValueAxis* axisy);
  ::ProfilerSectionChartValueAxis* unsafe_arena_release_axisy();

  // optional .ProfilerSectionHighlightX HighlightX = 5;
  bool has_highlightx() const;
  private:
  bool _internal_has_highlightx() const;
  public:
  void clear_highlightx();
  const ::ProfilerSectionHighlightX& highlightx() const;
  ::ProfilerSectionHighlightX* release_highlightx();
  ::ProfilerSectionHighlightX* mutable_highlightx();
  void set_allocated_highlightx(::ProfilerSectionHighlightX* highlightx);
  private:
  const ::ProfilerSectionHighlightX& _internal_highlightx() const;
  ::ProfilerSectionHighlightX* _internal_mutable_highlightx();
  public:
  void unsafe_arena_set_allocated_highlightx(
      ::ProfilerSectionHighlightX* highlightx);
  ::ProfilerSectionHighlightX* unsafe_arena_release_highlightx();

  // @@protoc_insertion_point(class_scope:ProfilerSectionLineChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::ProfilerSectionChartValueAxis* axisx_;
  ::ProfilerSectionChartValueAxis* axisy_;
  ::ProfilerSectionHighlightX* highlightx_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMemorySharedTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMemorySharedTable) */ {
 public:
  inline ProfilerSectionMemorySharedTable() : ProfilerSectionMemorySharedTable(nullptr) {}
  virtual ~ProfilerSectionMemorySharedTable();

  ProfilerSectionMemorySharedTable(const ProfilerSectionMemorySharedTable& from);
  ProfilerSectionMemorySharedTable(ProfilerSectionMemorySharedTable&& from) noexcept
    : ProfilerSectionMemorySharedTable() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMemorySharedTable& operator=(const ProfilerSectionMemorySharedTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMemorySharedTable& operator=(ProfilerSectionMemorySharedTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMemorySharedTable& default_instance();

  static inline const ProfilerSectionMemorySharedTable* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMemorySharedTable*>(
               &_ProfilerSectionMemorySharedTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProfilerSectionMemorySharedTable& a, ProfilerSectionMemorySharedTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMemorySharedTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMemorySharedTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMemorySharedTable* New() const final {
    return CreateMaybeMessage<ProfilerSectionMemorySharedTable>(nullptr);
  }

  ProfilerSectionMemorySharedTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMemorySharedTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMemorySharedTable& from);
  void MergeFrom(const ProfilerSectionMemorySharedTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMemorySharedTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMemorySharedTable";
  }
  protected:
  explicit ProfilerSectionMemorySharedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kShowLoadsFieldNumber = 2,
    kShowStoresFieldNumber = 3,
    kShowAtomicsFieldNumber = 4,
    kShowTotalsFieldNumber = 5,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool ShowLoads = 2;
  bool has_showloads() const;
  private:
  bool _internal_has_showloads() const;
  public:
  void clear_showloads();
  bool showloads() const;
  void set_showloads(bool value);
  private:
  bool _internal_showloads() const;
  void _internal_set_showloads(bool value);
  public:

  // optional bool ShowStores = 3;
  bool has_showstores() const;
  private:
  bool _internal_has_showstores() const;
  public:
  void clear_showstores();
  bool showstores() const;
  void set_showstores(bool value);
  private:
  bool _internal_showstores() const;
  void _internal_set_showstores(bool value);
  public:

  // optional bool ShowAtomics = 4;
  bool has_showatomics() const;
  private:
  bool _internal_has_showatomics() const;
  public:
  void clear_showatomics();
  bool showatomics() const;
  void set_showatomics(bool value);
  private:
  bool _internal_showatomics() const;
  void _internal_set_showatomics(bool value);
  public:

  // optional bool ShowTotals = 5;
  bool has_showtotals() const;
  private:
  bool _internal_has_showtotals() const;
  public:
  void clear_showtotals();
  bool showtotals() const;
  void set_showtotals(bool value);
  private:
  bool _internal_showtotals() const;
  void _internal_set_showtotals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMemorySharedTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool showloads_;
  bool showstores_;
  bool showatomics_;
  bool showtotals_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMemoryFirstLevelCacheTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMemoryFirstLevelCacheTable) */ {
 public:
  inline ProfilerSectionMemoryFirstLevelCacheTable() : ProfilerSectionMemoryFirstLevelCacheTable(nullptr) {}
  virtual ~ProfilerSectionMemoryFirstLevelCacheTable();

  ProfilerSectionMemoryFirstLevelCacheTable(const ProfilerSectionMemoryFirstLevelCacheTable& from);
  ProfilerSectionMemoryFirstLevelCacheTable(ProfilerSectionMemoryFirstLevelCacheTable&& from) noexcept
    : ProfilerSectionMemoryFirstLevelCacheTable() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMemoryFirstLevelCacheTable& operator=(const ProfilerSectionMemoryFirstLevelCacheTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMemoryFirstLevelCacheTable& operator=(ProfilerSectionMemoryFirstLevelCacheTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMemoryFirstLevelCacheTable& default_instance();

  static inline const ProfilerSectionMemoryFirstLevelCacheTable* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMemoryFirstLevelCacheTable*>(
               &_ProfilerSectionMemoryFirstLevelCacheTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProfilerSectionMemoryFirstLevelCacheTable& a, ProfilerSectionMemoryFirstLevelCacheTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMemoryFirstLevelCacheTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMemoryFirstLevelCacheTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMemoryFirstLevelCacheTable* New() const final {
    return CreateMaybeMessage<ProfilerSectionMemoryFirstLevelCacheTable>(nullptr);
  }

  ProfilerSectionMemoryFirstLevelCacheTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMemoryFirstLevelCacheTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMemoryFirstLevelCacheTable& from);
  void MergeFrom(const ProfilerSectionMemoryFirstLevelCacheTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMemoryFirstLevelCacheTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMemoryFirstLevelCacheTable";
  }
  protected:
  explicit ProfilerSectionMemoryFirstLevelCacheTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kShowLoadsFieldNumber = 2,
    kShowStoresFieldNumber = 3,
    kShowAtomicsFieldNumber = 4,
    kShowReductionsFieldNumber = 5,
    kShowGlobalFieldNumber = 6,
    kShowLocalFieldNumber = 7,
    kShowSurfaceFieldNumber = 8,
    kShowTextureFieldNumber = 9,
    kShowTotalLoadsFieldNumber = 10,
    kShowTotalStoresFieldNumber = 11,
    kShowTotalsFieldNumber = 12,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool ShowLoads = 2;
  bool has_showloads() const;
  private:
  bool _internal_has_showloads() const;
  public:
  void clear_showloads();
  bool showloads() const;
  void set_showloads(bool value);
  private:
  bool _internal_showloads() const;
  void _internal_set_showloads(bool value);
  public:

  // optional bool ShowStores = 3;
  bool has_showstores() const;
  private:
  bool _internal_has_showstores() const;
  public:
  void clear_showstores();
  bool showstores() const;
  void set_showstores(bool value);
  private:
  bool _internal_showstores() const;
  void _internal_set_showstores(bool value);
  public:

  // optional bool ShowAtomics = 4;
  bool has_showatomics() const;
  private:
  bool _internal_has_showatomics() const;
  public:
  void clear_showatomics();
  bool showatomics() const;
  void set_showatomics(bool value);
  private:
  bool _internal_showatomics() const;
  void _internal_set_showatomics(bool value);
  public:

  // optional bool ShowReductions = 5;
  bool has_showreductions() const;
  private:
  bool _internal_has_showreductions() const;
  public:
  void clear_showreductions();
  bool showreductions() const;
  void set_showreductions(bool value);
  private:
  bool _internal_showreductions() const;
  void _internal_set_showreductions(bool value);
  public:

  // optional bool ShowGlobal = 6;
  bool has_showglobal() const;
  private:
  bool _internal_has_showglobal() const;
  public:
  void clear_showglobal();
  bool showglobal() const;
  void set_showglobal(bool value);
  private:
  bool _internal_showglobal() const;
  void _internal_set_showglobal(bool value);
  public:

  // optional bool ShowLocal = 7;
  bool has_showlocal() const;
  private:
  bool _internal_has_showlocal() const;
  public:
  void clear_showlocal();
  bool showlocal() const;
  void set_showlocal(bool value);
  private:
  bool _internal_showlocal() const;
  void _internal_set_showlocal(bool value);
  public:

  // optional bool ShowSurface = 8;
  bool has_showsurface() const;
  private:
  bool _internal_has_showsurface() const;
  public:
  void clear_showsurface();
  bool showsurface() const;
  void set_showsurface(bool value);
  private:
  bool _internal_showsurface() const;
  void _internal_set_showsurface(bool value);
  public:

  // optional bool ShowTexture = 9;
  bool has_showtexture() const;
  private:
  bool _internal_has_showtexture() const;
  public:
  void clear_showtexture();
  bool showtexture() const;
  void set_showtexture(bool value);
  private:
  bool _internal_showtexture() const;
  void _internal_set_showtexture(bool value);
  public:

  // optional bool ShowTotalLoads = 10;
  bool has_showtotalloads() const;
  private:
  bool _internal_has_showtotalloads() const;
  public:
  void clear_showtotalloads();
  bool showtotalloads() const;
  void set_showtotalloads(bool value);
  private:
  bool _internal_showtotalloads() const;
  void _internal_set_showtotalloads(bool value);
  public:

  // optional bool ShowTotalStores = 11;
  bool has_showtotalstores() const;
  private:
  bool _internal_has_showtotalstores() const;
  public:
  void clear_showtotalstores();
  bool showtotalstores() const;
  void set_showtotalstores(bool value);
  private:
  bool _internal_showtotalstores() const;
  void _internal_set_showtotalstores(bool value);
  public:

  // optional bool ShowTotals = 12;
  bool has_showtotals() const;
  private:
  bool _internal_has_showtotals() const;
  public:
  void clear_showtotals();
  bool showtotals() const;
  void set_showtotals(bool value);
  private:
  bool _internal_showtotals() const;
  void _internal_set_showtotals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMemoryFirstLevelCacheTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool showloads_;
  bool showstores_;
  bool showatomics_;
  bool showreductions_;
  bool showglobal_;
  bool showlocal_;
  bool showsurface_;
  bool showtexture_;
  bool showtotalloads_;
  bool showtotalstores_;
  bool showtotals_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMemorySecondLevelCacheTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMemorySecondLevelCacheTable) */ {
 public:
  inline ProfilerSectionMemorySecondLevelCacheTable() : ProfilerSectionMemorySecondLevelCacheTable(nullptr) {}
  virtual ~ProfilerSectionMemorySecondLevelCacheTable();

  ProfilerSectionMemorySecondLevelCacheTable(const ProfilerSectionMemorySecondLevelCacheTable& from);
  ProfilerSectionMemorySecondLevelCacheTable(ProfilerSectionMemorySecondLevelCacheTable&& from) noexcept
    : ProfilerSectionMemorySecondLevelCacheTable() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMemorySecondLevelCacheTable& operator=(const ProfilerSectionMemorySecondLevelCacheTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMemorySecondLevelCacheTable& operator=(ProfilerSectionMemorySecondLevelCacheTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMemorySecondLevelCacheTable& default_instance();

  static inline const ProfilerSectionMemorySecondLevelCacheTable* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMemorySecondLevelCacheTable*>(
               &_ProfilerSectionMemorySecondLevelCacheTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProfilerSectionMemorySecondLevelCacheTable& a, ProfilerSectionMemorySecondLevelCacheTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMemorySecondLevelCacheTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMemorySecondLevelCacheTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMemorySecondLevelCacheTable* New() const final {
    return CreateMaybeMessage<ProfilerSectionMemorySecondLevelCacheTable>(nullptr);
  }

  ProfilerSectionMemorySecondLevelCacheTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMemorySecondLevelCacheTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMemorySecondLevelCacheTable& from);
  void MergeFrom(const ProfilerSectionMemorySecondLevelCacheTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMemorySecondLevelCacheTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMemorySecondLevelCacheTable";
  }
  protected:
  explicit ProfilerSectionMemorySecondLevelCacheTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kShowLoadsFieldNumber = 2,
    kShowStoresFieldNumber = 3,
    kShowAtomicsFieldNumber = 4,
    kShowReductionsFieldNumber = 5,
    kShowGlobalFieldNumber = 6,
    kShowLocalFieldNumber = 7,
    kShowSurfaceFieldNumber = 8,
    kShowTextureFieldNumber = 9,
    kShowTotalLoadsFieldNumber = 10,
    kShowTotalStoresFieldNumber = 11,
    kShowTotalsFieldNumber = 12,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool ShowLoads = 2;
  bool has_showloads() const;
  private:
  bool _internal_has_showloads() const;
  public:
  void clear_showloads();
  bool showloads() const;
  void set_showloads(bool value);
  private:
  bool _internal_showloads() const;
  void _internal_set_showloads(bool value);
  public:

  // optional bool ShowStores = 3;
  bool has_showstores() const;
  private:
  bool _internal_has_showstores() const;
  public:
  void clear_showstores();
  bool showstores() const;
  void set_showstores(bool value);
  private:
  bool _internal_showstores() const;
  void _internal_set_showstores(bool value);
  public:

  // optional bool ShowAtomics = 4;
  bool has_showatomics() const;
  private:
  bool _internal_has_showatomics() const;
  public:
  void clear_showatomics();
  bool showatomics() const;
  void set_showatomics(bool value);
  private:
  bool _internal_showatomics() const;
  void _internal_set_showatomics(bool value);
  public:

  // optional bool ShowReductions = 5;
  bool has_showreductions() const;
  private:
  bool _internal_has_showreductions() const;
  public:
  void clear_showreductions();
  bool showreductions() const;
  void set_showreductions(bool value);
  private:
  bool _internal_showreductions() const;
  void _internal_set_showreductions(bool value);
  public:

  // optional bool ShowGlobal = 6;
  bool has_showglobal() const;
  private:
  bool _internal_has_showglobal() const;
  public:
  void clear_showglobal();
  bool showglobal() const;
  void set_showglobal(bool value);
  private:
  bool _internal_showglobal() const;
  void _internal_set_showglobal(bool value);
  public:

  // optional bool ShowLocal = 7;
  bool has_showlocal() const;
  private:
  bool _internal_has_showlocal() const;
  public:
  void clear_showlocal();
  bool showlocal() const;
  void set_showlocal(bool value);
  private:
  bool _internal_showlocal() const;
  void _internal_set_showlocal(bool value);
  public:

  // optional bool ShowSurface = 8;
  bool has_showsurface() const;
  private:
  bool _internal_has_showsurface() const;
  public:
  void clear_showsurface();
  bool showsurface() const;
  void set_showsurface(bool value);
  private:
  bool _internal_showsurface() const;
  void _internal_set_showsurface(bool value);
  public:

  // optional bool ShowTexture = 9;
  bool has_showtexture() const;
  private:
  bool _internal_has_showtexture() const;
  public:
  void clear_showtexture();
  bool showtexture() const;
  void set_showtexture(bool value);
  private:
  bool _internal_showtexture() const;
  void _internal_set_showtexture(bool value);
  public:

  // optional bool ShowTotalLoads = 10;
  bool has_showtotalloads() const;
  private:
  bool _internal_has_showtotalloads() const;
  public:
  void clear_showtotalloads();
  bool showtotalloads() const;
  void set_showtotalloads(bool value);
  private:
  bool _internal_showtotalloads() const;
  void _internal_set_showtotalloads(bool value);
  public:

  // optional bool ShowTotalStores = 11;
  bool has_showtotalstores() const;
  private:
  bool _internal_has_showtotalstores() const;
  public:
  void clear_showtotalstores();
  bool showtotalstores() const;
  void set_showtotalstores(bool value);
  private:
  bool _internal_showtotalstores() const;
  void _internal_set_showtotalstores(bool value);
  public:

  // optional bool ShowTotals = 12;
  bool has_showtotals() const;
  private:
  bool _internal_has_showtotals() const;
  public:
  void clear_showtotals();
  bool showtotals() const;
  void set_showtotals(bool value);
  private:
  bool _internal_showtotals() const;
  void _internal_set_showtotals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMemorySecondLevelCacheTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool showloads_;
  bool showstores_;
  bool showatomics_;
  bool showreductions_;
  bool showglobal_;
  bool showlocal_;
  bool showsurface_;
  bool showtexture_;
  bool showtotalloads_;
  bool showtotalstores_;
  bool showtotals_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMemoryDeviceMemoryTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMemoryDeviceMemoryTable) */ {
 public:
  inline ProfilerSectionMemoryDeviceMemoryTable() : ProfilerSectionMemoryDeviceMemoryTable(nullptr) {}
  virtual ~ProfilerSectionMemoryDeviceMemoryTable();

  ProfilerSectionMemoryDeviceMemoryTable(const ProfilerSectionMemoryDeviceMemoryTable& from);
  ProfilerSectionMemoryDeviceMemoryTable(ProfilerSectionMemoryDeviceMemoryTable&& from) noexcept
    : ProfilerSectionMemoryDeviceMemoryTable() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMemoryDeviceMemoryTable& operator=(const ProfilerSectionMemoryDeviceMemoryTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMemoryDeviceMemoryTable& operator=(ProfilerSectionMemoryDeviceMemoryTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMemoryDeviceMemoryTable& default_instance();

  static inline const ProfilerSectionMemoryDeviceMemoryTable* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMemoryDeviceMemoryTable*>(
               &_ProfilerSectionMemoryDeviceMemoryTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProfilerSectionMemoryDeviceMemoryTable& a, ProfilerSectionMemoryDeviceMemoryTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMemoryDeviceMemoryTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMemoryDeviceMemoryTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMemoryDeviceMemoryTable* New() const final {
    return CreateMaybeMessage<ProfilerSectionMemoryDeviceMemoryTable>(nullptr);
  }

  ProfilerSectionMemoryDeviceMemoryTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMemoryDeviceMemoryTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMemoryDeviceMemoryTable& from);
  void MergeFrom(const ProfilerSectionMemoryDeviceMemoryTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMemoryDeviceMemoryTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMemoryDeviceMemoryTable";
  }
  protected:
  explicit ProfilerSectionMemoryDeviceMemoryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kShowLoadsFieldNumber = 2,
    kShowStoresFieldNumber = 3,
    kShowTotalsFieldNumber = 4,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool ShowLoads = 2;
  bool has_showloads() const;
  private:
  bool _internal_has_showloads() const;
  public:
  void clear_showloads();
  bool showloads() const;
  void set_showloads(bool value);
  private:
  bool _internal_showloads() const;
  void _internal_set_showloads(bool value);
  public:

  // optional bool ShowStores = 3;
  bool has_showstores() const;
  private:
  bool _internal_has_showstores() const;
  public:
  void clear_showstores();
  bool showstores() const;
  void set_showstores(bool value);
  private:
  bool _internal_showstores() const;
  void _internal_set_showstores(bool value);
  public:

  // optional bool ShowTotals = 4;
  bool has_showtotals() const;
  private:
  bool _internal_has_showtotals() const;
  public:
  void clear_showtotals();
  bool showtotals() const;
  void set_showtotals(bool value);
  private:
  bool _internal_showtotals() const;
  void _internal_set_showtotals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMemoryDeviceMemoryTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool showloads_;
  bool showstores_;
  bool showtotals_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMemoryChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMemoryChart) */ {
 public:
  inline ProfilerSectionMemoryChart() : ProfilerSectionMemoryChart(nullptr) {}
  virtual ~ProfilerSectionMemoryChart();

  ProfilerSectionMemoryChart(const ProfilerSectionMemoryChart& from);
  ProfilerSectionMemoryChart(ProfilerSectionMemoryChart&& from) noexcept
    : ProfilerSectionMemoryChart() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMemoryChart& operator=(const ProfilerSectionMemoryChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMemoryChart& operator=(ProfilerSectionMemoryChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMemoryChart& default_instance();

  static inline const ProfilerSectionMemoryChart* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMemoryChart*>(
               &_ProfilerSectionMemoryChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProfilerSectionMemoryChart& a, ProfilerSectionMemoryChart& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMemoryChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMemoryChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMemoryChart* New() const final {
    return CreateMaybeMessage<ProfilerSectionMemoryChart>(nullptr);
  }

  ProfilerSectionMemoryChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMemoryChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMemoryChart& from);
  void MergeFrom(const ProfilerSectionMemoryChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMemoryChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMemoryChart";
  }
  protected:
  explicit ProfilerSectionMemoryChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // optional string Label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMemoryChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionGfxMetricsWidget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionGfxMetricsWidget) */ {
 public:
  inline ProfilerSectionGfxMetricsWidget() : ProfilerSectionGfxMetricsWidget(nullptr) {}
  virtual ~ProfilerSectionGfxMetricsWidget();

  ProfilerSectionGfxMetricsWidget(const ProfilerSectionGfxMetricsWidget& from);
  ProfilerSectionGfxMetricsWidget(ProfilerSectionGfxMetricsWidget&& from) noexcept
    : ProfilerSectionGfxMetricsWidget() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionGfxMetricsWidget& operator=(const ProfilerSectionGfxMetricsWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionGfxMetricsWidget& operator=(ProfilerSectionGfxMetricsWidget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionGfxMetricsWidget& default_instance();

  static inline const ProfilerSectionGfxMetricsWidget* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionGfxMetricsWidget*>(
               &_ProfilerSectionGfxMetricsWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProfilerSectionGfxMetricsWidget& a, ProfilerSectionGfxMetricsWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionGfxMetricsWidget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionGfxMetricsWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionGfxMetricsWidget* New() const final {
    return CreateMaybeMessage<ProfilerSectionGfxMetricsWidget>(nullptr);
  }

  ProfilerSectionGfxMetricsWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionGfxMetricsWidget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionGfxMetricsWidget& from);
  void MergeFrom(const ProfilerSectionGfxMetricsWidget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionGfxMetricsWidget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionGfxMetricsWidget";
  }
  protected:
  explicit ProfilerSectionGfxMetricsWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // repeated .ProfilerSectionMetric Metrics = 3;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // required string Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string Label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionGfxMetricsWidget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionHeader) */ {
 public:
  inline ProfilerSectionHeader() : ProfilerSectionHeader(nullptr) {}
  virtual ~ProfilerSectionHeader();

  ProfilerSectionHeader(const ProfilerSectionHeader& from);
  ProfilerSectionHeader(ProfilerSectionHeader&& from) noexcept
    : ProfilerSectionHeader() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionHeader& operator=(const ProfilerSectionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionHeader& operator=(ProfilerSectionHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionHeader& default_instance();

  static inline const ProfilerSectionHeader* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionHeader*>(
               &_ProfilerSectionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProfilerSectionHeader& a, ProfilerSectionHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionHeader* New() const final {
    return CreateMaybeMessage<ProfilerSectionHeader>(nullptr);
  }

  ProfilerSectionHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionHeader& from);
  void MergeFrom(const ProfilerSectionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionHeader";
  }
  protected:
  explicit ProfilerSectionHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kRowsFieldNumber = 1,
  };
  // repeated .ProfilerSectionMetric Metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // optional uint32 Rows = 1;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionBodyItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionBodyItem) */ {
 public:
  inline ProfilerSectionBodyItem() : ProfilerSectionBodyItem(nullptr) {}
  virtual ~ProfilerSectionBodyItem();

  ProfilerSectionBodyItem(const ProfilerSectionBodyItem& from);
  ProfilerSectionBodyItem(ProfilerSectionBodyItem&& from) noexcept
    : ProfilerSectionBodyItem() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionBodyItem& operator=(const ProfilerSectionBodyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionBodyItem& operator=(ProfilerSectionBodyItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionBodyItem& default_instance();

  static inline const ProfilerSectionBodyItem* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionBodyItem*>(
               &_ProfilerSectionBodyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProfilerSectionBodyItem& a, ProfilerSectionBodyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionBodyItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionBodyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionBodyItem* New() const final {
    return CreateMaybeMessage<ProfilerSectionBodyItem>(nullptr);
  }

  ProfilerSectionBodyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionBodyItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionBodyItem& from);
  void MergeFrom(const ProfilerSectionBodyItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionBodyItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionBodyItem";
  }
  protected:
  explicit ProfilerSectionBodyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kBarChartFieldNumber = 2,
    kHistogramChartFieldNumber = 3,
    kLineChartFieldNumber = 4,
    kMemorySharedTableFieldNumber = 101,
    kMemoryFirstLevelCacheTableFieldNumber = 102,
    kMemorySecondLevelCacheTableFieldNumber = 103,
    kMemoryDeviceMemoryTableFieldNumber = 104,
    kMemoryChartFieldNumber = 105,
    kGfxMetricsWidgetFieldNumber = 150,
    kFilterFieldNumber = 200,
  };
  // optional .ProfilerSectionTable Table = 1;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::ProfilerSectionTable& table() const;
  ::ProfilerSectionTable* release_table();
  ::ProfilerSectionTable* mutable_table();
  void set_allocated_table(::ProfilerSectionTable* table);
  private:
  const ::ProfilerSectionTable& _internal_table() const;
  ::ProfilerSectionTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::ProfilerSectionTable* table);
  ::ProfilerSectionTable* unsafe_arena_release_table();

  // optional .ProfilerSectionBarChart BarChart = 2;
  bool has_barchart() const;
  private:
  bool _internal_has_barchart() const;
  public:
  void clear_barchart();
  const ::ProfilerSectionBarChart& barchart() const;
  ::ProfilerSectionBarChart* release_barchart();
  ::ProfilerSectionBarChart* mutable_barchart();
  void set_allocated_barchart(::ProfilerSectionBarChart* barchart);
  private:
  const ::ProfilerSectionBarChart& _internal_barchart() const;
  ::ProfilerSectionBarChart* _internal_mutable_barchart();
  public:
  void unsafe_arena_set_allocated_barchart(
      ::ProfilerSectionBarChart* barchart);
  ::ProfilerSectionBarChart* unsafe_arena_release_barchart();

  // optional .ProfilerSectionHistogramChart HistogramChart = 3;
  bool has_histogramchart() const;
  private:
  bool _internal_has_histogramchart() const;
  public:
  void clear_histogramchart();
  const ::ProfilerSectionHistogramChart& histogramchart() const;
  ::ProfilerSectionHistogramChart* release_histogramchart();
  ::ProfilerSectionHistogramChart* mutable_histogramchart();
  void set_allocated_histogramchart(::ProfilerSectionHistogramChart* histogramchart);
  private:
  const ::ProfilerSectionHistogramChart& _internal_histogramchart() const;
  ::ProfilerSectionHistogramChart* _internal_mutable_histogramchart();
  public:
  void unsafe_arena_set_allocated_histogramchart(
      ::ProfilerSectionHistogramChart* histogramchart);
  ::ProfilerSectionHistogramChart* unsafe_arena_release_histogramchart();

  // optional .ProfilerSectionLineChart LineChart = 4;
  bool has_linechart() const;
  private:
  bool _internal_has_linechart() const;
  public:
  void clear_linechart();
  const ::ProfilerSectionLineChart& linechart() const;
  ::ProfilerSectionLineChart* release_linechart();
  ::ProfilerSectionLineChart* mutable_linechart();
  void set_allocated_linechart(::ProfilerSectionLineChart* linechart);
  private:
  const ::ProfilerSectionLineChart& _internal_linechart() const;
  ::ProfilerSectionLineChart* _internal_mutable_linechart();
  public:
  void unsafe_arena_set_allocated_linechart(
      ::ProfilerSectionLineChart* linechart);
  ::ProfilerSectionLineChart* unsafe_arena_release_linechart();

  // optional .ProfilerSectionMemorySharedTable MemorySharedTable = 101;
  bool has_memorysharedtable() const;
  private:
  bool _internal_has_memorysharedtable() const;
  public:
  void clear_memorysharedtable();
  const ::ProfilerSectionMemorySharedTable& memorysharedtable() const;
  ::ProfilerSectionMemorySharedTable* release_memorysharedtable();
  ::ProfilerSectionMemorySharedTable* mutable_memorysharedtable();
  void set_allocated_memorysharedtable(::ProfilerSectionMemorySharedTable* memorysharedtable);
  private:
  const ::ProfilerSectionMemorySharedTable& _internal_memorysharedtable() const;
  ::ProfilerSectionMemorySharedTable* _internal_mutable_memorysharedtable();
  public:
  void unsafe_arena_set_allocated_memorysharedtable(
      ::ProfilerSectionMemorySharedTable* memorysharedtable);
  ::ProfilerSectionMemorySharedTable* unsafe_arena_release_memorysharedtable();

  // optional .ProfilerSectionMemoryFirstLevelCacheTable MemoryFirstLevelCacheTable = 102;
  bool has_memoryfirstlevelcachetable() const;
  private:
  bool _internal_has_memoryfirstlevelcachetable() const;
  public:
  void clear_memoryfirstlevelcachetable();
  const ::ProfilerSectionMemoryFirstLevelCacheTable& memoryfirstlevelcachetable() const;
  ::ProfilerSectionMemoryFirstLevelCacheTable* release_memoryfirstlevelcachetable();
  ::ProfilerSectionMemoryFirstLevelCacheTable* mutable_memoryfirstlevelcachetable();
  void set_allocated_memoryfirstlevelcachetable(::ProfilerSectionMemoryFirstLevelCacheTable* memoryfirstlevelcachetable);
  private:
  const ::ProfilerSectionMemoryFirstLevelCacheTable& _internal_memoryfirstlevelcachetable() const;
  ::ProfilerSectionMemoryFirstLevelCacheTable* _internal_mutable_memoryfirstlevelcachetable();
  public:
  void unsafe_arena_set_allocated_memoryfirstlevelcachetable(
      ::ProfilerSectionMemoryFirstLevelCacheTable* memoryfirstlevelcachetable);
  ::ProfilerSectionMemoryFirstLevelCacheTable* unsafe_arena_release_memoryfirstlevelcachetable();

  // optional .ProfilerSectionMemorySecondLevelCacheTable MemorySecondLevelCacheTable = 103;
  bool has_memorysecondlevelcachetable() const;
  private:
  bool _internal_has_memorysecondlevelcachetable() const;
  public:
  void clear_memorysecondlevelcachetable();
  const ::ProfilerSectionMemorySecondLevelCacheTable& memorysecondlevelcachetable() const;
  ::ProfilerSectionMemorySecondLevelCacheTable* release_memorysecondlevelcachetable();
  ::ProfilerSectionMemorySecondLevelCacheTable* mutable_memorysecondlevelcachetable();
  void set_allocated_memorysecondlevelcachetable(::ProfilerSectionMemorySecondLevelCacheTable* memorysecondlevelcachetable);
  private:
  const ::ProfilerSectionMemorySecondLevelCacheTable& _internal_memorysecondlevelcachetable() const;
  ::ProfilerSectionMemorySecondLevelCacheTable* _internal_mutable_memorysecondlevelcachetable();
  public:
  void unsafe_arena_set_allocated_memorysecondlevelcachetable(
      ::ProfilerSectionMemorySecondLevelCacheTable* memorysecondlevelcachetable);
  ::ProfilerSectionMemorySecondLevelCacheTable* unsafe_arena_release_memorysecondlevelcachetable();

  // optional .ProfilerSectionMemoryDeviceMemoryTable MemoryDeviceMemoryTable = 104;
  bool has_memorydevicememorytable() const;
  private:
  bool _internal_has_memorydevicememorytable() const;
  public:
  void clear_memorydevicememorytable();
  const ::ProfilerSectionMemoryDeviceMemoryTable& memorydevicememorytable() const;
  ::ProfilerSectionMemoryDeviceMemoryTable* release_memorydevicememorytable();
  ::ProfilerSectionMemoryDeviceMemoryTable* mutable_memorydevicememorytable();
  void set_allocated_memorydevicememorytable(::ProfilerSectionMemoryDeviceMemoryTable* memorydevicememorytable);
  private:
  const ::ProfilerSectionMemoryDeviceMemoryTable& _internal_memorydevicememorytable() const;
  ::ProfilerSectionMemoryDeviceMemoryTable* _internal_mutable_memorydevicememorytable();
  public:
  void unsafe_arena_set_allocated_memorydevicememorytable(
      ::ProfilerSectionMemoryDeviceMemoryTable* memorydevicememorytable);
  ::ProfilerSectionMemoryDeviceMemoryTable* unsafe_arena_release_memorydevicememorytable();

  // optional .ProfilerSectionMemoryChart MemoryChart = 105;
  bool has_memorychart() const;
  private:
  bool _internal_has_memorychart() const;
  public:
  void clear_memorychart();
  const ::ProfilerSectionMemoryChart& memorychart() const;
  ::ProfilerSectionMemoryChart* release_memorychart();
  ::ProfilerSectionMemoryChart* mutable_memorychart();
  void set_allocated_memorychart(::ProfilerSectionMemoryChart* memorychart);
  private:
  const ::ProfilerSectionMemoryChart& _internal_memorychart() const;
  ::ProfilerSectionMemoryChart* _internal_mutable_memorychart();
  public:
  void unsafe_arena_set_allocated_memorychart(
      ::ProfilerSectionMemoryChart* memorychart);
  ::ProfilerSectionMemoryChart* unsafe_arena_release_memorychart();

  // optional .ProfilerSectionGfxMetricsWidget GfxMetricsWidget = 150;
  bool has_gfxmetricswidget() const;
  private:
  bool _internal_has_gfxmetricswidget() const;
  public:
  void clear_gfxmetricswidget();
  const ::ProfilerSectionGfxMetricsWidget& gfxmetricswidget() const;
  ::ProfilerSectionGfxMetricsWidget* release_gfxmetricswidget();
  ::ProfilerSectionGfxMetricsWidget* mutable_gfxmetricswidget();
  void set_allocated_gfxmetricswidget(::ProfilerSectionGfxMetricsWidget* gfxmetricswidget);
  private:
  const ::ProfilerSectionGfxMetricsWidget& _internal_gfxmetricswidget() const;
  ::ProfilerSectionGfxMetricsWidget* _internal_mutable_gfxmetricswidget();
  public:
  void unsafe_arena_set_allocated_gfxmetricswidget(
      ::ProfilerSectionGfxMetricsWidget* gfxmetricswidget);
  ::ProfilerSectionGfxMetricsWidget* unsafe_arena_release_gfxmetricswidget();

  // optional .MetricOptionFilter Filter = 200;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::MetricOptionFilter& filter() const;
  ::MetricOptionFilter* release_filter();
  ::MetricOptionFilter* mutable_filter();
  void set_allocated_filter(::MetricOptionFilter* filter);
  private:
  const ::MetricOptionFilter& _internal_filter() const;
  ::MetricOptionFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::MetricOptionFilter* filter);
  ::MetricOptionFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:ProfilerSectionBodyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfilerSectionTable* table_;
  ::ProfilerSectionBarChart* barchart_;
  ::ProfilerSectionHistogramChart* histogramchart_;
  ::ProfilerSectionLineChart* linechart_;
  ::ProfilerSectionMemorySharedTable* memorysharedtable_;
  ::ProfilerSectionMemoryFirstLevelCacheTable* memoryfirstlevelcachetable_;
  ::ProfilerSectionMemorySecondLevelCacheTable* memorysecondlevelcachetable_;
  ::ProfilerSectionMemoryDeviceMemoryTable* memorydevicememorytable_;
  ::ProfilerSectionMemoryChart* memorychart_;
  ::ProfilerSectionGfxMetricsWidget* gfxmetricswidget_;
  ::MetricOptionFilter* filter_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionBody) */ {
 public:
  inline ProfilerSectionBody() : ProfilerSectionBody(nullptr) {}
  virtual ~ProfilerSectionBody();

  ProfilerSectionBody(const ProfilerSectionBody& from);
  ProfilerSectionBody(ProfilerSectionBody&& from) noexcept
    : ProfilerSectionBody() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionBody& operator=(const ProfilerSectionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionBody& operator=(ProfilerSectionBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionBody& default_instance();

  static inline const ProfilerSectionBody* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionBody*>(
               &_ProfilerSectionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ProfilerSectionBody& a, ProfilerSectionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionBody* New() const final {
    return CreateMaybeMessage<ProfilerSectionBody>(nullptr);
  }

  ProfilerSectionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionBody& from);
  void MergeFrom(const ProfilerSectionBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionBody";
  }
  protected:
  explicit ProfilerSectionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
  };
  // repeated .ProfilerSectionBodyItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ProfilerSectionBodyItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBodyItem >*
      mutable_items();
  private:
  const ::ProfilerSectionBodyItem& _internal_items(int index) const;
  ::ProfilerSectionBodyItem* _internal_add_items();
  public:
  const ::ProfilerSectionBodyItem& items(int index) const;
  ::ProfilerSectionBodyItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBodyItem >&
      items() const;

  // optional string DisplayName = 2;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBodyItem > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSectionMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSectionMetrics) */ {
 public:
  inline ProfilerSectionMetrics() : ProfilerSectionMetrics(nullptr) {}
  virtual ~ProfilerSectionMetrics();

  ProfilerSectionMetrics(const ProfilerSectionMetrics& from);
  ProfilerSectionMetrics(ProfilerSectionMetrics&& from) noexcept
    : ProfilerSectionMetrics() {
    *this = ::std::move(from);
  }

  inline ProfilerSectionMetrics& operator=(const ProfilerSectionMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSectionMetrics& operator=(ProfilerSectionMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSectionMetrics& default_instance();

  static inline const ProfilerSectionMetrics* internal_default_instance() {
    return reinterpret_cast<const ProfilerSectionMetrics*>(
               &_ProfilerSectionMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ProfilerSectionMetrics& a, ProfilerSectionMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSectionMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSectionMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSectionMetrics* New() const final {
    return CreateMaybeMessage<ProfilerSectionMetrics>(nullptr);
  }

  ProfilerSectionMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSectionMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSectionMetrics& from);
  void MergeFrom(const ProfilerSectionMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSectionMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSectionMetrics";
  }
  protected:
  explicit ProfilerSectionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // repeated .ProfilerSectionMetric Metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::ProfilerSectionMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
      mutable_metrics();
  private:
  const ::ProfilerSectionMetric& _internal_metrics(int index) const;
  ::ProfilerSectionMetric* _internal_add_metrics();
  public:
  const ::ProfilerSectionMetric& metrics(int index) const;
  ::ProfilerSectionMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
      metrics() const;

  // optional uint32 Order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSectionMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSection) */ {
 public:
  inline ProfilerSection() : ProfilerSection(nullptr) {}
  virtual ~ProfilerSection();

  ProfilerSection(const ProfilerSection& from);
  ProfilerSection(ProfilerSection&& from) noexcept
    : ProfilerSection() {
    *this = ::std::move(from);
  }

  inline ProfilerSection& operator=(const ProfilerSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSection& operator=(ProfilerSection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSection& default_instance();

  static inline const ProfilerSection* internal_default_instance() {
    return reinterpret_cast<const ProfilerSection*>(
               &_ProfilerSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ProfilerSection& a, ProfilerSection& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSection* New() const final {
    return CreateMaybeMessage<ProfilerSection>(nullptr);
  }

  ProfilerSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSection& from);
  void MergeFrom(const ProfilerSection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSection";
  }
  protected:
  explicit ProfilerSection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 5,
    kIdentifierFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 7,
    kExtendsFieldNumber = 9,
    kHeaderFieldNumber = 4,
    kMetricsFieldNumber = 6,
    kOrderFieldNumber = 3,
  };
  // repeated .ProfilerSectionBody Body = 5;
  int body_size() const;
  private:
  int _internal_body_size() const;
  public:
  void clear_body();
  ::ProfilerSectionBody* mutable_body(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBody >*
      mutable_body();
  private:
  const ::ProfilerSectionBody& _internal_body(int index) const;
  ::ProfilerSectionBody* _internal_add_body();
  public:
  const ::ProfilerSectionBody& body(int index) const;
  ::ProfilerSectionBody* add_body();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBody >&
      body() const;

  // required string Identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required string DisplayName = 2;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // optional string Description = 7;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string Extends = 9;
  bool has_extends() const;
  private:
  bool _internal_has_extends() const;
  public:
  void clear_extends();
  const std::string& extends() const;
  void set_extends(const std::string& value);
  void set_extends(std::string&& value);
  void set_extends(const char* value);
  void set_extends(const char* value, size_t size);
  std::string* mutable_extends();
  std::string* release_extends();
  void set_allocated_extends(std::string* extends);
  private:
  const std::string& _internal_extends() const;
  void _internal_set_extends(const std::string& value);
  std::string* _internal_mutable_extends();
  public:

  // optional .ProfilerSectionHeader Header = 4;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ProfilerSectionHeader& header() const;
  ::ProfilerSectionHeader* release_header();
  ::ProfilerSectionHeader* mutable_header();
  void set_allocated_header(::ProfilerSectionHeader* header);
  private:
  const ::ProfilerSectionHeader& _internal_header() const;
  ::ProfilerSectionHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ProfilerSectionHeader* header);
  ::ProfilerSectionHeader* unsafe_arena_release_header();

  // optional .ProfilerSectionMetrics Metrics = 6;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::ProfilerSectionMetrics& metrics() const;
  ::ProfilerSectionMetrics* release_metrics();
  ::ProfilerSectionMetrics* mutable_metrics();
  void set_allocated_metrics(::ProfilerSectionMetrics* metrics);
  private:
  const ::ProfilerSectionMetrics& _internal_metrics() const;
  ::ProfilerSectionMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::ProfilerSectionMetrics* metrics);
  ::ProfilerSectionMetrics* unsafe_arena_release_metrics();

  // optional uint32 Order = 3;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBody > body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extends_;
  ::ProfilerSectionHeader* header_;
  ::ProfilerSectionMetrics* metrics_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSections PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSections) */ {
 public:
  inline ProfilerSections() : ProfilerSections(nullptr) {}
  virtual ~ProfilerSections();

  ProfilerSections(const ProfilerSections& from);
  ProfilerSections(ProfilerSections&& from) noexcept
    : ProfilerSections() {
    *this = ::std::move(from);
  }

  inline ProfilerSections& operator=(const ProfilerSections& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSections& operator=(ProfilerSections&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSections& default_instance();

  static inline const ProfilerSections* internal_default_instance() {
    return reinterpret_cast<const ProfilerSections*>(
               &_ProfilerSections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ProfilerSections& a, ProfilerSections& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSections* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSections* New() const final {
    return CreateMaybeMessage<ProfilerSections>(nullptr);
  }

  ProfilerSections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSections>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSections& from);
  void MergeFrom(const ProfilerSections& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSections* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSections";
  }
  protected:
  explicit ProfilerSections(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerSection_2eproto);
    return ::descriptor_table_ProfilerSection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionsFieldNumber = 1,
  };
  // repeated .ProfilerSection Sections = 1;
  int sections_size() const;
  private:
  int _internal_sections_size() const;
  public:
  void clear_sections();
  ::ProfilerSection* mutable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >*
      mutable_sections();
  private:
  const ::ProfilerSection& _internal_sections(int index) const;
  ::ProfilerSection* _internal_add_sections();
  public:
  const ::ProfilerSection& sections(int index) const;
  ::ProfilerSection* add_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >&
      sections() const;

  // @@protoc_insertion_point(class_scope:ProfilerSections)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection > sections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProfilerSection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfilerSectionMetricOption

// required string Name = 1;
inline bool ProfilerSectionMetricOption::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMetricOption::has_name() const {
  return _internal_has_name();
}
inline void ProfilerSectionMetricOption::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMetricOption::name() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetricOption.Name)
  return _internal_name();
}
inline void ProfilerSectionMetricOption::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetricOption.Name)
}
inline std::string* ProfilerSectionMetricOption::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetricOption.Name)
  return _internal_mutable_name();
}
inline const std::string& ProfilerSectionMetricOption::_internal_name() const {
  return name_.Get();
}
inline void ProfilerSectionMetricOption::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMetricOption::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMetricOption.Name)
}
inline void ProfilerSectionMetricOption::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMetricOption.Name)
}
inline void ProfilerSectionMetricOption::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMetricOption.Name)
}
inline std::string* ProfilerSectionMetricOption::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMetricOption::release_name() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetricOption.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMetricOption::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetricOption.Name)
}

// optional string Label = 2;
inline bool ProfilerSectionMetricOption::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMetricOption::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMetricOption::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerSectionMetricOption::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetricOption.Label)
  return _internal_label();
}
inline void ProfilerSectionMetricOption::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetricOption.Label)
}
inline std::string* ProfilerSectionMetricOption::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetricOption.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMetricOption::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMetricOption::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMetricOption::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMetricOption.Label)
}
inline void ProfilerSectionMetricOption::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMetricOption.Label)
}
inline void ProfilerSectionMetricOption::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMetricOption.Label)
}
inline std::string* ProfilerSectionMetricOption::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMetricOption::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetricOption.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMetricOption::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetricOption.Label)
}

// optional .MetricOptionFilter Filter = 3;
inline bool ProfilerSectionMetricOption::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool ProfilerSectionMetricOption::has_filter() const {
  return _internal_has_filter();
}
inline const ::MetricOptionFilter& ProfilerSectionMetricOption::_internal_filter() const {
  const ::MetricOptionFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetricOptionFilter&>(
      ::_MetricOptionFilter_default_instance_);
}
inline const ::MetricOptionFilter& ProfilerSectionMetricOption::filter() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetricOption.Filter)
  return _internal_filter();
}
inline void ProfilerSectionMetricOption::unsafe_arena_set_allocated_filter(
    ::MetricOptionFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionMetricOption.Filter)
}
inline ::MetricOptionFilter* ProfilerSectionMetricOption::release_filter() {
  _has_bits_[0] &= ~0x00000004u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionMetricOption::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetricOption.Filter)
  _has_bits_[0] &= ~0x00000004u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionMetricOption::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetricOptionFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::MetricOptionFilter* ProfilerSectionMetricOption::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetricOption.Filter)
  return _internal_mutable_filter();
}
inline void ProfilerSectionMetricOption::set_allocated_filter(::MetricOptionFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetricOption.Filter)
}

// -------------------------------------------------------------------

// ProfilerSectionMetric

// required string Name = 1;
inline bool ProfilerSectionMetric::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMetric::has_name() const {
  return _internal_has_name();
}
inline void ProfilerSectionMetric::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMetric::name() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.Name)
  return _internal_name();
}
inline void ProfilerSectionMetric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetric.Name)
}
inline std::string* ProfilerSectionMetric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetric.Name)
  return _internal_mutable_name();
}
inline const std::string& ProfilerSectionMetric::_internal_name() const {
  return name_.Get();
}
inline void ProfilerSectionMetric::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMetric::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMetric.Name)
}
inline void ProfilerSectionMetric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMetric.Name)
}
inline void ProfilerSectionMetric::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMetric.Name)
}
inline std::string* ProfilerSectionMetric::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMetric::release_name() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetric.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMetric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetric.Name)
}

// optional string Label = 2;
inline bool ProfilerSectionMetric::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMetric::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMetric::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerSectionMetric::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.Label)
  return _internal_label();
}
inline void ProfilerSectionMetric::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetric.Label)
}
inline std::string* ProfilerSectionMetric::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetric.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMetric::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMetric::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMetric::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMetric.Label)
}
inline void ProfilerSectionMetric::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMetric.Label)
}
inline void ProfilerSectionMetric::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMetric.Label)
}
inline std::string* ProfilerSectionMetric::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMetric::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetric.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMetric::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetric.Label)
}

// optional .HWUnitType HWUnit = 3;
inline bool ProfilerSectionMetric::_internal_has_hwunit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfilerSectionMetric::has_hwunit() const {
  return _internal_has_hwunit();
}
inline void ProfilerSectionMetric::clear_hwunit() {
  hwunit_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::HWUnitType ProfilerSectionMetric::_internal_hwunit() const {
  return static_cast< ::HWUnitType >(hwunit_);
}
inline ::HWUnitType ProfilerSectionMetric::hwunit() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.HWUnit)
  return _internal_hwunit();
}
inline void ProfilerSectionMetric::_internal_set_hwunit(::HWUnitType value) {
  assert(::HWUnitType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  hwunit_ = value;
}
inline void ProfilerSectionMetric::set_hwunit(::HWUnitType value) {
  _internal_set_hwunit(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetric.HWUnit)
}

// optional bool ShowInstances = 4;
inline bool ProfilerSectionMetric::_internal_has_showinstances() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfilerSectionMetric::has_showinstances() const {
  return _internal_has_showinstances();
}
inline void ProfilerSectionMetric::clear_showinstances() {
  showinstances_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilerSectionMetric::_internal_showinstances() const {
  return showinstances_;
}
inline bool ProfilerSectionMetric::showinstances() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.ShowInstances)
  return _internal_showinstances();
}
inline void ProfilerSectionMetric::_internal_set_showinstances(bool value) {
  _has_bits_[0] |= 0x00000020u;
  showinstances_ = value;
}
inline void ProfilerSectionMetric::set_showinstances(bool value) {
  _internal_set_showinstances(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetric.ShowInstances)
}

// optional string Unit = 5;
inline bool ProfilerSectionMetric::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionMetric::has_unit() const {
  return _internal_has_unit();
}
inline void ProfilerSectionMetric::clear_unit() {
  unit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProfilerSectionMetric::unit() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.Unit)
  return _internal_unit();
}
inline void ProfilerSectionMetric::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetric.Unit)
}
inline std::string* ProfilerSectionMetric::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetric.Unit)
  return _internal_mutable_unit();
}
inline const std::string& ProfilerSectionMetric::_internal_unit() const {
  return unit_.Get();
}
inline void ProfilerSectionMetric::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMetric::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMetric.Unit)
}
inline void ProfilerSectionMetric::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMetric.Unit)
}
inline void ProfilerSectionMetric::set_unit(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMetric.Unit)
}
inline std::string* ProfilerSectionMetric::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000004u;
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMetric::release_unit() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetric.Unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMetric::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetric.Unit)
}

// optional .MetricOptionFilter Filter = 6;
inline bool ProfilerSectionMetric::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool ProfilerSectionMetric::has_filter() const {
  return _internal_has_filter();
}
inline const ::MetricOptionFilter& ProfilerSectionMetric::_internal_filter() const {
  const ::MetricOptionFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetricOptionFilter&>(
      ::_MetricOptionFilter_default_instance_);
}
inline const ::MetricOptionFilter& ProfilerSectionMetric::filter() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.Filter)
  return _internal_filter();
}
inline void ProfilerSectionMetric::unsafe_arena_set_allocated_filter(
    ::MetricOptionFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionMetric.Filter)
}
inline ::MetricOptionFilter* ProfilerSectionMetric::release_filter() {
  _has_bits_[0] &= ~0x00000008u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionMetric::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMetric.Filter)
  _has_bits_[0] &= ~0x00000008u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionMetric::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000008u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetricOptionFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::MetricOptionFilter* ProfilerSectionMetric::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetric.Filter)
  return _internal_mutable_filter();
}
inline void ProfilerSectionMetric::set_allocated_filter(::MetricOptionFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMetric.Filter)
}

// repeated .ProfilerSectionMetricOption Options = 7;
inline int ProfilerSectionMetric::_internal_options_size() const {
  return options_.size();
}
inline int ProfilerSectionMetric::options_size() const {
  return _internal_options_size();
}
inline void ProfilerSectionMetric::clear_options() {
  options_.Clear();
}
inline ::ProfilerSectionMetricOption* ProfilerSectionMetric::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetric.Options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetricOption >*
ProfilerSectionMetric::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionMetric.Options)
  return &options_;
}
inline const ::ProfilerSectionMetricOption& ProfilerSectionMetric::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::ProfilerSectionMetricOption& ProfilerSectionMetric::options(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetric.Options)
  return _internal_options(index);
}
inline ::ProfilerSectionMetricOption* ProfilerSectionMetric::_internal_add_options() {
  return options_.Add();
}
inline ::ProfilerSectionMetricOption* ProfilerSectionMetric::add_options() {
  // @@protoc_insertion_point(field_add:ProfilerSectionMetric.Options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetricOption >&
ProfilerSectionMetric::options() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionMetric.Options)
  return options_;
}

// -------------------------------------------------------------------

// ProfilerSectionHighlightX

// repeated .ProfilerSectionMetric Metrics = 1;
inline int ProfilerSectionHighlightX::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionHighlightX::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionHighlightX::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionHighlightX::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHighlightX.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionHighlightX::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionHighlightX.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionHighlightX::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionHighlightX::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHighlightX.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionHighlightX::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionHighlightX::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionHighlightX.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionHighlightX::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionHighlightX.Metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// ProfilerSectionTable

// optional string Label = 1;
inline bool ProfilerSectionTable::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionTable::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionTable::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionTable::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionTable.Label)
  return _internal_label();
}
inline void ProfilerSectionTable::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionTable.Label)
}
inline std::string* ProfilerSectionTable::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionTable.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionTable::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionTable::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionTable::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionTable.Label)
}
inline void ProfilerSectionTable::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionTable.Label)
}
inline void ProfilerSectionTable::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionTable.Label)
}
inline std::string* ProfilerSectionTable::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionTable::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionTable.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionTable::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionTable.Label)
}

// optional uint32 Rows = 2;
inline bool ProfilerSectionTable::_internal_has_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionTable::has_rows() const {
  return _internal_has_rows();
}
inline void ProfilerSectionTable::clear_rows() {
  rows_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionTable::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionTable::rows() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionTable.Rows)
  return _internal_rows();
}
inline void ProfilerSectionTable::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rows_ = value;
}
inline void ProfilerSectionTable::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionTable.Rows)
}

// required uint32 Columns = 3;
inline bool ProfilerSectionTable::_internal_has_columns() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionTable::has_columns() const {
  return _internal_has_columns();
}
inline void ProfilerSectionTable::clear_columns() {
  columns_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionTable::_internal_columns() const {
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionTable::columns() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionTable.Columns)
  return _internal_columns();
}
inline void ProfilerSectionTable::_internal_set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  columns_ = value;
}
inline void ProfilerSectionTable::set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionTable.Columns)
}

// optional .ProfilerSectionTable.LayoutOrder Order = 4;
inline bool ProfilerSectionTable::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionTable::has_order() const {
  return _internal_has_order();
}
inline void ProfilerSectionTable::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ProfilerSectionTable_LayoutOrder ProfilerSectionTable::_internal_order() const {
  return static_cast< ::ProfilerSectionTable_LayoutOrder >(order_);
}
inline ::ProfilerSectionTable_LayoutOrder ProfilerSectionTable::order() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionTable.Order)
  return _internal_order();
}
inline void ProfilerSectionTable::_internal_set_order(::ProfilerSectionTable_LayoutOrder value) {
  assert(::ProfilerSectionTable_LayoutOrder_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  order_ = value;
}
inline void ProfilerSectionTable::set_order(::ProfilerSectionTable_LayoutOrder value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionTable.Order)
}

// repeated .ProfilerSectionMetric Metrics = 5;
inline int ProfilerSectionTable::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionTable::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionTable::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionTable::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionTable.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionTable::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionTable.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionTable::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionTable::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionTable.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionTable::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionTable::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionTable.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionTable::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionTable.Metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// ProfilerSectionChartAxisRange

// optional int64 Min = 1;
inline bool ProfilerSectionChartAxisRange::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionChartAxisRange::has_min() const {
  return _internal_has_min();
}
inline void ProfilerSectionChartAxisRange::clear_min() {
  min_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartAxisRange::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartAxisRange::min() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartAxisRange.Min)
  return _internal_min();
}
inline void ProfilerSectionChartAxisRange::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void ProfilerSectionChartAxisRange::set_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartAxisRange.Min)
}

// optional int64 Max = 2;
inline bool ProfilerSectionChartAxisRange::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionChartAxisRange::has_max() const {
  return _internal_has_max();
}
inline void ProfilerSectionChartAxisRange::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartAxisRange::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartAxisRange::max() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartAxisRange.Max)
  return _internal_max();
}
inline void ProfilerSectionChartAxisRange::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void ProfilerSectionChartAxisRange::set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartAxisRange.Max)
}

// -------------------------------------------------------------------

// ProfilerSectionChartValueAxis

// optional string Label = 1;
inline bool ProfilerSectionChartValueAxis::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionChartValueAxis::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionChartValueAxis::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionChartValueAxis::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartValueAxis.Label)
  return _internal_label();
}
inline void ProfilerSectionChartValueAxis::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartValueAxis.Label)
}
inline std::string* ProfilerSectionChartValueAxis::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionChartValueAxis.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionChartValueAxis::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionChartValueAxis::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionChartValueAxis::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionChartValueAxis.Label)
}
inline void ProfilerSectionChartValueAxis::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionChartValueAxis.Label)
}
inline void ProfilerSectionChartValueAxis::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionChartValueAxis.Label)
}
inline std::string* ProfilerSectionChartValueAxis::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionChartValueAxis::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionChartValueAxis.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionChartValueAxis::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionChartValueAxis.Label)
}

// optional .ProfilerSectionChartAxisRange Range = 2;
inline bool ProfilerSectionChartValueAxis::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool ProfilerSectionChartValueAxis::has_range() const {
  return _internal_has_range();
}
inline void ProfilerSectionChartValueAxis::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilerSectionChartAxisRange& ProfilerSectionChartValueAxis::_internal_range() const {
  const ::ProfilerSectionChartAxisRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartAxisRange&>(
      ::_ProfilerSectionChartAxisRange_default_instance_);
}
inline const ::ProfilerSectionChartAxisRange& ProfilerSectionChartValueAxis::range() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartValueAxis.Range)
  return _internal_range();
}
inline void ProfilerSectionChartValueAxis::unsafe_arena_set_allocated_range(
    ::ProfilerSectionChartAxisRange* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionChartValueAxis.Range)
}
inline ::ProfilerSectionChartAxisRange* ProfilerSectionChartValueAxis::release_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartAxisRange* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartAxisRange* ProfilerSectionChartValueAxis::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:ProfilerSectionChartValueAxis.Range)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartAxisRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartAxisRange* ProfilerSectionChartValueAxis::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000002u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartAxisRange>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::ProfilerSectionChartAxisRange* ProfilerSectionChartValueAxis::mutable_range() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionChartValueAxis.Range)
  return _internal_mutable_range();
}
inline void ProfilerSectionChartValueAxis::set_allocated_range(::ProfilerSectionChartAxisRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionChartValueAxis.Range)
}

// optional int64 TickCount = 3;
inline bool ProfilerSectionChartValueAxis::_internal_has_tickcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionChartValueAxis::has_tickcount() const {
  return _internal_has_tickcount();
}
inline void ProfilerSectionChartValueAxis::clear_tickcount() {
  tickcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartValueAxis::_internal_tickcount() const {
  return tickcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartValueAxis::tickcount() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartValueAxis.TickCount)
  return _internal_tickcount();
}
inline void ProfilerSectionChartValueAxis::_internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  tickcount_ = value;
}
inline void ProfilerSectionChartValueAxis::set_tickcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tickcount(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartValueAxis.TickCount)
}

// optional int64 Size = 4;
inline bool ProfilerSectionChartValueAxis::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionChartValueAxis::has_size() const {
  return _internal_has_size();
}
inline void ProfilerSectionChartValueAxis::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartValueAxis::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartValueAxis::size() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartValueAxis.Size)
  return _internal_size();
}
inline void ProfilerSectionChartValueAxis::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void ProfilerSectionChartValueAxis::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartValueAxis.Size)
}

// optional uint32 Precision = 5;
inline bool ProfilerSectionChartValueAxis::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfilerSectionChartValueAxis::has_precision() const {
  return _internal_has_precision();
}
inline void ProfilerSectionChartValueAxis::clear_precision() {
  precision_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionChartValueAxis::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionChartValueAxis::precision() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartValueAxis.Precision)
  return _internal_precision();
}
inline void ProfilerSectionChartValueAxis::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  precision_ = value;
}
inline void ProfilerSectionChartValueAxis::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartValueAxis.Precision)
}

// -------------------------------------------------------------------

// ProfilerSectionChartCategoryAxis

// optional string Label = 1;
inline bool ProfilerSectionChartCategoryAxis::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionChartCategoryAxis::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionChartCategoryAxis::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionChartCategoryAxis::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartCategoryAxis.Label)
  return _internal_label();
}
inline void ProfilerSectionChartCategoryAxis::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartCategoryAxis.Label)
}
inline std::string* ProfilerSectionChartCategoryAxis::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionChartCategoryAxis.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionChartCategoryAxis::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionChartCategoryAxis::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionChartCategoryAxis::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionChartCategoryAxis.Label)
}
inline void ProfilerSectionChartCategoryAxis::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionChartCategoryAxis.Label)
}
inline void ProfilerSectionChartCategoryAxis::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionChartCategoryAxis.Label)
}
inline std::string* ProfilerSectionChartCategoryAxis::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionChartCategoryAxis::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionChartCategoryAxis.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionChartCategoryAxis::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionChartCategoryAxis.Label)
}

// -------------------------------------------------------------------

// ProfilerSectionChartHistogramAxis

// optional string Label = 1;
inline bool ProfilerSectionChartHistogramAxis::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionChartHistogramAxis::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionChartHistogramAxis::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionChartHistogramAxis::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartHistogramAxis.Label)
  return _internal_label();
}
inline void ProfilerSectionChartHistogramAxis::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartHistogramAxis.Label)
}
inline std::string* ProfilerSectionChartHistogramAxis::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionChartHistogramAxis.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionChartHistogramAxis::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionChartHistogramAxis::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionChartHistogramAxis::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionChartHistogramAxis.Label)
}
inline void ProfilerSectionChartHistogramAxis::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionChartHistogramAxis.Label)
}
inline void ProfilerSectionChartHistogramAxis::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionChartHistogramAxis.Label)
}
inline std::string* ProfilerSectionChartHistogramAxis::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionChartHistogramAxis::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionChartHistogramAxis.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionChartHistogramAxis::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionChartHistogramAxis.Label)
}

// optional int64 BinCount = 2;
inline bool ProfilerSectionChartHistogramAxis::_internal_has_bincount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionChartHistogramAxis::has_bincount() const {
  return _internal_has_bincount();
}
inline void ProfilerSectionChartHistogramAxis::clear_bincount() {
  bincount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartHistogramAxis::_internal_bincount() const {
  return bincount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilerSectionChartHistogramAxis::bincount() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionChartHistogramAxis.BinCount)
  return _internal_bincount();
}
inline void ProfilerSectionChartHistogramAxis::_internal_set_bincount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  bincount_ = value;
}
inline void ProfilerSectionChartHistogramAxis::set_bincount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bincount(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionChartHistogramAxis.BinCount)
}

// -------------------------------------------------------------------

// ProfilerSectionBarChart

// optional string Label = 1;
inline bool ProfilerSectionBarChart::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionBarChart::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionBarChart::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionBarChart::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBarChart.Label)
  return _internal_label();
}
inline void ProfilerSectionBarChart::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionBarChart.Label)
}
inline std::string* ProfilerSectionBarChart::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBarChart.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionBarChart::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionBarChart::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionBarChart::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionBarChart.Label)
}
inline void ProfilerSectionBarChart::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionBarChart.Label)
}
inline void ProfilerSectionBarChart::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionBarChart.Label)
}
inline std::string* ProfilerSectionBarChart::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionBarChart::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBarChart.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionBarChart::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBarChart.Label)
}

// optional .ProfilerSectionBarChart.Directions Direction = 2;
inline bool ProfilerSectionBarChart::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionBarChart::has_direction() const {
  return _internal_has_direction();
}
inline void ProfilerSectionBarChart::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ProfilerSectionBarChart_Directions ProfilerSectionBarChart::_internal_direction() const {
  return static_cast< ::ProfilerSectionBarChart_Directions >(direction_);
}
inline ::ProfilerSectionBarChart_Directions ProfilerSectionBarChart::direction() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBarChart.Direction)
  return _internal_direction();
}
inline void ProfilerSectionBarChart::_internal_set_direction(::ProfilerSectionBarChart_Directions value) {
  assert(::ProfilerSectionBarChart_Directions_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  direction_ = value;
}
inline void ProfilerSectionBarChart::set_direction(::ProfilerSectionBarChart_Directions value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionBarChart.Direction)
}

// optional .ProfilerSectionChartCategoryAxis CategoryAxis = 3;
inline bool ProfilerSectionBarChart::_internal_has_categoryaxis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || categoryaxis_ != nullptr);
  return value;
}
inline bool ProfilerSectionBarChart::has_categoryaxis() const {
  return _internal_has_categoryaxis();
}
inline void ProfilerSectionBarChart::clear_categoryaxis() {
  if (categoryaxis_ != nullptr) categoryaxis_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilerSectionChartCategoryAxis& ProfilerSectionBarChart::_internal_categoryaxis() const {
  const ::ProfilerSectionChartCategoryAxis* p = categoryaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartCategoryAxis&>(
      ::_ProfilerSectionChartCategoryAxis_default_instance_);
}
inline const ::ProfilerSectionChartCategoryAxis& ProfilerSectionBarChart::categoryaxis() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBarChart.CategoryAxis)
  return _internal_categoryaxis();
}
inline void ProfilerSectionBarChart::unsafe_arena_set_allocated_categoryaxis(
    ::ProfilerSectionChartCategoryAxis* categoryaxis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(categoryaxis_);
  }
  categoryaxis_ = categoryaxis;
  if (categoryaxis) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBarChart.CategoryAxis)
}
inline ::ProfilerSectionChartCategoryAxis* ProfilerSectionBarChart::release_categoryaxis() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartCategoryAxis* temp = categoryaxis_;
  categoryaxis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartCategoryAxis* ProfilerSectionBarChart::unsafe_arena_release_categoryaxis() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBarChart.CategoryAxis)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartCategoryAxis* temp = categoryaxis_;
  categoryaxis_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartCategoryAxis* ProfilerSectionBarChart::_internal_mutable_categoryaxis() {
  _has_bits_[0] |= 0x00000002u;
  if (categoryaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartCategoryAxis>(GetArena());
    categoryaxis_ = p;
  }
  return categoryaxis_;
}
inline ::ProfilerSectionChartCategoryAxis* ProfilerSectionBarChart::mutable_categoryaxis() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBarChart.CategoryAxis)
  return _internal_mutable_categoryaxis();
}
inline void ProfilerSectionBarChart::set_allocated_categoryaxis(::ProfilerSectionChartCategoryAxis* categoryaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete categoryaxis_;
  }
  if (categoryaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(categoryaxis);
    if (message_arena != submessage_arena) {
      categoryaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, categoryaxis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  categoryaxis_ = categoryaxis;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBarChart.CategoryAxis)
}

// optional .ProfilerSectionChartValueAxis ValueAxis = 4;
inline bool ProfilerSectionBarChart::_internal_has_valueaxis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || valueaxis_ != nullptr);
  return value;
}
inline bool ProfilerSectionBarChart::has_valueaxis() const {
  return _internal_has_valueaxis();
}
inline void ProfilerSectionBarChart::clear_valueaxis() {
  if (valueaxis_ != nullptr) valueaxis_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionBarChart::_internal_valueaxis() const {
  const ::ProfilerSectionChartValueAxis* p = valueaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartValueAxis&>(
      ::_ProfilerSectionChartValueAxis_default_instance_);
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionBarChart::valueaxis() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBarChart.ValueAxis)
  return _internal_valueaxis();
}
inline void ProfilerSectionBarChart::unsafe_arena_set_allocated_valueaxis(
    ::ProfilerSectionChartValueAxis* valueaxis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valueaxis_);
  }
  valueaxis_ = valueaxis;
  if (valueaxis) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBarChart.ValueAxis)
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionBarChart::release_valueaxis() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = valueaxis_;
  valueaxis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionBarChart::unsafe_arena_release_valueaxis() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBarChart.ValueAxis)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = valueaxis_;
  valueaxis_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionBarChart::_internal_mutable_valueaxis() {
  _has_bits_[0] |= 0x00000004u;
  if (valueaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartValueAxis>(GetArena());
    valueaxis_ = p;
  }
  return valueaxis_;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionBarChart::mutable_valueaxis() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBarChart.ValueAxis)
  return _internal_mutable_valueaxis();
}
inline void ProfilerSectionBarChart::set_allocated_valueaxis(::ProfilerSectionChartValueAxis* valueaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valueaxis_;
  }
  if (valueaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valueaxis);
    if (message_arena != submessage_arena) {
      valueaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valueaxis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  valueaxis_ = valueaxis;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBarChart.ValueAxis)
}

// repeated .ProfilerSectionMetric Metrics = 5;
inline int ProfilerSectionBarChart::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionBarChart::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionBarChart::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionBarChart::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBarChart.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionBarChart::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionBarChart.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionBarChart::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionBarChart::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBarChart.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionBarChart::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionBarChart::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionBarChart.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionBarChart::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionBarChart.Metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// ProfilerSectionHistogramChart

// optional string Label = 1;
inline bool ProfilerSectionHistogramChart::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionHistogramChart::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionHistogramChart::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionHistogramChart::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHistogramChart.Label)
  return _internal_label();
}
inline void ProfilerSectionHistogramChart::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionHistogramChart.Label)
}
inline std::string* ProfilerSectionHistogramChart::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHistogramChart.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionHistogramChart::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionHistogramChart::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionHistogramChart::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionHistogramChart.Label)
}
inline void ProfilerSectionHistogramChart::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionHistogramChart.Label)
}
inline void ProfilerSectionHistogramChart::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionHistogramChart.Label)
}
inline std::string* ProfilerSectionHistogramChart::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionHistogramChart::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionHistogramChart.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionHistogramChart::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionHistogramChart.Label)
}

// optional .ProfilerSectionChartHistogramAxis HistogramAxis = 2;
inline bool ProfilerSectionHistogramChart::_internal_has_histogramaxis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || histogramaxis_ != nullptr);
  return value;
}
inline bool ProfilerSectionHistogramChart::has_histogramaxis() const {
  return _internal_has_histogramaxis();
}
inline void ProfilerSectionHistogramChart::clear_histogramaxis() {
  if (histogramaxis_ != nullptr) histogramaxis_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilerSectionChartHistogramAxis& ProfilerSectionHistogramChart::_internal_histogramaxis() const {
  const ::ProfilerSectionChartHistogramAxis* p = histogramaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartHistogramAxis&>(
      ::_ProfilerSectionChartHistogramAxis_default_instance_);
}
inline const ::ProfilerSectionChartHistogramAxis& ProfilerSectionHistogramChart::histogramaxis() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHistogramChart.HistogramAxis)
  return _internal_histogramaxis();
}
inline void ProfilerSectionHistogramChart::unsafe_arena_set_allocated_histogramaxis(
    ::ProfilerSectionChartHistogramAxis* histogramaxis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogramaxis_);
  }
  histogramaxis_ = histogramaxis;
  if (histogramaxis) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionHistogramChart.HistogramAxis)
}
inline ::ProfilerSectionChartHistogramAxis* ProfilerSectionHistogramChart::release_histogramaxis() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartHistogramAxis* temp = histogramaxis_;
  histogramaxis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartHistogramAxis* ProfilerSectionHistogramChart::unsafe_arena_release_histogramaxis() {
  // @@protoc_insertion_point(field_release:ProfilerSectionHistogramChart.HistogramAxis)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartHistogramAxis* temp = histogramaxis_;
  histogramaxis_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartHistogramAxis* ProfilerSectionHistogramChart::_internal_mutable_histogramaxis() {
  _has_bits_[0] |= 0x00000002u;
  if (histogramaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartHistogramAxis>(GetArena());
    histogramaxis_ = p;
  }
  return histogramaxis_;
}
inline ::ProfilerSectionChartHistogramAxis* ProfilerSectionHistogramChart::mutable_histogramaxis() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHistogramChart.HistogramAxis)
  return _internal_mutable_histogramaxis();
}
inline void ProfilerSectionHistogramChart::set_allocated_histogramaxis(::ProfilerSectionChartHistogramAxis* histogramaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete histogramaxis_;
  }
  if (histogramaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histogramaxis);
    if (message_arena != submessage_arena) {
      histogramaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogramaxis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  histogramaxis_ = histogramaxis;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionHistogramChart.HistogramAxis)
}

// optional .ProfilerSectionChartValueAxis ValueAxis = 3;
inline bool ProfilerSectionHistogramChart::_internal_has_valueaxis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || valueaxis_ != nullptr);
  return value;
}
inline bool ProfilerSectionHistogramChart::has_valueaxis() const {
  return _internal_has_valueaxis();
}
inline void ProfilerSectionHistogramChart::clear_valueaxis() {
  if (valueaxis_ != nullptr) valueaxis_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionHistogramChart::_internal_valueaxis() const {
  const ::ProfilerSectionChartValueAxis* p = valueaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartValueAxis&>(
      ::_ProfilerSectionChartValueAxis_default_instance_);
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionHistogramChart::valueaxis() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHistogramChart.ValueAxis)
  return _internal_valueaxis();
}
inline void ProfilerSectionHistogramChart::unsafe_arena_set_allocated_valueaxis(
    ::ProfilerSectionChartValueAxis* valueaxis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valueaxis_);
  }
  valueaxis_ = valueaxis;
  if (valueaxis) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionHistogramChart.ValueAxis)
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionHistogramChart::release_valueaxis() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = valueaxis_;
  valueaxis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionHistogramChart::unsafe_arena_release_valueaxis() {
  // @@protoc_insertion_point(field_release:ProfilerSectionHistogramChart.ValueAxis)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = valueaxis_;
  valueaxis_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionHistogramChart::_internal_mutable_valueaxis() {
  _has_bits_[0] |= 0x00000004u;
  if (valueaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartValueAxis>(GetArena());
    valueaxis_ = p;
  }
  return valueaxis_;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionHistogramChart::mutable_valueaxis() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHistogramChart.ValueAxis)
  return _internal_mutable_valueaxis();
}
inline void ProfilerSectionHistogramChart::set_allocated_valueaxis(::ProfilerSectionChartValueAxis* valueaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete valueaxis_;
  }
  if (valueaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(valueaxis);
    if (message_arena != submessage_arena) {
      valueaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valueaxis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  valueaxis_ = valueaxis;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionHistogramChart.ValueAxis)
}

// required .ProfilerSectionMetric Metric = 4;
inline bool ProfilerSectionHistogramChart::_internal_has_metric() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || metric_ != nullptr);
  return value;
}
inline bool ProfilerSectionHistogramChart::has_metric() const {
  return _internal_has_metric();
}
inline void ProfilerSectionHistogramChart::clear_metric() {
  if (metric_ != nullptr) metric_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ProfilerSectionMetric& ProfilerSectionHistogramChart::_internal_metric() const {
  const ::ProfilerSectionMetric* p = metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMetric&>(
      ::_ProfilerSectionMetric_default_instance_);
}
inline const ::ProfilerSectionMetric& ProfilerSectionHistogramChart::metric() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHistogramChart.Metric)
  return _internal_metric();
}
inline void ProfilerSectionHistogramChart::unsafe_arena_set_allocated_metric(
    ::ProfilerSectionMetric* metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric_);
  }
  metric_ = metric;
  if (metric) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionHistogramChart.Metric)
}
inline ::ProfilerSectionMetric* ProfilerSectionHistogramChart::release_metric() {
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionMetric* temp = metric_;
  metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMetric* ProfilerSectionHistogramChart::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:ProfilerSectionHistogramChart.Metric)
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionMetric* temp = metric_;
  metric_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMetric* ProfilerSectionHistogramChart::_internal_mutable_metric() {
  _has_bits_[0] |= 0x00000008u;
  if (metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMetric>(GetArena());
    metric_ = p;
  }
  return metric_;
}
inline ::ProfilerSectionMetric* ProfilerSectionHistogramChart::mutable_metric() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHistogramChart.Metric)
  return _internal_mutable_metric();
}
inline void ProfilerSectionHistogramChart::set_allocated_metric(::ProfilerSectionMetric* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metric_;
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionHistogramChart.Metric)
}

// -------------------------------------------------------------------

// ProfilerSectionLineChart

// optional string Label = 1;
inline bool ProfilerSectionLineChart::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionLineChart::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionLineChart::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionLineChart::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionLineChart.Label)
  return _internal_label();
}
inline void ProfilerSectionLineChart::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionLineChart.Label)
}
inline std::string* ProfilerSectionLineChart::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionLineChart.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionLineChart::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionLineChart::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionLineChart::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionLineChart.Label)
}
inline void ProfilerSectionLineChart::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionLineChart.Label)
}
inline void ProfilerSectionLineChart::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionLineChart.Label)
}
inline std::string* ProfilerSectionLineChart::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionLineChart::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionLineChart.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionLineChart::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionLineChart.Label)
}

// optional .ProfilerSectionChartValueAxis AxisX = 2;
inline bool ProfilerSectionLineChart::_internal_has_axisx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || axisx_ != nullptr);
  return value;
}
inline bool ProfilerSectionLineChart::has_axisx() const {
  return _internal_has_axisx();
}
inline void ProfilerSectionLineChart::clear_axisx() {
  if (axisx_ != nullptr) axisx_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionLineChart::_internal_axisx() const {
  const ::ProfilerSectionChartValueAxis* p = axisx_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartValueAxis&>(
      ::_ProfilerSectionChartValueAxis_default_instance_);
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionLineChart::axisx() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionLineChart.AxisX)
  return _internal_axisx();
}
inline void ProfilerSectionLineChart::unsafe_arena_set_allocated_axisx(
    ::ProfilerSectionChartValueAxis* axisx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axisx_);
  }
  axisx_ = axisx;
  if (axisx) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionLineChart.AxisX)
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::release_axisx() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartValueAxis* temp = axisx_;
  axisx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::unsafe_arena_release_axisx() {
  // @@protoc_insertion_point(field_release:ProfilerSectionLineChart.AxisX)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionChartValueAxis* temp = axisx_;
  axisx_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::_internal_mutable_axisx() {
  _has_bits_[0] |= 0x00000002u;
  if (axisx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartValueAxis>(GetArena());
    axisx_ = p;
  }
  return axisx_;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::mutable_axisx() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionLineChart.AxisX)
  return _internal_mutable_axisx();
}
inline void ProfilerSectionLineChart::set_allocated_axisx(::ProfilerSectionChartValueAxis* axisx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete axisx_;
  }
  if (axisx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(axisx);
    if (message_arena != submessage_arena) {
      axisx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axisx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  axisx_ = axisx;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionLineChart.AxisX)
}

// optional .ProfilerSectionChartValueAxis AxisY = 3;
inline bool ProfilerSectionLineChart::_internal_has_axisy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || axisy_ != nullptr);
  return value;
}
inline bool ProfilerSectionLineChart::has_axisy() const {
  return _internal_has_axisy();
}
inline void ProfilerSectionLineChart::clear_axisy() {
  if (axisy_ != nullptr) axisy_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionLineChart::_internal_axisy() const {
  const ::ProfilerSectionChartValueAxis* p = axisy_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionChartValueAxis&>(
      ::_ProfilerSectionChartValueAxis_default_instance_);
}
inline const ::ProfilerSectionChartValueAxis& ProfilerSectionLineChart::axisy() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionLineChart.AxisY)
  return _internal_axisy();
}
inline void ProfilerSectionLineChart::unsafe_arena_set_allocated_axisy(
    ::ProfilerSectionChartValueAxis* axisy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axisy_);
  }
  axisy_ = axisy;
  if (axisy) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionLineChart.AxisY)
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::release_axisy() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = axisy_;
  axisy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::unsafe_arena_release_axisy() {
  // @@protoc_insertion_point(field_release:ProfilerSectionLineChart.AxisY)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionChartValueAxis* temp = axisy_;
  axisy_ = nullptr;
  return temp;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::_internal_mutable_axisy() {
  _has_bits_[0] |= 0x00000004u;
  if (axisy_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionChartValueAxis>(GetArena());
    axisy_ = p;
  }
  return axisy_;
}
inline ::ProfilerSectionChartValueAxis* ProfilerSectionLineChart::mutable_axisy() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionLineChart.AxisY)
  return _internal_mutable_axisy();
}
inline void ProfilerSectionLineChart::set_allocated_axisy(::ProfilerSectionChartValueAxis* axisy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete axisy_;
  }
  if (axisy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(axisy);
    if (message_arena != submessage_arena) {
      axisy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axisy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  axisy_ = axisy;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionLineChart.AxisY)
}

// repeated .ProfilerSectionMetric Metrics = 4;
inline int ProfilerSectionLineChart::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionLineChart::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionLineChart::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionLineChart::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionLineChart.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionLineChart::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionLineChart.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionLineChart::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionLineChart::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionLineChart.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionLineChart::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionLineChart::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionLineChart.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionLineChart::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionLineChart.Metrics)
  return metrics_;
}

// optional .ProfilerSectionHighlightX HighlightX = 5;
inline bool ProfilerSectionLineChart::_internal_has_highlightx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || highlightx_ != nullptr);
  return value;
}
inline bool ProfilerSectionLineChart::has_highlightx() const {
  return _internal_has_highlightx();
}
inline void ProfilerSectionLineChart::clear_highlightx() {
  if (highlightx_ != nullptr) highlightx_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ProfilerSectionHighlightX& ProfilerSectionLineChart::_internal_highlightx() const {
  const ::ProfilerSectionHighlightX* p = highlightx_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionHighlightX&>(
      ::_ProfilerSectionHighlightX_default_instance_);
}
inline const ::ProfilerSectionHighlightX& ProfilerSectionLineChart::highlightx() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionLineChart.HighlightX)
  return _internal_highlightx();
}
inline void ProfilerSectionLineChart::unsafe_arena_set_allocated_highlightx(
    ::ProfilerSectionHighlightX* highlightx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlightx_);
  }
  highlightx_ = highlightx;
  if (highlightx) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionLineChart.HighlightX)
}
inline ::ProfilerSectionHighlightX* ProfilerSectionLineChart::release_highlightx() {
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionHighlightX* temp = highlightx_;
  highlightx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionHighlightX* ProfilerSectionLineChart::unsafe_arena_release_highlightx() {
  // @@protoc_insertion_point(field_release:ProfilerSectionLineChart.HighlightX)
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionHighlightX* temp = highlightx_;
  highlightx_ = nullptr;
  return temp;
}
inline ::ProfilerSectionHighlightX* ProfilerSectionLineChart::_internal_mutable_highlightx() {
  _has_bits_[0] |= 0x00000008u;
  if (highlightx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionHighlightX>(GetArena());
    highlightx_ = p;
  }
  return highlightx_;
}
inline ::ProfilerSectionHighlightX* ProfilerSectionLineChart::mutable_highlightx() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionLineChart.HighlightX)
  return _internal_mutable_highlightx();
}
inline void ProfilerSectionLineChart::set_allocated_highlightx(::ProfilerSectionHighlightX* highlightx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete highlightx_;
  }
  if (highlightx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(highlightx);
    if (message_arena != submessage_arena) {
      highlightx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlightx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  highlightx_ = highlightx;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionLineChart.HighlightX)
}

// -------------------------------------------------------------------

// ProfilerSectionMemorySharedTable

// optional string Label = 1;
inline bool ProfilerSectionMemorySharedTable::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySharedTable::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMemorySharedTable::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMemorySharedTable::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySharedTable.Label)
  return _internal_label();
}
inline void ProfilerSectionMemorySharedTable::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySharedTable.Label)
}
inline std::string* ProfilerSectionMemorySharedTable::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMemorySharedTable.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMemorySharedTable::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMemorySharedTable::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMemorySharedTable::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMemorySharedTable.Label)
}
inline void ProfilerSectionMemorySharedTable::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMemorySharedTable.Label)
}
inline void ProfilerSectionMemorySharedTable::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMemorySharedTable.Label)
}
inline std::string* ProfilerSectionMemorySharedTable::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMemorySharedTable::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMemorySharedTable.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMemorySharedTable::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMemorySharedTable.Label)
}

// optional bool ShowLoads = 2;
inline bool ProfilerSectionMemorySharedTable::_internal_has_showloads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySharedTable::has_showloads() const {
  return _internal_has_showloads();
}
inline void ProfilerSectionMemorySharedTable::clear_showloads() {
  showloads_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilerSectionMemorySharedTable::_internal_showloads() const {
  return showloads_;
}
inline bool ProfilerSectionMemorySharedTable::showloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySharedTable.ShowLoads)
  return _internal_showloads();
}
inline void ProfilerSectionMemorySharedTable::_internal_set_showloads(bool value) {
  _has_bits_[0] |= 0x00000002u;
  showloads_ = value;
}
inline void ProfilerSectionMemorySharedTable::set_showloads(bool value) {
  _internal_set_showloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySharedTable.ShowLoads)
}

// optional bool ShowStores = 3;
inline bool ProfilerSectionMemorySharedTable::_internal_has_showstores() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySharedTable::has_showstores() const {
  return _internal_has_showstores();
}
inline void ProfilerSectionMemorySharedTable::clear_showstores() {
  showstores_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilerSectionMemorySharedTable::_internal_showstores() const {
  return showstores_;
}
inline bool ProfilerSectionMemorySharedTable::showstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySharedTable.ShowStores)
  return _internal_showstores();
}
inline void ProfilerSectionMemorySharedTable::_internal_set_showstores(bool value) {
  _has_bits_[0] |= 0x00000004u;
  showstores_ = value;
}
inline void ProfilerSectionMemorySharedTable::set_showstores(bool value) {
  _internal_set_showstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySharedTable.ShowStores)
}

// optional bool ShowAtomics = 4;
inline bool ProfilerSectionMemorySharedTable::_internal_has_showatomics() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySharedTable::has_showatomics() const {
  return _internal_has_showatomics();
}
inline void ProfilerSectionMemorySharedTable::clear_showatomics() {
  showatomics_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilerSectionMemorySharedTable::_internal_showatomics() const {
  return showatomics_;
}
inline bool ProfilerSectionMemorySharedTable::showatomics() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySharedTable.ShowAtomics)
  return _internal_showatomics();
}
inline void ProfilerSectionMemorySharedTable::_internal_set_showatomics(bool value) {
  _has_bits_[0] |= 0x00000008u;
  showatomics_ = value;
}
inline void ProfilerSectionMemorySharedTable::set_showatomics(bool value) {
  _internal_set_showatomics(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySharedTable.ShowAtomics)
}

// optional bool ShowTotals = 5;
inline bool ProfilerSectionMemorySharedTable::_internal_has_showtotals() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySharedTable::has_showtotals() const {
  return _internal_has_showtotals();
}
inline void ProfilerSectionMemorySharedTable::clear_showtotals() {
  showtotals_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilerSectionMemorySharedTable::_internal_showtotals() const {
  return showtotals_;
}
inline bool ProfilerSectionMemorySharedTable::showtotals() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySharedTable.ShowTotals)
  return _internal_showtotals();
}
inline void ProfilerSectionMemorySharedTable::_internal_set_showtotals(bool value) {
  _has_bits_[0] |= 0x00000010u;
  showtotals_ = value;
}
inline void ProfilerSectionMemorySharedTable::set_showtotals(bool value) {
  _internal_set_showtotals(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySharedTable.ShowTotals)
}

// -------------------------------------------------------------------

// ProfilerSectionMemoryFirstLevelCacheTable

// optional string Label = 1;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMemoryFirstLevelCacheTable::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.Label)
  return _internal_label();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.Label)
}
inline std::string* ProfilerSectionMemoryFirstLevelCacheTable::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMemoryFirstLevelCacheTable.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMemoryFirstLevelCacheTable::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMemoryFirstLevelCacheTable.Label)
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMemoryFirstLevelCacheTable.Label)
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMemoryFirstLevelCacheTable.Label)
}
inline std::string* ProfilerSectionMemoryFirstLevelCacheTable::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMemoryFirstLevelCacheTable::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMemoryFirstLevelCacheTable.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMemoryFirstLevelCacheTable.Label)
}

// optional bool ShowLoads = 2;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showloads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showloads() const {
  return _internal_has_showloads();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showloads() {
  showloads_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showloads() const {
  return showloads_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowLoads)
  return _internal_showloads();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showloads(bool value) {
  _has_bits_[0] |= 0x00000002u;
  showloads_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showloads(bool value) {
  _internal_set_showloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowLoads)
}

// optional bool ShowStores = 3;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showstores() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showstores() const {
  return _internal_has_showstores();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showstores() {
  showstores_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showstores() const {
  return showstores_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowStores)
  return _internal_showstores();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showstores(bool value) {
  _has_bits_[0] |= 0x00000004u;
  showstores_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showstores(bool value) {
  _internal_set_showstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowStores)
}

// optional bool ShowAtomics = 4;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showatomics() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showatomics() const {
  return _internal_has_showatomics();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showatomics() {
  showatomics_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showatomics() const {
  return showatomics_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showatomics() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowAtomics)
  return _internal_showatomics();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showatomics(bool value) {
  _has_bits_[0] |= 0x00000008u;
  showatomics_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showatomics(bool value) {
  _internal_set_showatomics(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowAtomics)
}

// optional bool ShowReductions = 5;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showreductions() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showreductions() const {
  return _internal_has_showreductions();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showreductions() {
  showreductions_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showreductions() const {
  return showreductions_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showreductions() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowReductions)
  return _internal_showreductions();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showreductions(bool value) {
  _has_bits_[0] |= 0x00000010u;
  showreductions_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showreductions(bool value) {
  _internal_set_showreductions(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowReductions)
}

// optional bool ShowGlobal = 6;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showglobal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showglobal() const {
  return _internal_has_showglobal();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showglobal() {
  showglobal_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showglobal() const {
  return showglobal_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showglobal() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowGlobal)
  return _internal_showglobal();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showglobal(bool value) {
  _has_bits_[0] |= 0x00000020u;
  showglobal_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showglobal(bool value) {
  _internal_set_showglobal(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowGlobal)
}

// optional bool ShowLocal = 7;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showlocal() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showlocal() const {
  return _internal_has_showlocal();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showlocal() {
  showlocal_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showlocal() const {
  return showlocal_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showlocal() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowLocal)
  return _internal_showlocal();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showlocal(bool value) {
  _has_bits_[0] |= 0x00000040u;
  showlocal_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showlocal(bool value) {
  _internal_set_showlocal(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowLocal)
}

// optional bool ShowSurface = 8;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showsurface() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showsurface() const {
  return _internal_has_showsurface();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showsurface() {
  showsurface_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showsurface() const {
  return showsurface_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showsurface() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowSurface)
  return _internal_showsurface();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showsurface(bool value) {
  _has_bits_[0] |= 0x00000080u;
  showsurface_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showsurface(bool value) {
  _internal_set_showsurface(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowSurface)
}

// optional bool ShowTexture = 9;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showtexture() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showtexture() const {
  return _internal_has_showtexture();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showtexture() {
  showtexture_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showtexture() const {
  return showtexture_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showtexture() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowTexture)
  return _internal_showtexture();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showtexture(bool value) {
  _has_bits_[0] |= 0x00000100u;
  showtexture_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showtexture(bool value) {
  _internal_set_showtexture(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowTexture)
}

// optional bool ShowTotalLoads = 10;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showtotalloads() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showtotalloads() const {
  return _internal_has_showtotalloads();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showtotalloads() {
  showtotalloads_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showtotalloads() const {
  return showtotalloads_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showtotalloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotalLoads)
  return _internal_showtotalloads();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showtotalloads(bool value) {
  _has_bits_[0] |= 0x00000200u;
  showtotalloads_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showtotalloads(bool value) {
  _internal_set_showtotalloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotalLoads)
}

// optional bool ShowTotalStores = 11;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showtotalstores() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showtotalstores() const {
  return _internal_has_showtotalstores();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showtotalstores() {
  showtotalstores_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showtotalstores() const {
  return showtotalstores_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showtotalstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotalStores)
  return _internal_showtotalstores();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showtotalstores(bool value) {
  _has_bits_[0] |= 0x00000400u;
  showtotalstores_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showtotalstores(bool value) {
  _internal_set_showtotalstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotalStores)
}

// optional bool ShowTotals = 12;
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_has_showtotals() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::has_showtotals() const {
  return _internal_has_showtotals();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::clear_showtotals() {
  showtotals_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::_internal_showtotals() const {
  return showtotals_;
}
inline bool ProfilerSectionMemoryFirstLevelCacheTable::showtotals() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotals)
  return _internal_showtotals();
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::_internal_set_showtotals(bool value) {
  _has_bits_[0] |= 0x00000800u;
  showtotals_ = value;
}
inline void ProfilerSectionMemoryFirstLevelCacheTable::set_showtotals(bool value) {
  _internal_set_showtotals(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryFirstLevelCacheTable.ShowTotals)
}

// -------------------------------------------------------------------

// ProfilerSectionMemorySecondLevelCacheTable

// optional string Label = 1;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMemorySecondLevelCacheTable::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.Label)
  return _internal_label();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.Label)
}
inline std::string* ProfilerSectionMemorySecondLevelCacheTable::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMemorySecondLevelCacheTable.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMemorySecondLevelCacheTable::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMemorySecondLevelCacheTable.Label)
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMemorySecondLevelCacheTable.Label)
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMemorySecondLevelCacheTable.Label)
}
inline std::string* ProfilerSectionMemorySecondLevelCacheTable::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMemorySecondLevelCacheTable::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMemorySecondLevelCacheTable.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMemorySecondLevelCacheTable.Label)
}

// optional bool ShowLoads = 2;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showloads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showloads() const {
  return _internal_has_showloads();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showloads() {
  showloads_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showloads() const {
  return showloads_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowLoads)
  return _internal_showloads();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showloads(bool value) {
  _has_bits_[0] |= 0x00000002u;
  showloads_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showloads(bool value) {
  _internal_set_showloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowLoads)
}

// optional bool ShowStores = 3;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showstores() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showstores() const {
  return _internal_has_showstores();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showstores() {
  showstores_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showstores() const {
  return showstores_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowStores)
  return _internal_showstores();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showstores(bool value) {
  _has_bits_[0] |= 0x00000004u;
  showstores_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showstores(bool value) {
  _internal_set_showstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowStores)
}

// optional bool ShowAtomics = 4;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showatomics() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showatomics() const {
  return _internal_has_showatomics();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showatomics() {
  showatomics_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showatomics() const {
  return showatomics_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showatomics() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowAtomics)
  return _internal_showatomics();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showatomics(bool value) {
  _has_bits_[0] |= 0x00000008u;
  showatomics_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showatomics(bool value) {
  _internal_set_showatomics(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowAtomics)
}

// optional bool ShowReductions = 5;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showreductions() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showreductions() const {
  return _internal_has_showreductions();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showreductions() {
  showreductions_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showreductions() const {
  return showreductions_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showreductions() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowReductions)
  return _internal_showreductions();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showreductions(bool value) {
  _has_bits_[0] |= 0x00000010u;
  showreductions_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showreductions(bool value) {
  _internal_set_showreductions(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowReductions)
}

// optional bool ShowGlobal = 6;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showglobal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showglobal() const {
  return _internal_has_showglobal();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showglobal() {
  showglobal_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showglobal() const {
  return showglobal_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showglobal() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowGlobal)
  return _internal_showglobal();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showglobal(bool value) {
  _has_bits_[0] |= 0x00000020u;
  showglobal_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showglobal(bool value) {
  _internal_set_showglobal(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowGlobal)
}

// optional bool ShowLocal = 7;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showlocal() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showlocal() const {
  return _internal_has_showlocal();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showlocal() {
  showlocal_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showlocal() const {
  return showlocal_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showlocal() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowLocal)
  return _internal_showlocal();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showlocal(bool value) {
  _has_bits_[0] |= 0x00000040u;
  showlocal_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showlocal(bool value) {
  _internal_set_showlocal(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowLocal)
}

// optional bool ShowSurface = 8;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showsurface() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showsurface() const {
  return _internal_has_showsurface();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showsurface() {
  showsurface_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showsurface() const {
  return showsurface_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showsurface() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowSurface)
  return _internal_showsurface();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showsurface(bool value) {
  _has_bits_[0] |= 0x00000080u;
  showsurface_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showsurface(bool value) {
  _internal_set_showsurface(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowSurface)
}

// optional bool ShowTexture = 9;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showtexture() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showtexture() const {
  return _internal_has_showtexture();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showtexture() {
  showtexture_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showtexture() const {
  return showtexture_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showtexture() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowTexture)
  return _internal_showtexture();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showtexture(bool value) {
  _has_bits_[0] |= 0x00000100u;
  showtexture_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showtexture(bool value) {
  _internal_set_showtexture(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowTexture)
}

// optional bool ShowTotalLoads = 10;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showtotalloads() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showtotalloads() const {
  return _internal_has_showtotalloads();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showtotalloads() {
  showtotalloads_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showtotalloads() const {
  return showtotalloads_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showtotalloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowTotalLoads)
  return _internal_showtotalloads();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showtotalloads(bool value) {
  _has_bits_[0] |= 0x00000200u;
  showtotalloads_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showtotalloads(bool value) {
  _internal_set_showtotalloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowTotalLoads)
}

// optional bool ShowTotalStores = 11;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showtotalstores() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showtotalstores() const {
  return _internal_has_showtotalstores();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showtotalstores() {
  showtotalstores_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showtotalstores() const {
  return showtotalstores_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showtotalstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowTotalStores)
  return _internal_showtotalstores();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showtotalstores(bool value) {
  _has_bits_[0] |= 0x00000400u;
  showtotalstores_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showtotalstores(bool value) {
  _internal_set_showtotalstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowTotalStores)
}

// optional bool ShowTotals = 12;
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_has_showtotals() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::has_showtotals() const {
  return _internal_has_showtotals();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::clear_showtotals() {
  showtotals_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::_internal_showtotals() const {
  return showtotals_;
}
inline bool ProfilerSectionMemorySecondLevelCacheTable::showtotals() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemorySecondLevelCacheTable.ShowTotals)
  return _internal_showtotals();
}
inline void ProfilerSectionMemorySecondLevelCacheTable::_internal_set_showtotals(bool value) {
  _has_bits_[0] |= 0x00000800u;
  showtotals_ = value;
}
inline void ProfilerSectionMemorySecondLevelCacheTable::set_showtotals(bool value) {
  _internal_set_showtotals(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemorySecondLevelCacheTable.ShowTotals)
}

// -------------------------------------------------------------------

// ProfilerSectionMemoryDeviceMemoryTable

// optional string Label = 1;
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMemoryDeviceMemoryTable::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryDeviceMemoryTable.Label)
  return _internal_label();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryDeviceMemoryTable.Label)
}
inline std::string* ProfilerSectionMemoryDeviceMemoryTable::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMemoryDeviceMemoryTable.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMemoryDeviceMemoryTable::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMemoryDeviceMemoryTable.Label)
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMemoryDeviceMemoryTable.Label)
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMemoryDeviceMemoryTable.Label)
}
inline std::string* ProfilerSectionMemoryDeviceMemoryTable::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMemoryDeviceMemoryTable::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMemoryDeviceMemoryTable.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMemoryDeviceMemoryTable.Label)
}

// optional bool ShowLoads = 2;
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_has_showloads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::has_showloads() const {
  return _internal_has_showloads();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::clear_showloads() {
  showloads_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_showloads() const {
  return showloads_;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::showloads() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryDeviceMemoryTable.ShowLoads)
  return _internal_showloads();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::_internal_set_showloads(bool value) {
  _has_bits_[0] |= 0x00000002u;
  showloads_ = value;
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_showloads(bool value) {
  _internal_set_showloads(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryDeviceMemoryTable.ShowLoads)
}

// optional bool ShowStores = 3;
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_has_showstores() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::has_showstores() const {
  return _internal_has_showstores();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::clear_showstores() {
  showstores_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_showstores() const {
  return showstores_;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::showstores() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryDeviceMemoryTable.ShowStores)
  return _internal_showstores();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::_internal_set_showstores(bool value) {
  _has_bits_[0] |= 0x00000004u;
  showstores_ = value;
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_showstores(bool value) {
  _internal_set_showstores(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryDeviceMemoryTable.ShowStores)
}

// optional bool ShowTotals = 4;
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_has_showtotals() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::has_showtotals() const {
  return _internal_has_showtotals();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::clear_showtotals() {
  showtotals_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::_internal_showtotals() const {
  return showtotals_;
}
inline bool ProfilerSectionMemoryDeviceMemoryTable::showtotals() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryDeviceMemoryTable.ShowTotals)
  return _internal_showtotals();
}
inline void ProfilerSectionMemoryDeviceMemoryTable::_internal_set_showtotals(bool value) {
  _has_bits_[0] |= 0x00000008u;
  showtotals_ = value;
}
inline void ProfilerSectionMemoryDeviceMemoryTable::set_showtotals(bool value) {
  _internal_set_showtotals(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryDeviceMemoryTable.ShowTotals)
}

// -------------------------------------------------------------------

// ProfilerSectionMemoryChart

// optional string Label = 1;
inline bool ProfilerSectionMemoryChart::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMemoryChart::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionMemoryChart::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionMemoryChart::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMemoryChart.Label)
  return _internal_label();
}
inline void ProfilerSectionMemoryChart::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMemoryChart.Label)
}
inline std::string* ProfilerSectionMemoryChart::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMemoryChart.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionMemoryChart::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionMemoryChart::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionMemoryChart::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionMemoryChart.Label)
}
inline void ProfilerSectionMemoryChart::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionMemoryChart.Label)
}
inline void ProfilerSectionMemoryChart::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionMemoryChart.Label)
}
inline std::string* ProfilerSectionMemoryChart::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionMemoryChart::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionMemoryChart.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionMemoryChart::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionMemoryChart.Label)
}

// -------------------------------------------------------------------

// ProfilerSectionGfxMetricsWidget

// required string Type = 1;
inline bool ProfilerSectionGfxMetricsWidget::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionGfxMetricsWidget::has_type() const {
  return _internal_has_type();
}
inline void ProfilerSectionGfxMetricsWidget::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionGfxMetricsWidget::type() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionGfxMetricsWidget.Type)
  return _internal_type();
}
inline void ProfilerSectionGfxMetricsWidget::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionGfxMetricsWidget.Type)
}
inline std::string* ProfilerSectionGfxMetricsWidget::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionGfxMetricsWidget.Type)
  return _internal_mutable_type();
}
inline const std::string& ProfilerSectionGfxMetricsWidget::_internal_type() const {
  return type_.Get();
}
inline void ProfilerSectionGfxMetricsWidget::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionGfxMetricsWidget::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionGfxMetricsWidget.Type)
}
inline void ProfilerSectionGfxMetricsWidget::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionGfxMetricsWidget.Type)
}
inline void ProfilerSectionGfxMetricsWidget::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionGfxMetricsWidget.Type)
}
inline std::string* ProfilerSectionGfxMetricsWidget::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionGfxMetricsWidget::release_type() {
  // @@protoc_insertion_point(field_release:ProfilerSectionGfxMetricsWidget.Type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionGfxMetricsWidget::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionGfxMetricsWidget.Type)
}

// optional string Label = 2;
inline bool ProfilerSectionGfxMetricsWidget::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSectionGfxMetricsWidget::has_label() const {
  return _internal_has_label();
}
inline void ProfilerSectionGfxMetricsWidget::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerSectionGfxMetricsWidget::label() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionGfxMetricsWidget.Label)
  return _internal_label();
}
inline void ProfilerSectionGfxMetricsWidget::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionGfxMetricsWidget.Label)
}
inline std::string* ProfilerSectionGfxMetricsWidget::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionGfxMetricsWidget.Label)
  return _internal_mutable_label();
}
inline const std::string& ProfilerSectionGfxMetricsWidget::_internal_label() const {
  return label_.Get();
}
inline void ProfilerSectionGfxMetricsWidget::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionGfxMetricsWidget::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionGfxMetricsWidget.Label)
}
inline void ProfilerSectionGfxMetricsWidget::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionGfxMetricsWidget.Label)
}
inline void ProfilerSectionGfxMetricsWidget::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionGfxMetricsWidget.Label)
}
inline std::string* ProfilerSectionGfxMetricsWidget::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionGfxMetricsWidget::release_label() {
  // @@protoc_insertion_point(field_release:ProfilerSectionGfxMetricsWidget.Label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionGfxMetricsWidget::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionGfxMetricsWidget.Label)
}

// repeated .ProfilerSectionMetric Metrics = 3;
inline int ProfilerSectionGfxMetricsWidget::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionGfxMetricsWidget::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionGfxMetricsWidget::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionGfxMetricsWidget::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionGfxMetricsWidget.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionGfxMetricsWidget::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionGfxMetricsWidget.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionGfxMetricsWidget::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionGfxMetricsWidget::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionGfxMetricsWidget.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionGfxMetricsWidget::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionGfxMetricsWidget::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionGfxMetricsWidget.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionGfxMetricsWidget::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionGfxMetricsWidget.Metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// ProfilerSectionHeader

// optional uint32 Rows = 1;
inline bool ProfilerSectionHeader::_internal_has_rows() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionHeader::has_rows() const {
  return _internal_has_rows();
}
inline void ProfilerSectionHeader::clear_rows() {
  rows_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionHeader::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionHeader::rows() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHeader.Rows)
  return _internal_rows();
}
inline void ProfilerSectionHeader::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rows_ = value;
}
inline void ProfilerSectionHeader::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionHeader.Rows)
}

// repeated .ProfilerSectionMetric Metrics = 2;
inline int ProfilerSectionHeader::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionHeader::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionHeader::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionHeader::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionHeader.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionHeader::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionHeader.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionHeader::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionHeader::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionHeader.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionHeader::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionHeader::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionHeader.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionHeader::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionHeader.Metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// ProfilerSectionBodyItem

// optional .ProfilerSectionTable Table = 1;
inline bool ProfilerSectionBodyItem::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_table() const {
  return _internal_has_table();
}
inline void ProfilerSectionBodyItem::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfilerSectionTable& ProfilerSectionBodyItem::_internal_table() const {
  const ::ProfilerSectionTable* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionTable&>(
      ::_ProfilerSectionTable_default_instance_);
}
inline const ::ProfilerSectionTable& ProfilerSectionBodyItem::table() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.Table)
  return _internal_table();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_table(
    ::ProfilerSectionTable* table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.Table)
}
inline ::ProfilerSectionTable* ProfilerSectionBodyItem::release_table() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfilerSectionTable* temp = table_;
  table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionTable* ProfilerSectionBodyItem::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.Table)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfilerSectionTable* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::ProfilerSectionTable* ProfilerSectionBodyItem::_internal_mutable_table() {
  _has_bits_[0] |= 0x00000001u;
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionTable>(GetArena());
    table_ = p;
  }
  return table_;
}
inline ::ProfilerSectionTable* ProfilerSectionBodyItem::mutable_table() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.Table)
  return _internal_mutable_table();
}
inline void ProfilerSectionBodyItem::set_allocated_table(::ProfilerSectionTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.Table)
}

// optional .ProfilerSectionBarChart BarChart = 2;
inline bool ProfilerSectionBodyItem::_internal_has_barchart() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || barchart_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_barchart() const {
  return _internal_has_barchart();
}
inline void ProfilerSectionBodyItem::clear_barchart() {
  if (barchart_ != nullptr) barchart_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilerSectionBarChart& ProfilerSectionBodyItem::_internal_barchart() const {
  const ::ProfilerSectionBarChart* p = barchart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionBarChart&>(
      ::_ProfilerSectionBarChart_default_instance_);
}
inline const ::ProfilerSectionBarChart& ProfilerSectionBodyItem::barchart() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.BarChart)
  return _internal_barchart();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_barchart(
    ::ProfilerSectionBarChart* barchart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barchart_);
  }
  barchart_ = barchart;
  if (barchart) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.BarChart)
}
inline ::ProfilerSectionBarChart* ProfilerSectionBodyItem::release_barchart() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionBarChart* temp = barchart_;
  barchart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionBarChart* ProfilerSectionBodyItem::unsafe_arena_release_barchart() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.BarChart)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionBarChart* temp = barchart_;
  barchart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionBarChart* ProfilerSectionBodyItem::_internal_mutable_barchart() {
  _has_bits_[0] |= 0x00000002u;
  if (barchart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionBarChart>(GetArena());
    barchart_ = p;
  }
  return barchart_;
}
inline ::ProfilerSectionBarChart* ProfilerSectionBodyItem::mutable_barchart() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.BarChart)
  return _internal_mutable_barchart();
}
inline void ProfilerSectionBodyItem::set_allocated_barchart(::ProfilerSectionBarChart* barchart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete barchart_;
  }
  if (barchart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(barchart);
    if (message_arena != submessage_arena) {
      barchart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barchart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  barchart_ = barchart;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.BarChart)
}

// optional .ProfilerSectionHistogramChart HistogramChart = 3;
inline bool ProfilerSectionBodyItem::_internal_has_histogramchart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || histogramchart_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_histogramchart() const {
  return _internal_has_histogramchart();
}
inline void ProfilerSectionBodyItem::clear_histogramchart() {
  if (histogramchart_ != nullptr) histogramchart_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProfilerSectionHistogramChart& ProfilerSectionBodyItem::_internal_histogramchart() const {
  const ::ProfilerSectionHistogramChart* p = histogramchart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionHistogramChart&>(
      ::_ProfilerSectionHistogramChart_default_instance_);
}
inline const ::ProfilerSectionHistogramChart& ProfilerSectionBodyItem::histogramchart() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.HistogramChart)
  return _internal_histogramchart();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_histogramchart(
    ::ProfilerSectionHistogramChart* histogramchart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogramchart_);
  }
  histogramchart_ = histogramchart;
  if (histogramchart) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.HistogramChart)
}
inline ::ProfilerSectionHistogramChart* ProfilerSectionBodyItem::release_histogramchart() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionHistogramChart* temp = histogramchart_;
  histogramchart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionHistogramChart* ProfilerSectionBodyItem::unsafe_arena_release_histogramchart() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.HistogramChart)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionHistogramChart* temp = histogramchart_;
  histogramchart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionHistogramChart* ProfilerSectionBodyItem::_internal_mutable_histogramchart() {
  _has_bits_[0] |= 0x00000004u;
  if (histogramchart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionHistogramChart>(GetArena());
    histogramchart_ = p;
  }
  return histogramchart_;
}
inline ::ProfilerSectionHistogramChart* ProfilerSectionBodyItem::mutable_histogramchart() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.HistogramChart)
  return _internal_mutable_histogramchart();
}
inline void ProfilerSectionBodyItem::set_allocated_histogramchart(::ProfilerSectionHistogramChart* histogramchart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete histogramchart_;
  }
  if (histogramchart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histogramchart);
    if (message_arena != submessage_arena) {
      histogramchart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogramchart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  histogramchart_ = histogramchart;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.HistogramChart)
}

// optional .ProfilerSectionLineChart LineChart = 4;
inline bool ProfilerSectionBodyItem::_internal_has_linechart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || linechart_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_linechart() const {
  return _internal_has_linechart();
}
inline void ProfilerSectionBodyItem::clear_linechart() {
  if (linechart_ != nullptr) linechart_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ProfilerSectionLineChart& ProfilerSectionBodyItem::_internal_linechart() const {
  const ::ProfilerSectionLineChart* p = linechart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionLineChart&>(
      ::_ProfilerSectionLineChart_default_instance_);
}
inline const ::ProfilerSectionLineChart& ProfilerSectionBodyItem::linechart() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.LineChart)
  return _internal_linechart();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_linechart(
    ::ProfilerSectionLineChart* linechart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linechart_);
  }
  linechart_ = linechart;
  if (linechart) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.LineChart)
}
inline ::ProfilerSectionLineChart* ProfilerSectionBodyItem::release_linechart() {
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionLineChart* temp = linechart_;
  linechart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionLineChart* ProfilerSectionBodyItem::unsafe_arena_release_linechart() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.LineChart)
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionLineChart* temp = linechart_;
  linechart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionLineChart* ProfilerSectionBodyItem::_internal_mutable_linechart() {
  _has_bits_[0] |= 0x00000008u;
  if (linechart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionLineChart>(GetArena());
    linechart_ = p;
  }
  return linechart_;
}
inline ::ProfilerSectionLineChart* ProfilerSectionBodyItem::mutable_linechart() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.LineChart)
  return _internal_mutable_linechart();
}
inline void ProfilerSectionBodyItem::set_allocated_linechart(::ProfilerSectionLineChart* linechart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linechart_;
  }
  if (linechart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linechart);
    if (message_arena != submessage_arena) {
      linechart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linechart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linechart_ = linechart;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.LineChart)
}

// optional .ProfilerSectionMemorySharedTable MemorySharedTable = 101;
inline bool ProfilerSectionBodyItem::_internal_has_memorysharedtable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || memorysharedtable_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_memorysharedtable() const {
  return _internal_has_memorysharedtable();
}
inline void ProfilerSectionBodyItem::clear_memorysharedtable() {
  if (memorysharedtable_ != nullptr) memorysharedtable_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ProfilerSectionMemorySharedTable& ProfilerSectionBodyItem::_internal_memorysharedtable() const {
  const ::ProfilerSectionMemorySharedTable* p = memorysharedtable_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMemorySharedTable&>(
      ::_ProfilerSectionMemorySharedTable_default_instance_);
}
inline const ::ProfilerSectionMemorySharedTable& ProfilerSectionBodyItem::memorysharedtable() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.MemorySharedTable)
  return _internal_memorysharedtable();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_memorysharedtable(
    ::ProfilerSectionMemorySharedTable* memorysharedtable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memorysharedtable_);
  }
  memorysharedtable_ = memorysharedtable;
  if (memorysharedtable) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.MemorySharedTable)
}
inline ::ProfilerSectionMemorySharedTable* ProfilerSectionBodyItem::release_memorysharedtable() {
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionMemorySharedTable* temp = memorysharedtable_;
  memorysharedtable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMemorySharedTable* ProfilerSectionBodyItem::unsafe_arena_release_memorysharedtable() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.MemorySharedTable)
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionMemorySharedTable* temp = memorysharedtable_;
  memorysharedtable_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMemorySharedTable* ProfilerSectionBodyItem::_internal_mutable_memorysharedtable() {
  _has_bits_[0] |= 0x00000010u;
  if (memorysharedtable_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMemorySharedTable>(GetArena());
    memorysharedtable_ = p;
  }
  return memorysharedtable_;
}
inline ::ProfilerSectionMemorySharedTable* ProfilerSectionBodyItem::mutable_memorysharedtable() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.MemorySharedTable)
  return _internal_mutable_memorysharedtable();
}
inline void ProfilerSectionBodyItem::set_allocated_memorysharedtable(::ProfilerSectionMemorySharedTable* memorysharedtable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memorysharedtable_;
  }
  if (memorysharedtable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memorysharedtable);
    if (message_arena != submessage_arena) {
      memorysharedtable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memorysharedtable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  memorysharedtable_ = memorysharedtable;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.MemorySharedTable)
}

// optional .ProfilerSectionMemoryFirstLevelCacheTable MemoryFirstLevelCacheTable = 102;
inline bool ProfilerSectionBodyItem::_internal_has_memoryfirstlevelcachetable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || memoryfirstlevelcachetable_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_memoryfirstlevelcachetable() const {
  return _internal_has_memoryfirstlevelcachetable();
}
inline void ProfilerSectionBodyItem::clear_memoryfirstlevelcachetable() {
  if (memoryfirstlevelcachetable_ != nullptr) memoryfirstlevelcachetable_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ProfilerSectionMemoryFirstLevelCacheTable& ProfilerSectionBodyItem::_internal_memoryfirstlevelcachetable() const {
  const ::ProfilerSectionMemoryFirstLevelCacheTable* p = memoryfirstlevelcachetable_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMemoryFirstLevelCacheTable&>(
      ::_ProfilerSectionMemoryFirstLevelCacheTable_default_instance_);
}
inline const ::ProfilerSectionMemoryFirstLevelCacheTable& ProfilerSectionBodyItem::memoryfirstlevelcachetable() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.MemoryFirstLevelCacheTable)
  return _internal_memoryfirstlevelcachetable();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_memoryfirstlevelcachetable(
    ::ProfilerSectionMemoryFirstLevelCacheTable* memoryfirstlevelcachetable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memoryfirstlevelcachetable_);
  }
  memoryfirstlevelcachetable_ = memoryfirstlevelcachetable;
  if (memoryfirstlevelcachetable) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.MemoryFirstLevelCacheTable)
}
inline ::ProfilerSectionMemoryFirstLevelCacheTable* ProfilerSectionBodyItem::release_memoryfirstlevelcachetable() {
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSectionMemoryFirstLevelCacheTable* temp = memoryfirstlevelcachetable_;
  memoryfirstlevelcachetable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMemoryFirstLevelCacheTable* ProfilerSectionBodyItem::unsafe_arena_release_memoryfirstlevelcachetable() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.MemoryFirstLevelCacheTable)
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSectionMemoryFirstLevelCacheTable* temp = memoryfirstlevelcachetable_;
  memoryfirstlevelcachetable_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMemoryFirstLevelCacheTable* ProfilerSectionBodyItem::_internal_mutable_memoryfirstlevelcachetable() {
  _has_bits_[0] |= 0x00000020u;
  if (memoryfirstlevelcachetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMemoryFirstLevelCacheTable>(GetArena());
    memoryfirstlevelcachetable_ = p;
  }
  return memoryfirstlevelcachetable_;
}
inline ::ProfilerSectionMemoryFirstLevelCacheTable* ProfilerSectionBodyItem::mutable_memoryfirstlevelcachetable() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.MemoryFirstLevelCacheTable)
  return _internal_mutable_memoryfirstlevelcachetable();
}
inline void ProfilerSectionBodyItem::set_allocated_memoryfirstlevelcachetable(::ProfilerSectionMemoryFirstLevelCacheTable* memoryfirstlevelcachetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memoryfirstlevelcachetable_;
  }
  if (memoryfirstlevelcachetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memoryfirstlevelcachetable);
    if (message_arena != submessage_arena) {
      memoryfirstlevelcachetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memoryfirstlevelcachetable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  memoryfirstlevelcachetable_ = memoryfirstlevelcachetable;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.MemoryFirstLevelCacheTable)
}

// optional .ProfilerSectionMemorySecondLevelCacheTable MemorySecondLevelCacheTable = 103;
inline bool ProfilerSectionBodyItem::_internal_has_memorysecondlevelcachetable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || memorysecondlevelcachetable_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_memorysecondlevelcachetable() const {
  return _internal_has_memorysecondlevelcachetable();
}
inline void ProfilerSectionBodyItem::clear_memorysecondlevelcachetable() {
  if (memorysecondlevelcachetable_ != nullptr) memorysecondlevelcachetable_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ProfilerSectionMemorySecondLevelCacheTable& ProfilerSectionBodyItem::_internal_memorysecondlevelcachetable() const {
  const ::ProfilerSectionMemorySecondLevelCacheTable* p = memorysecondlevelcachetable_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMemorySecondLevelCacheTable&>(
      ::_ProfilerSectionMemorySecondLevelCacheTable_default_instance_);
}
inline const ::ProfilerSectionMemorySecondLevelCacheTable& ProfilerSectionBodyItem::memorysecondlevelcachetable() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.MemorySecondLevelCacheTable)
  return _internal_memorysecondlevelcachetable();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_memorysecondlevelcachetable(
    ::ProfilerSectionMemorySecondLevelCacheTable* memorysecondlevelcachetable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memorysecondlevelcachetable_);
  }
  memorysecondlevelcachetable_ = memorysecondlevelcachetable;
  if (memorysecondlevelcachetable) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.MemorySecondLevelCacheTable)
}
inline ::ProfilerSectionMemorySecondLevelCacheTable* ProfilerSectionBodyItem::release_memorysecondlevelcachetable() {
  _has_bits_[0] &= ~0x00000040u;
  ::ProfilerSectionMemorySecondLevelCacheTable* temp = memorysecondlevelcachetable_;
  memorysecondlevelcachetable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMemorySecondLevelCacheTable* ProfilerSectionBodyItem::unsafe_arena_release_memorysecondlevelcachetable() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.MemorySecondLevelCacheTable)
  _has_bits_[0] &= ~0x00000040u;
  ::ProfilerSectionMemorySecondLevelCacheTable* temp = memorysecondlevelcachetable_;
  memorysecondlevelcachetable_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMemorySecondLevelCacheTable* ProfilerSectionBodyItem::_internal_mutable_memorysecondlevelcachetable() {
  _has_bits_[0] |= 0x00000040u;
  if (memorysecondlevelcachetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMemorySecondLevelCacheTable>(GetArena());
    memorysecondlevelcachetable_ = p;
  }
  return memorysecondlevelcachetable_;
}
inline ::ProfilerSectionMemorySecondLevelCacheTable* ProfilerSectionBodyItem::mutable_memorysecondlevelcachetable() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.MemorySecondLevelCacheTable)
  return _internal_mutable_memorysecondlevelcachetable();
}
inline void ProfilerSectionBodyItem::set_allocated_memorysecondlevelcachetable(::ProfilerSectionMemorySecondLevelCacheTable* memorysecondlevelcachetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memorysecondlevelcachetable_;
  }
  if (memorysecondlevelcachetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memorysecondlevelcachetable);
    if (message_arena != submessage_arena) {
      memorysecondlevelcachetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memorysecondlevelcachetable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  memorysecondlevelcachetable_ = memorysecondlevelcachetable;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.MemorySecondLevelCacheTable)
}

// optional .ProfilerSectionMemoryDeviceMemoryTable MemoryDeviceMemoryTable = 104;
inline bool ProfilerSectionBodyItem::_internal_has_memorydevicememorytable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || memorydevicememorytable_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_memorydevicememorytable() const {
  return _internal_has_memorydevicememorytable();
}
inline void ProfilerSectionBodyItem::clear_memorydevicememorytable() {
  if (memorydevicememorytable_ != nullptr) memorydevicememorytable_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ProfilerSectionMemoryDeviceMemoryTable& ProfilerSectionBodyItem::_internal_memorydevicememorytable() const {
  const ::ProfilerSectionMemoryDeviceMemoryTable* p = memorydevicememorytable_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMemoryDeviceMemoryTable&>(
      ::_ProfilerSectionMemoryDeviceMemoryTable_default_instance_);
}
inline const ::ProfilerSectionMemoryDeviceMemoryTable& ProfilerSectionBodyItem::memorydevicememorytable() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.MemoryDeviceMemoryTable)
  return _internal_memorydevicememorytable();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_memorydevicememorytable(
    ::ProfilerSectionMemoryDeviceMemoryTable* memorydevicememorytable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memorydevicememorytable_);
  }
  memorydevicememorytable_ = memorydevicememorytable;
  if (memorydevicememorytable) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.MemoryDeviceMemoryTable)
}
inline ::ProfilerSectionMemoryDeviceMemoryTable* ProfilerSectionBodyItem::release_memorydevicememorytable() {
  _has_bits_[0] &= ~0x00000080u;
  ::ProfilerSectionMemoryDeviceMemoryTable* temp = memorydevicememorytable_;
  memorydevicememorytable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMemoryDeviceMemoryTable* ProfilerSectionBodyItem::unsafe_arena_release_memorydevicememorytable() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.MemoryDeviceMemoryTable)
  _has_bits_[0] &= ~0x00000080u;
  ::ProfilerSectionMemoryDeviceMemoryTable* temp = memorydevicememorytable_;
  memorydevicememorytable_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMemoryDeviceMemoryTable* ProfilerSectionBodyItem::_internal_mutable_memorydevicememorytable() {
  _has_bits_[0] |= 0x00000080u;
  if (memorydevicememorytable_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMemoryDeviceMemoryTable>(GetArena());
    memorydevicememorytable_ = p;
  }
  return memorydevicememorytable_;
}
inline ::ProfilerSectionMemoryDeviceMemoryTable* ProfilerSectionBodyItem::mutable_memorydevicememorytable() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.MemoryDeviceMemoryTable)
  return _internal_mutable_memorydevicememorytable();
}
inline void ProfilerSectionBodyItem::set_allocated_memorydevicememorytable(::ProfilerSectionMemoryDeviceMemoryTable* memorydevicememorytable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memorydevicememorytable_;
  }
  if (memorydevicememorytable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memorydevicememorytable);
    if (message_arena != submessage_arena) {
      memorydevicememorytable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memorydevicememorytable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  memorydevicememorytable_ = memorydevicememorytable;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.MemoryDeviceMemoryTable)
}

// optional .ProfilerSectionMemoryChart MemoryChart = 105;
inline bool ProfilerSectionBodyItem::_internal_has_memorychart() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || memorychart_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_memorychart() const {
  return _internal_has_memorychart();
}
inline void ProfilerSectionBodyItem::clear_memorychart() {
  if (memorychart_ != nullptr) memorychart_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ProfilerSectionMemoryChart& ProfilerSectionBodyItem::_internal_memorychart() const {
  const ::ProfilerSectionMemoryChart* p = memorychart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMemoryChart&>(
      ::_ProfilerSectionMemoryChart_default_instance_);
}
inline const ::ProfilerSectionMemoryChart& ProfilerSectionBodyItem::memorychart() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.MemoryChart)
  return _internal_memorychart();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_memorychart(
    ::ProfilerSectionMemoryChart* memorychart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memorychart_);
  }
  memorychart_ = memorychart;
  if (memorychart) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.MemoryChart)
}
inline ::ProfilerSectionMemoryChart* ProfilerSectionBodyItem::release_memorychart() {
  _has_bits_[0] &= ~0x00000100u;
  ::ProfilerSectionMemoryChart* temp = memorychart_;
  memorychart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMemoryChart* ProfilerSectionBodyItem::unsafe_arena_release_memorychart() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.MemoryChart)
  _has_bits_[0] &= ~0x00000100u;
  ::ProfilerSectionMemoryChart* temp = memorychart_;
  memorychart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMemoryChart* ProfilerSectionBodyItem::_internal_mutable_memorychart() {
  _has_bits_[0] |= 0x00000100u;
  if (memorychart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMemoryChart>(GetArena());
    memorychart_ = p;
  }
  return memorychart_;
}
inline ::ProfilerSectionMemoryChart* ProfilerSectionBodyItem::mutable_memorychart() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.MemoryChart)
  return _internal_mutable_memorychart();
}
inline void ProfilerSectionBodyItem::set_allocated_memorychart(::ProfilerSectionMemoryChart* memorychart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memorychart_;
  }
  if (memorychart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memorychart);
    if (message_arena != submessage_arena) {
      memorychart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memorychart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  memorychart_ = memorychart;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.MemoryChart)
}

// optional .ProfilerSectionGfxMetricsWidget GfxMetricsWidget = 150;
inline bool ProfilerSectionBodyItem::_internal_has_gfxmetricswidget() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || gfxmetricswidget_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_gfxmetricswidget() const {
  return _internal_has_gfxmetricswidget();
}
inline void ProfilerSectionBodyItem::clear_gfxmetricswidget() {
  if (gfxmetricswidget_ != nullptr) gfxmetricswidget_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ProfilerSectionGfxMetricsWidget& ProfilerSectionBodyItem::_internal_gfxmetricswidget() const {
  const ::ProfilerSectionGfxMetricsWidget* p = gfxmetricswidget_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionGfxMetricsWidget&>(
      ::_ProfilerSectionGfxMetricsWidget_default_instance_);
}
inline const ::ProfilerSectionGfxMetricsWidget& ProfilerSectionBodyItem::gfxmetricswidget() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.GfxMetricsWidget)
  return _internal_gfxmetricswidget();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_gfxmetricswidget(
    ::ProfilerSectionGfxMetricsWidget* gfxmetricswidget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gfxmetricswidget_);
  }
  gfxmetricswidget_ = gfxmetricswidget;
  if (gfxmetricswidget) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.GfxMetricsWidget)
}
inline ::ProfilerSectionGfxMetricsWidget* ProfilerSectionBodyItem::release_gfxmetricswidget() {
  _has_bits_[0] &= ~0x00000200u;
  ::ProfilerSectionGfxMetricsWidget* temp = gfxmetricswidget_;
  gfxmetricswidget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionGfxMetricsWidget* ProfilerSectionBodyItem::unsafe_arena_release_gfxmetricswidget() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.GfxMetricsWidget)
  _has_bits_[0] &= ~0x00000200u;
  ::ProfilerSectionGfxMetricsWidget* temp = gfxmetricswidget_;
  gfxmetricswidget_ = nullptr;
  return temp;
}
inline ::ProfilerSectionGfxMetricsWidget* ProfilerSectionBodyItem::_internal_mutable_gfxmetricswidget() {
  _has_bits_[0] |= 0x00000200u;
  if (gfxmetricswidget_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionGfxMetricsWidget>(GetArena());
    gfxmetricswidget_ = p;
  }
  return gfxmetricswidget_;
}
inline ::ProfilerSectionGfxMetricsWidget* ProfilerSectionBodyItem::mutable_gfxmetricswidget() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.GfxMetricsWidget)
  return _internal_mutable_gfxmetricswidget();
}
inline void ProfilerSectionBodyItem::set_allocated_gfxmetricswidget(::ProfilerSectionGfxMetricsWidget* gfxmetricswidget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gfxmetricswidget_;
  }
  if (gfxmetricswidget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gfxmetricswidget);
    if (message_arena != submessage_arena) {
      gfxmetricswidget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gfxmetricswidget, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  gfxmetricswidget_ = gfxmetricswidget;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.GfxMetricsWidget)
}

// optional .MetricOptionFilter Filter = 200;
inline bool ProfilerSectionBodyItem::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool ProfilerSectionBodyItem::has_filter() const {
  return _internal_has_filter();
}
inline const ::MetricOptionFilter& ProfilerSectionBodyItem::_internal_filter() const {
  const ::MetricOptionFilter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetricOptionFilter&>(
      ::_MetricOptionFilter_default_instance_);
}
inline const ::MetricOptionFilter& ProfilerSectionBodyItem::filter() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBodyItem.Filter)
  return _internal_filter();
}
inline void ProfilerSectionBodyItem::unsafe_arena_set_allocated_filter(
    ::MetricOptionFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSectionBodyItem.Filter)
}
inline ::MetricOptionFilter* ProfilerSectionBodyItem::release_filter() {
  _has_bits_[0] &= ~0x00000400u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionBodyItem::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBodyItem.Filter)
  _has_bits_[0] &= ~0x00000400u;
  ::MetricOptionFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::MetricOptionFilter* ProfilerSectionBodyItem::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000400u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetricOptionFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::MetricOptionFilter* ProfilerSectionBodyItem::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBodyItem.Filter)
  return _internal_mutable_filter();
}
inline void ProfilerSectionBodyItem::set_allocated_filter(::MetricOptionFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBodyItem.Filter)
}

// -------------------------------------------------------------------

// ProfilerSectionBody

// repeated .ProfilerSectionBodyItem Items = 1;
inline int ProfilerSectionBody::_internal_items_size() const {
  return items_.size();
}
inline int ProfilerSectionBody::items_size() const {
  return _internal_items_size();
}
inline void ProfilerSectionBody::clear_items() {
  items_.Clear();
}
inline ::ProfilerSectionBodyItem* ProfilerSectionBody::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBody.Items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBodyItem >*
ProfilerSectionBody::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionBody.Items)
  return &items_;
}
inline const ::ProfilerSectionBodyItem& ProfilerSectionBody::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ProfilerSectionBodyItem& ProfilerSectionBody::items(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBody.Items)
  return _internal_items(index);
}
inline ::ProfilerSectionBodyItem* ProfilerSectionBody::_internal_add_items() {
  return items_.Add();
}
inline ::ProfilerSectionBodyItem* ProfilerSectionBody::add_items() {
  // @@protoc_insertion_point(field_add:ProfilerSectionBody.Items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBodyItem >&
ProfilerSectionBody::items() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionBody.Items)
  return items_;
}

// optional string DisplayName = 2;
inline bool ProfilerSectionBody::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionBody::has_displayname() const {
  return _internal_has_displayname();
}
inline void ProfilerSectionBody::clear_displayname() {
  displayname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSectionBody::displayname() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionBody.DisplayName)
  return _internal_displayname();
}
inline void ProfilerSectionBody::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionBody.DisplayName)
}
inline std::string* ProfilerSectionBody::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionBody.DisplayName)
  return _internal_mutable_displayname();
}
inline const std::string& ProfilerSectionBody::_internal_displayname() const {
  return displayname_.Get();
}
inline void ProfilerSectionBody::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSectionBody::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSectionBody.DisplayName)
}
inline void ProfilerSectionBody::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSectionBody.DisplayName)
}
inline void ProfilerSectionBody::set_displayname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSectionBody.DisplayName)
}
inline std::string* ProfilerSectionBody::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000001u;
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSectionBody::release_displayname() {
  // @@protoc_insertion_point(field_release:ProfilerSectionBody.DisplayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return displayname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSectionBody::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSectionBody.DisplayName)
}

// -------------------------------------------------------------------

// ProfilerSectionMetrics

// repeated .ProfilerSectionMetric Metrics = 1;
inline int ProfilerSectionMetrics::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ProfilerSectionMetrics::metrics_size() const {
  return _internal_metrics_size();
}
inline void ProfilerSectionMetrics::clear_metrics() {
  metrics_.Clear();
}
inline ::ProfilerSectionMetric* ProfilerSectionMetrics::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSectionMetrics.Metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >*
ProfilerSectionMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSectionMetrics.Metrics)
  return &metrics_;
}
inline const ::ProfilerSectionMetric& ProfilerSectionMetrics::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::ProfilerSectionMetric& ProfilerSectionMetrics::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetrics.Metrics)
  return _internal_metrics(index);
}
inline ::ProfilerSectionMetric* ProfilerSectionMetrics::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::ProfilerSectionMetric* ProfilerSectionMetrics::add_metrics() {
  // @@protoc_insertion_point(field_add:ProfilerSectionMetrics.Metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionMetric >&
ProfilerSectionMetrics::metrics() const {
  // @@protoc_insertion_point(field_list:ProfilerSectionMetrics.Metrics)
  return metrics_;
}

// optional uint32 Order = 2;
inline bool ProfilerSectionMetrics::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSectionMetrics::has_order() const {
  return _internal_has_order();
}
inline void ProfilerSectionMetrics::clear_order() {
  order_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionMetrics::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSectionMetrics::order() const {
  // @@protoc_insertion_point(field_get:ProfilerSectionMetrics.Order)
  return _internal_order();
}
inline void ProfilerSectionMetrics::_internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  order_ = value;
}
inline void ProfilerSectionMetrics::set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:ProfilerSectionMetrics.Order)
}

// -------------------------------------------------------------------

// ProfilerSection

// required string Identifier = 1;
inline bool ProfilerSection::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSection::has_identifier() const {
  return _internal_has_identifier();
}
inline void ProfilerSection::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSection::identifier() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Identifier)
  return _internal_identifier();
}
inline void ProfilerSection::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:ProfilerSection.Identifier)
}
inline std::string* ProfilerSection::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Identifier)
  return _internal_mutable_identifier();
}
inline const std::string& ProfilerSection::_internal_identifier() const {
  return identifier_.Get();
}
inline void ProfilerSection::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSection::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSection.Identifier)
}
inline void ProfilerSection::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSection.Identifier)
}
inline void ProfilerSection::set_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSection.Identifier)
}
inline std::string* ProfilerSection::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSection::release_identifier() {
  // @@protoc_insertion_point(field_release:ProfilerSection.Identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSection::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.Identifier)
}

// required string DisplayName = 2;
inline bool ProfilerSection::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSection::has_displayname() const {
  return _internal_has_displayname();
}
inline void ProfilerSection::clear_displayname() {
  displayname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerSection::displayname() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.DisplayName)
  return _internal_displayname();
}
inline void ProfilerSection::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:ProfilerSection.DisplayName)
}
inline std::string* ProfilerSection::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.DisplayName)
  return _internal_mutable_displayname();
}
inline const std::string& ProfilerSection::_internal_displayname() const {
  return displayname_.Get();
}
inline void ProfilerSection::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSection::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSection.DisplayName)
}
inline void ProfilerSection::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSection.DisplayName)
}
inline void ProfilerSection::set_displayname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSection.DisplayName)
}
inline std::string* ProfilerSection::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000002u;
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSection::release_displayname() {
  // @@protoc_insertion_point(field_release:ProfilerSection.DisplayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return displayname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSection::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.DisplayName)
}

// optional uint32 Order = 3;
inline bool ProfilerSection::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfilerSection::has_order() const {
  return _internal_has_order();
}
inline void ProfilerSection::clear_order() {
  order_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSection::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfilerSection::order() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Order)
  return _internal_order();
}
inline void ProfilerSection::_internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  order_ = value;
}
inline void ProfilerSection::set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:ProfilerSection.Order)
}

// optional .ProfilerSectionHeader Header = 4;
inline bool ProfilerSection::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ProfilerSection::has_header() const {
  return _internal_has_header();
}
inline void ProfilerSection::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ProfilerSectionHeader& ProfilerSection::_internal_header() const {
  const ::ProfilerSectionHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionHeader&>(
      ::_ProfilerSectionHeader_default_instance_);
}
inline const ::ProfilerSectionHeader& ProfilerSection::header() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Header)
  return _internal_header();
}
inline void ProfilerSection::unsafe_arena_set_allocated_header(
    ::ProfilerSectionHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSection.Header)
}
inline ::ProfilerSectionHeader* ProfilerSection::release_header() {
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionHeader* ProfilerSection::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ProfilerSection.Header)
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ProfilerSectionHeader* ProfilerSection::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000010u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::ProfilerSectionHeader* ProfilerSection::mutable_header() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Header)
  return _internal_mutable_header();
}
inline void ProfilerSection::set_allocated_header(::ProfilerSectionHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.Header)
}

// repeated .ProfilerSectionBody Body = 5;
inline int ProfilerSection::_internal_body_size() const {
  return body_.size();
}
inline int ProfilerSection::body_size() const {
  return _internal_body_size();
}
inline void ProfilerSection::clear_body() {
  body_.Clear();
}
inline ::ProfilerSectionBody* ProfilerSection::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Body)
  return body_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBody >*
ProfilerSection::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSection.Body)
  return &body_;
}
inline const ::ProfilerSectionBody& ProfilerSection::_internal_body(int index) const {
  return body_.Get(index);
}
inline const ::ProfilerSectionBody& ProfilerSection::body(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Body)
  return _internal_body(index);
}
inline ::ProfilerSectionBody* ProfilerSection::_internal_add_body() {
  return body_.Add();
}
inline ::ProfilerSectionBody* ProfilerSection::add_body() {
  // @@protoc_insertion_point(field_add:ProfilerSection.Body)
  return _internal_add_body();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSectionBody >&
ProfilerSection::body() const {
  // @@protoc_insertion_point(field_list:ProfilerSection.Body)
  return body_;
}

// optional .ProfilerSectionMetrics Metrics = 6;
inline bool ProfilerSection::_internal_has_metrics() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || metrics_ != nullptr);
  return value;
}
inline bool ProfilerSection::has_metrics() const {
  return _internal_has_metrics();
}
inline void ProfilerSection::clear_metrics() {
  if (metrics_ != nullptr) metrics_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ProfilerSectionMetrics& ProfilerSection::_internal_metrics() const {
  const ::ProfilerSectionMetrics* p = metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionMetrics&>(
      ::_ProfilerSectionMetrics_default_instance_);
}
inline const ::ProfilerSectionMetrics& ProfilerSection::metrics() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Metrics)
  return _internal_metrics();
}
inline void ProfilerSection::unsafe_arena_set_allocated_metrics(
    ::ProfilerSectionMetrics* metrics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSection.Metrics)
}
inline ::ProfilerSectionMetrics* ProfilerSection::release_metrics() {
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSectionMetrics* temp = metrics_;
  metrics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionMetrics* ProfilerSection::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:ProfilerSection.Metrics)
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSectionMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::ProfilerSectionMetrics* ProfilerSection::_internal_mutable_metrics() {
  _has_bits_[0] |= 0x00000020u;
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionMetrics>(GetArena());
    metrics_ = p;
  }
  return metrics_;
}
inline ::ProfilerSectionMetrics* ProfilerSection::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Metrics)
  return _internal_mutable_metrics();
}
inline void ProfilerSection::set_allocated_metrics(::ProfilerSectionMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.Metrics)
}

// optional string Description = 7;
inline bool ProfilerSection::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSection::has_description() const {
  return _internal_has_description();
}
inline void ProfilerSection::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProfilerSection::description() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Description)
  return _internal_description();
}
inline void ProfilerSection::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ProfilerSection.Description)
}
inline std::string* ProfilerSection::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Description)
  return _internal_mutable_description();
}
inline const std::string& ProfilerSection::_internal_description() const {
  return description_.Get();
}
inline void ProfilerSection::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSection::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSection.Description)
}
inline void ProfilerSection::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSection.Description)
}
inline void ProfilerSection::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSection.Description)
}
inline std::string* ProfilerSection::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSection::release_description() {
  // @@protoc_insertion_point(field_release:ProfilerSection.Description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSection::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.Description)
}

// optional string Extends = 9;
inline bool ProfilerSection::_internal_has_extends() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfilerSection::has_extends() const {
  return _internal_has_extends();
}
inline void ProfilerSection::clear_extends() {
  extends_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProfilerSection::extends() const {
  // @@protoc_insertion_point(field_get:ProfilerSection.Extends)
  return _internal_extends();
}
inline void ProfilerSection::set_extends(const std::string& value) {
  _internal_set_extends(value);
  // @@protoc_insertion_point(field_set:ProfilerSection.Extends)
}
inline std::string* ProfilerSection::mutable_extends() {
  // @@protoc_insertion_point(field_mutable:ProfilerSection.Extends)
  return _internal_mutable_extends();
}
inline const std::string& ProfilerSection::_internal_extends() const {
  return extends_.Get();
}
inline void ProfilerSection::_internal_set_extends(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  extends_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSection::set_extends(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  extends_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSection.Extends)
}
inline void ProfilerSection::set_extends(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  extends_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSection.Extends)
}
inline void ProfilerSection::set_extends(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  extends_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSection.Extends)
}
inline std::string* ProfilerSection::_internal_mutable_extends() {
  _has_bits_[0] |= 0x00000008u;
  return extends_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSection::release_extends() {
  // @@protoc_insertion_point(field_release:ProfilerSection.Extends)
  if (!_internal_has_extends()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return extends_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSection::set_allocated_extends(std::string* extends) {
  if (extends != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  extends_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extends,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSection.Extends)
}

// -------------------------------------------------------------------

// ProfilerSections

// repeated .ProfilerSection Sections = 1;
inline int ProfilerSections::_internal_sections_size() const {
  return sections_.size();
}
inline int ProfilerSections::sections_size() const {
  return _internal_sections_size();
}
inline void ProfilerSections::clear_sections() {
  sections_.Clear();
}
inline ::ProfilerSection* ProfilerSections::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:ProfilerSections.Sections)
  return sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >*
ProfilerSections::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:ProfilerSections.Sections)
  return &sections_;
}
inline const ::ProfilerSection& ProfilerSections::_internal_sections(int index) const {
  return sections_.Get(index);
}
inline const ::ProfilerSection& ProfilerSections::sections(int index) const {
  // @@protoc_insertion_point(field_get:ProfilerSections.Sections)
  return _internal_sections(index);
}
inline ::ProfilerSection* ProfilerSections::_internal_add_sections() {
  return sections_.Add();
}
inline ::ProfilerSection* ProfilerSections::add_sections() {
  // @@protoc_insertion_point(field_add:ProfilerSections.Sections)
  return _internal_add_sections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >&
ProfilerSections::sections() const {
  // @@protoc_insertion_point(field_list:ProfilerSections.Sections)
  return sections_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProfilerSectionTable_LayoutOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProfilerSectionTable_LayoutOrder>() {
  return ::ProfilerSectionTable_LayoutOrder_descriptor();
}
template <> struct is_proto_enum< ::ProfilerSectionBarChart_Directions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProfilerSectionBarChart_Directions>() {
  return ::ProfilerSectionBarChart_Directions_descriptor();
}
template <> struct is_proto_enum< ::HWUnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HWUnitType>() {
  return ::HWUnitType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProfilerSection_2eproto
