// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerReportCommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProfilerReportCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProfilerReportCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProfilerReportCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProfilerReportCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerReportCommon_2eproto;
class ExecutableSettings;
class ExecutableSettingsDefaultTypeInternal;
extern ExecutableSettingsDefaultTypeInternal _ExecutableSettings_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ExecutableSettings* Arena::CreateMaybeMessage<::ExecutableSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ExecutableSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExecutableSettings) */ {
 public:
  inline ExecutableSettings() : ExecutableSettings(nullptr) {}
  virtual ~ExecutableSettings();

  ExecutableSettings(const ExecutableSettings& from);
  ExecutableSettings(ExecutableSettings&& from) noexcept
    : ExecutableSettings() {
    *this = ::std::move(from);
  }

  inline ExecutableSettings& operator=(const ExecutableSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutableSettings& operator=(ExecutableSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutableSettings& default_instance();

  static inline const ExecutableSettings* internal_default_instance() {
    return reinterpret_cast<const ExecutableSettings*>(
               &_ExecutableSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutableSettings& a, ExecutableSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutableSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutableSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutableSettings* New() const final {
    return CreateMaybeMessage<ExecutableSettings>(nullptr);
  }

  ExecutableSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutableSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutableSettings& from);
  void MergeFrom(const ExecutableSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutableSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExecutableSettings";
  }
  protected:
  explicit ExecutableSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReportCommon_2eproto);
    return ::descriptor_table_ProfilerReportCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutablePathFieldNumber = 1,
    kWorkDirectoryFieldNumber = 2,
    kCmdlineAgrumentsFieldNumber = 3,
    kEnvironmentFieldNumber = 4,
  };
  // required string ExecutablePath = 1;
  bool has_executablepath() const;
  private:
  bool _internal_has_executablepath() const;
  public:
  void clear_executablepath();
  const std::string& executablepath() const;
  void set_executablepath(const std::string& value);
  void set_executablepath(std::string&& value);
  void set_executablepath(const char* value);
  void set_executablepath(const char* value, size_t size);
  std::string* mutable_executablepath();
  std::string* release_executablepath();
  void set_allocated_executablepath(std::string* executablepath);
  private:
  const std::string& _internal_executablepath() const;
  void _internal_set_executablepath(const std::string& value);
  std::string* _internal_mutable_executablepath();
  public:

  // optional string WorkDirectory = 2;
  bool has_workdirectory() const;
  private:
  bool _internal_has_workdirectory() const;
  public:
  void clear_workdirectory();
  const std::string& workdirectory() const;
  void set_workdirectory(const std::string& value);
  void set_workdirectory(std::string&& value);
  void set_workdirectory(const char* value);
  void set_workdirectory(const char* value, size_t size);
  std::string* mutable_workdirectory();
  std::string* release_workdirectory();
  void set_allocated_workdirectory(std::string* workdirectory);
  private:
  const std::string& _internal_workdirectory() const;
  void _internal_set_workdirectory(const std::string& value);
  std::string* _internal_mutable_workdirectory();
  public:

  // optional string CmdlineAgruments = 3;
  bool has_cmdlineagruments() const;
  private:
  bool _internal_has_cmdlineagruments() const;
  public:
  void clear_cmdlineagruments();
  const std::string& cmdlineagruments() const;
  void set_cmdlineagruments(const std::string& value);
  void set_cmdlineagruments(std::string&& value);
  void set_cmdlineagruments(const char* value);
  void set_cmdlineagruments(const char* value, size_t size);
  std::string* mutable_cmdlineagruments();
  std::string* release_cmdlineagruments();
  void set_allocated_cmdlineagruments(std::string* cmdlineagruments);
  private:
  const std::string& _internal_cmdlineagruments() const;
  void _internal_set_cmdlineagruments(const std::string& value);
  std::string* _internal_mutable_cmdlineagruments();
  public:

  // optional string Environment = 4;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const std::string& environment() const;
  void set_environment(const std::string& value);
  void set_environment(std::string&& value);
  void set_environment(const char* value);
  void set_environment(const char* value, size_t size);
  std::string* mutable_environment();
  std::string* release_environment();
  void set_allocated_environment(std::string* environment);
  private:
  const std::string& _internal_environment() const;
  void _internal_set_environment(const std::string& value);
  std::string* _internal_mutable_environment();
  public:

  // @@protoc_insertion_point(class_scope:ExecutableSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executablepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdlineagruments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_;
  friend struct ::TableStruct_ProfilerReportCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutableSettings

// required string ExecutablePath = 1;
inline bool ExecutableSettings::_internal_has_executablepath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecutableSettings::has_executablepath() const {
  return _internal_has_executablepath();
}
inline void ExecutableSettings::clear_executablepath() {
  executablepath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExecutableSettings::executablepath() const {
  // @@protoc_insertion_point(field_get:ExecutableSettings.ExecutablePath)
  return _internal_executablepath();
}
inline void ExecutableSettings::set_executablepath(const std::string& value) {
  _internal_set_executablepath(value);
  // @@protoc_insertion_point(field_set:ExecutableSettings.ExecutablePath)
}
inline std::string* ExecutableSettings::mutable_executablepath() {
  // @@protoc_insertion_point(field_mutable:ExecutableSettings.ExecutablePath)
  return _internal_mutable_executablepath();
}
inline const std::string& ExecutableSettings::_internal_executablepath() const {
  return executablepath_.Get();
}
inline void ExecutableSettings::_internal_set_executablepath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  executablepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecutableSettings::set_executablepath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  executablepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExecutableSettings.ExecutablePath)
}
inline void ExecutableSettings::set_executablepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  executablepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ExecutableSettings.ExecutablePath)
}
inline void ExecutableSettings::set_executablepath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  executablepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExecutableSettings.ExecutablePath)
}
inline std::string* ExecutableSettings::_internal_mutable_executablepath() {
  _has_bits_[0] |= 0x00000001u;
  return executablepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecutableSettings::release_executablepath() {
  // @@protoc_insertion_point(field_release:ExecutableSettings.ExecutablePath)
  if (!_internal_has_executablepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return executablepath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutableSettings::set_allocated_executablepath(std::string* executablepath) {
  if (executablepath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  executablepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executablepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExecutableSettings.ExecutablePath)
}

// optional string WorkDirectory = 2;
inline bool ExecutableSettings::_internal_has_workdirectory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecutableSettings::has_workdirectory() const {
  return _internal_has_workdirectory();
}
inline void ExecutableSettings::clear_workdirectory() {
  workdirectory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExecutableSettings::workdirectory() const {
  // @@protoc_insertion_point(field_get:ExecutableSettings.WorkDirectory)
  return _internal_workdirectory();
}
inline void ExecutableSettings::set_workdirectory(const std::string& value) {
  _internal_set_workdirectory(value);
  // @@protoc_insertion_point(field_set:ExecutableSettings.WorkDirectory)
}
inline std::string* ExecutableSettings::mutable_workdirectory() {
  // @@protoc_insertion_point(field_mutable:ExecutableSettings.WorkDirectory)
  return _internal_mutable_workdirectory();
}
inline const std::string& ExecutableSettings::_internal_workdirectory() const {
  return workdirectory_.Get();
}
inline void ExecutableSettings::_internal_set_workdirectory(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecutableSettings::set_workdirectory(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  workdirectory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExecutableSettings.WorkDirectory)
}
inline void ExecutableSettings::set_workdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ExecutableSettings.WorkDirectory)
}
inline void ExecutableSettings::set_workdirectory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  workdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExecutableSettings.WorkDirectory)
}
inline std::string* ExecutableSettings::_internal_mutable_workdirectory() {
  _has_bits_[0] |= 0x00000002u;
  return workdirectory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecutableSettings::release_workdirectory() {
  // @@protoc_insertion_point(field_release:ExecutableSettings.WorkDirectory)
  if (!_internal_has_workdirectory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return workdirectory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutableSettings::set_allocated_workdirectory(std::string* workdirectory) {
  if (workdirectory != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  workdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExecutableSettings.WorkDirectory)
}

// optional string CmdlineAgruments = 3;
inline bool ExecutableSettings::_internal_has_cmdlineagruments() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExecutableSettings::has_cmdlineagruments() const {
  return _internal_has_cmdlineagruments();
}
inline void ExecutableSettings::clear_cmdlineagruments() {
  cmdlineagruments_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExecutableSettings::cmdlineagruments() const {
  // @@protoc_insertion_point(field_get:ExecutableSettings.CmdlineAgruments)
  return _internal_cmdlineagruments();
}
inline void ExecutableSettings::set_cmdlineagruments(const std::string& value) {
  _internal_set_cmdlineagruments(value);
  // @@protoc_insertion_point(field_set:ExecutableSettings.CmdlineAgruments)
}
inline std::string* ExecutableSettings::mutable_cmdlineagruments() {
  // @@protoc_insertion_point(field_mutable:ExecutableSettings.CmdlineAgruments)
  return _internal_mutable_cmdlineagruments();
}
inline const std::string& ExecutableSettings::_internal_cmdlineagruments() const {
  return cmdlineagruments_.Get();
}
inline void ExecutableSettings::_internal_set_cmdlineagruments(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cmdlineagruments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecutableSettings::set_cmdlineagruments(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cmdlineagruments_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExecutableSettings.CmdlineAgruments)
}
inline void ExecutableSettings::set_cmdlineagruments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cmdlineagruments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ExecutableSettings.CmdlineAgruments)
}
inline void ExecutableSettings::set_cmdlineagruments(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cmdlineagruments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExecutableSettings.CmdlineAgruments)
}
inline std::string* ExecutableSettings::_internal_mutable_cmdlineagruments() {
  _has_bits_[0] |= 0x00000004u;
  return cmdlineagruments_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecutableSettings::release_cmdlineagruments() {
  // @@protoc_insertion_point(field_release:ExecutableSettings.CmdlineAgruments)
  if (!_internal_has_cmdlineagruments()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cmdlineagruments_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutableSettings::set_allocated_cmdlineagruments(std::string* cmdlineagruments) {
  if (cmdlineagruments != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cmdlineagruments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdlineagruments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExecutableSettings.CmdlineAgruments)
}

// optional string Environment = 4;
inline bool ExecutableSettings::_internal_has_environment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExecutableSettings::has_environment() const {
  return _internal_has_environment();
}
inline void ExecutableSettings::clear_environment() {
  environment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ExecutableSettings::environment() const {
  // @@protoc_insertion_point(field_get:ExecutableSettings.Environment)
  return _internal_environment();
}
inline void ExecutableSettings::set_environment(const std::string& value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:ExecutableSettings.Environment)
}
inline std::string* ExecutableSettings::mutable_environment() {
  // @@protoc_insertion_point(field_mutable:ExecutableSettings.Environment)
  return _internal_mutable_environment();
}
inline const std::string& ExecutableSettings::_internal_environment() const {
  return environment_.Get();
}
inline void ExecutableSettings::_internal_set_environment(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  environment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecutableSettings::set_environment(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  environment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExecutableSettings.Environment)
}
inline void ExecutableSettings::set_environment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  environment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ExecutableSettings.Environment)
}
inline void ExecutableSettings::set_environment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  environment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExecutableSettings.Environment)
}
inline std::string* ExecutableSettings::_internal_mutable_environment() {
  _has_bits_[0] |= 0x00000008u;
  return environment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecutableSettings::release_environment() {
  // @@protoc_insertion_point(field_release:ExecutableSettings.Environment)
  if (!_internal_has_environment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return environment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutableSettings::set_allocated_environment(std::string* environment) {
  if (environment != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  environment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExecutableSettings.Environment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProfilerReportCommon_2eproto
