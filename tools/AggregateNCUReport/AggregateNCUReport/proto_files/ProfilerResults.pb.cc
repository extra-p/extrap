// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerResults.proto

#include "ProfilerResults.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaunchData_ProfilerCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricListElementMessage_ProfilerResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MetricResultMessage_ProfilerResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricValueMessage_ProfilerResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerStringTable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerStringTable_ProfilerStringTable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceData_ProfilerCommon_2eproto;
class MetricValueMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricValueMessage> _instance;
} _MetricValueMessage_default_instance_;
class MetricListElementMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricListElementMessage> _instance;
} _MetricListElementMessage_default_instance_;
class MetricResultMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricResultMessage> _instance;
} _MetricResultMessage_default_instance_;
class ProfilerSourceMessage_TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSourceMessage_TypeInfo> _instance;
} _ProfilerSourceMessage_TypeInfo_default_instance_;
class ProfilerSourceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerSourceMessage> _instance;
} _ProfilerSourceMessage_default_instance_;
class ClearCachedProfilerSourceMessage_TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearCachedProfilerSourceMessage_TypeInfo> _instance;
} _ClearCachedProfilerSourceMessage_TypeInfo_default_instance_;
class ClearCachedProfilerSourceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearCachedProfilerSourceMessage> _instance;
} _ClearCachedProfilerSourceMessage_default_instance_;
class ProfilerVersionInfoMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerVersionInfoMessage> _instance;
} _ProfilerVersionInfoMessage_default_instance_;
class ProfilerResultMessage_TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerResultMessage_TypeInfo> _instance;
} _ProfilerResultMessage_TypeInfo_default_instance_;
class ProfilerResultMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerResultMessage> _instance;
} _ProfilerResultMessage_default_instance_;
static void InitDefaultsscc_info_ClearCachedProfilerSourceMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClearCachedProfilerSourceMessage_default_instance_;
    new (ptr) ::ClearCachedProfilerSourceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearCachedProfilerSourceMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearCachedProfilerSourceMessage_ProfilerResults_2eproto}, {}};

static void InitDefaultsscc_info_ClearCachedProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClearCachedProfilerSourceMessage_TypeInfo_default_instance_;
    new (ptr) ::ClearCachedProfilerSourceMessage_TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearCachedProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearCachedProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto}, {}};

static void InitDefaultsscc_info_MetricListElementMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MetricListElementMessage_default_instance_;
    new (ptr) ::MetricListElementMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricListElementMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetricListElementMessage_ProfilerResults_2eproto}, {
      &scc_info_MetricValueMessage_ProfilerResults_2eproto.base,}};

static void InitDefaultsscc_info_MetricResultMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MetricResultMessage_default_instance_;
    new (ptr) ::MetricResultMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MetricResultMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MetricResultMessage_ProfilerResults_2eproto}, {
      &scc_info_MetricValueMessage_ProfilerResults_2eproto.base,
      &scc_info_MetricListElementMessage_ProfilerResults_2eproto.base,}};

static void InitDefaultsscc_info_MetricValueMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MetricValueMessage_default_instance_;
    new (ptr) ::MetricValueMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricValueMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetricValueMessage_ProfilerResults_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerResultMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerResultMessage_default_instance_;
    new (ptr) ::ProfilerResultMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ProfilerResultMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ProfilerResultMessage_ProfilerResults_2eproto}, {
      &scc_info_LaunchData_ProfilerCommon_2eproto.base,
      &scc_info_MetricResultMessage_ProfilerResults_2eproto.base,
      &scc_info_SourceData_ProfilerCommon_2eproto.base,
      &scc_info_ProfilerStringTable_ProfilerStringTable_2eproto.base,
      &scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto.base,
      &scc_info_ProfileSeriesInfoMessage_ProfilerReport_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerResultMessage_TypeInfo_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerResultMessage_TypeInfo_default_instance_;
    new (ptr) ::ProfilerResultMessage_TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerResultMessage_TypeInfo_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerResultMessage_TypeInfo_ProfilerResults_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerSourceMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSourceMessage_default_instance_;
    new (ptr) ::ProfilerSourceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSourceMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilerSourceMessage_ProfilerResults_2eproto}, {
      &scc_info_SourceData_ProfilerCommon_2eproto.base,}};

static void InitDefaultsscc_info_ProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerSourceMessage_TypeInfo_default_instance_;
    new (ptr) ::ProfilerSourceMessage_TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfilerVersionInfoMessage_default_instance_;
    new (ptr) ::ProfilerVersionInfoMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProfilerResults_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProfilerResults_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProfilerResults_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProfilerResults_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, stringvalue_),
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, floatvalue_),
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, doublevalue_),
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, uint32value_),
  PROTOBUF_FIELD_OFFSET(::MetricValueMessage, uint64value_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::MetricListElementMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetricListElementMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricListElementMessage, correlationid_),
  PROTOBUF_FIELD_OFFSET(::MetricListElementMessage, elementvalue_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MetricResultMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetricResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricResultMessage, metricnameid_),
  PROTOBUF_FIELD_OFFSET(::MetricResultMessage, metricvalue_),
  PROTOBUF_FIELD_OFFSET(::MetricResultMessage, metricvaluelist_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage_TypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage_TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage_TypeInfo, category_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage_TypeInfo, method_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerSourceMessage, source_),
  0,
  PROTOBUF_FIELD_OFFSET(::ClearCachedProfilerSourceMessage_TypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClearCachedProfilerSourceMessage_TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClearCachedProfilerSourceMessage_TypeInfo, category_),
  PROTOBUF_FIELD_OFFSET(::ClearCachedProfilerSourceMessage_TypeInfo, method_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClearCachedProfilerSourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerVersionInfoMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerVersionInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerVersionInfoMessage, provider_),
  PROTOBUF_FIELD_OFFSET(::ProfilerVersionInfoMessage, version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage_TypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage_TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage_TypeInfo, category_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage_TypeInfo, method_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, id_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, launch_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, metricresults_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, source_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, stringtable_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, unsupporteddevice_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, versioninfo_),
  PROTOBUF_FIELD_OFFSET(::ProfilerResultMessage, seriesinfo_),
  4,
  0,
  ~0u,
  1,
  2,
  5,
  ~0u,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::MetricValueMessage)},
  { 15, 22, sizeof(::MetricListElementMessage)},
  { 24, 32, sizeof(::MetricResultMessage)},
  { 35, 42, sizeof(::ProfilerSourceMessage_TypeInfo)},
  { 44, 50, sizeof(::ProfilerSourceMessage)},
  { 51, 58, sizeof(::ClearCachedProfilerSourceMessage_TypeInfo)},
  { 60, -1, sizeof(::ClearCachedProfilerSourceMessage)},
  { 65, 72, sizeof(::ProfilerVersionInfoMessage)},
  { 74, 81, sizeof(::ProfilerResultMessage_TypeInfo)},
  { 83, 96, sizeof(::ProfilerResultMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricValueMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricListElementMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSourceMessage_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerSourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClearCachedProfilerSourceMessage_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClearCachedProfilerSourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerVersionInfoMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerResultMessage_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilerResultMessage_default_instance_),
};

const char descriptor_table_protodef_ProfilerResults_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ProfilerResults.proto\032\024ProfilerReport."
  "proto\032\024ProfilerCommon.proto\032\030ProfilerCat"
  "egories.proto\032\031ProfilerStringTable.proto"
  "\"|\n\022MetricValueMessage\022\023\n\013StringValue\030\001 "
  "\001(\t\022\022\n\nFloatValue\030\002 \001(\002\022\023\n\013DoubleValue\030\003"
  " \001(\001\022\023\n\013Uint32Value\030\004 \001(\r\022\023\n\013Uint64Value"
  "\030\005 \001(\004\"q\n\030MetricListElementMessage\022*\n\rCo"
  "rrelationId\030\001 \001(\0132\023.MetricValueMessage\022)"
  "\n\014ElementValue\030\002 \002(\0132\023.MetricValueMessag"
  "e\"\211\001\n\023MetricResultMessage\022\024\n\014MetricNameI"
  "d\030\001 \002(\r\022(\n\013MetricValue\030\002 \001(\0132\023.MetricVal"
  "ueMessage\0222\n\017MetricValueList\030\003 \003(\0132\031.Met"
  "ricListElementMessage\"\263\001\n\025ProfilerSource"
  "Message\022\033\n\006Source\030\001 \002(\0132\013.SourceData\032}\n\010"
  "TypeInfo\0224\n\010Category\030\001 \001(\0162\021.ProfilerCat"
  "egory:\017CategoryResults\022;\n\006Method\030\002 \001(\0162\026"
  ".ProfilerResultsMethod:\023MethodSourceMess"
  "age\"\265\001\n ClearCachedProfilerSourceMessage"
  "\032\220\001\n\010TypeInfo\0224\n\010Category\030\001 \001(\0162\021.Profil"
  "erCategory:\017CategoryResults\022N\n\006Method\030\002 "
  "\001(\0162\026.ProfilerResultsMethod:&MethodClear"
  "CachedProfilerSourceMessage\"\?\n\032ProfilerV"
  "ersionInfoMessage\022\020\n\010Provider\030\001 \002(\t\022\017\n\007V"
  "ersion\030\002 \002(\t\"\260\003\n\025ProfilerResultMessage\022\n"
  "\n\002ID\030\001 \002(\r\022\033\n\006Launch\030\002 \002(\0132\013.LaunchData\022"
  "+\n\rMetricResults\030\003 \003(\0132\024.MetricResultMes"
  "sage\022\033\n\006Source\030\004 \002(\0132\013.SourceData\022)\n\013Str"
  "ingTable\030\005 \002(\0132\024.ProfilerStringTable\022\031\n\021"
  "UnsupportedDevice\030\006 \001(\010\0220\n\013VersionInfo\030\007"
  " \003(\0132\033.ProfilerVersionInfoMessage\022-\n\nSer"
  "iesInfo\030\010 \001(\0132\031.ProfileSeriesInfoMessage"
  "\032}\n\010TypeInfo\0224\n\010Category\030\001 \001(\0162\021.Profile"
  "rCategory:\017CategoryResults\022;\n\006Method\030\002 \001"
  "(\0162\026.ProfilerResultsMethod:\023MethodResult"
  "Message*\217\001\n\025ProfilerResultsMethod\022\030\n\024Inv"
  "alidResultsMethod\020\000\022\027\n\023MethodSourceMessa"
  "ge\020\001\022\027\n\023MethodResultMessage\020\002\022*\n&MethodC"
  "learCachedProfilerSourceMessage\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProfilerResults_2eproto_deps[4] = {
  &::descriptor_table_ProfilerCategories_2eproto,
  &::descriptor_table_ProfilerCommon_2eproto,
  &::descriptor_table_ProfilerReport_2eproto,
  &::descriptor_table_ProfilerStringTable_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProfilerResults_2eproto_sccs[10] = {
  &scc_info_ClearCachedProfilerSourceMessage_ProfilerResults_2eproto.base,
  &scc_info_ClearCachedProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto.base,
  &scc_info_MetricListElementMessage_ProfilerResults_2eproto.base,
  &scc_info_MetricResultMessage_ProfilerResults_2eproto.base,
  &scc_info_MetricValueMessage_ProfilerResults_2eproto.base,
  &scc_info_ProfilerResultMessage_ProfilerResults_2eproto.base,
  &scc_info_ProfilerResultMessage_TypeInfo_ProfilerResults_2eproto.base,
  &scc_info_ProfilerSourceMessage_ProfilerResults_2eproto.base,
  &scc_info_ProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto.base,
  &scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProfilerResults_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerResults_2eproto = {
  false, false, descriptor_table_protodef_ProfilerResults_2eproto, "ProfilerResults.proto", 1513,
  &descriptor_table_ProfilerResults_2eproto_once, descriptor_table_ProfilerResults_2eproto_sccs, descriptor_table_ProfilerResults_2eproto_deps, 10, 4,
  schemas, file_default_instances, TableStruct_ProfilerResults_2eproto::offsets,
  file_level_metadata_ProfilerResults_2eproto, 10, file_level_enum_descriptors_ProfilerResults_2eproto, file_level_service_descriptors_ProfilerResults_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProfilerResults_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProfilerResults_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerResultsMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProfilerResults_2eproto);
  return file_level_enum_descriptors_ProfilerResults_2eproto[0];
}
bool ProfilerResultsMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MetricValueMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricValueMessage>()._has_bits_);
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_floatvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_doublevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uint32value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint64value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MetricValueMessage::MetricValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricValueMessage)
}
MetricValueMessage::MetricValueMessage(const MetricValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringvalue()) {
    stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringvalue(), 
      GetArena());
  }
  ::memcpy(&doublevalue_, &from.doublevalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint64value_) -
    reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
  // @@protoc_insertion_point(copy_constructor:MetricValueMessage)
}

void MetricValueMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricValueMessage_ProfilerResults_2eproto.base);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&doublevalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uint64value_) -
      reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
}

MetricValueMessage::~MetricValueMessage() {
  // @@protoc_insertion_point(destructor:MetricValueMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricValueMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricValueMessage::ArenaDtor(void* object) {
  MetricValueMessage* _this = reinterpret_cast< MetricValueMessage* >(object);
  (void)_this;
}
void MetricValueMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricValueMessage& MetricValueMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricValueMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void MetricValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stringvalue_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&doublevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint64value_) -
        reinterpret_cast<char*>(&doublevalue_)) + sizeof(uint64value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricValueMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string StringValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MetricValueMessage.StringValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float FloatValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_floatvalue(&has_bits);
          floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double DoubleValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_doublevalue(&has_bits);
          doublevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 Uint32Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uint32value(&has_bits);
          uint32value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 Uint64Value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint64value(&has_bits);
          uint64value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricValueMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string StringValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "MetricValueMessage.StringValue");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stringvalue(), target);
  }

  // optional float FloatValue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_floatvalue(), target);
  }

  // optional double DoubleValue = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_doublevalue(), target);
  }

  // optional uint32 Uint32Value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32value(), target);
  }

  // optional uint64 Uint64Value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricValueMessage)
  return target;
}

size_t MetricValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricValueMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string StringValue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional double DoubleValue = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float FloatValue = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 Uint32Value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32value());
    }

    // optional uint64 Uint64Value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricValueMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricValueMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricValueMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricValueMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricValueMessage)
    MergeFrom(*source);
  }
}

void MetricValueMessage::MergeFrom(const MetricValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      doublevalue_ = from.doublevalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      floatvalue_ = from.floatvalue_;
    }
    if (cached_has_bits & 0x00000008u) {
      uint32value_ = from.uint32value_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint64value_ = from.uint64value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricValueMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricValueMessage::CopyFrom(const MetricValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricValueMessage::IsInitialized() const {
  return true;
}

void MetricValueMessage::InternalSwap(MetricValueMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stringvalue_.Swap(&other->stringvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricValueMessage, uint64value_)
      + sizeof(MetricValueMessage::uint64value_)
      - PROTOBUF_FIELD_OFFSET(MetricValueMessage, doublevalue_)>(
          reinterpret_cast<char*>(&doublevalue_),
          reinterpret_cast<char*>(&other->doublevalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricValueMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricListElementMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricListElementMessage>()._has_bits_);
  static const ::MetricValueMessage& correlationid(const MetricListElementMessage* msg);
  static void set_has_correlationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MetricValueMessage& elementvalue(const MetricListElementMessage* msg);
  static void set_has_elementvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::MetricValueMessage&
MetricListElementMessage::_Internal::correlationid(const MetricListElementMessage* msg) {
  return *msg->correlationid_;
}
const ::MetricValueMessage&
MetricListElementMessage::_Internal::elementvalue(const MetricListElementMessage* msg) {
  return *msg->elementvalue_;
}
MetricListElementMessage::MetricListElementMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricListElementMessage)
}
MetricListElementMessage::MetricListElementMessage(const MetricListElementMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_correlationid()) {
    correlationid_ = new ::MetricValueMessage(*from.correlationid_);
  } else {
    correlationid_ = nullptr;
  }
  if (from._internal_has_elementvalue()) {
    elementvalue_ = new ::MetricValueMessage(*from.elementvalue_);
  } else {
    elementvalue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MetricListElementMessage)
}

void MetricListElementMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricListElementMessage_ProfilerResults_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&correlationid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&elementvalue_) -
      reinterpret_cast<char*>(&correlationid_)) + sizeof(elementvalue_));
}

MetricListElementMessage::~MetricListElementMessage() {
  // @@protoc_insertion_point(destructor:MetricListElementMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricListElementMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete correlationid_;
  if (this != internal_default_instance()) delete elementvalue_;
}

void MetricListElementMessage::ArenaDtor(void* object) {
  MetricListElementMessage* _this = reinterpret_cast< MetricListElementMessage* >(object);
  (void)_this;
}
void MetricListElementMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricListElementMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricListElementMessage& MetricListElementMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricListElementMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void MetricListElementMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricListElementMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(correlationid_ != nullptr);
      correlationid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(elementvalue_ != nullptr);
      elementvalue_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricListElementMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .MetricValueMessage CorrelationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_correlationid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .MetricValueMessage ElementValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_elementvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricListElementMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricListElementMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MetricValueMessage CorrelationId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::correlationid(this), target, stream);
  }

  // required .MetricValueMessage ElementValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::elementvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricListElementMessage)
  return target;
}

size_t MetricListElementMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricListElementMessage)
  size_t total_size = 0;

  // required .MetricValueMessage ElementValue = 2;
  if (_internal_has_elementvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elementvalue_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .MetricValueMessage CorrelationId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *correlationid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricListElementMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricListElementMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricListElementMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricListElementMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricListElementMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricListElementMessage)
    MergeFrom(*source);
  }
}

void MetricListElementMessage::MergeFrom(const MetricListElementMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricListElementMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_correlationid()->::MetricValueMessage::MergeFrom(from._internal_correlationid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_elementvalue()->::MetricValueMessage::MergeFrom(from._internal_elementvalue());
    }
  }
}

void MetricListElementMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricListElementMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricListElementMessage::CopyFrom(const MetricListElementMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricListElementMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricListElementMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MetricListElementMessage::InternalSwap(MetricListElementMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricListElementMessage, elementvalue_)
      + sizeof(MetricListElementMessage::elementvalue_)
      - PROTOBUF_FIELD_OFFSET(MetricListElementMessage, correlationid_)>(
          reinterpret_cast<char*>(&correlationid_),
          reinterpret_cast<char*>(&other->correlationid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricListElementMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricResultMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricResultMessage>()._has_bits_);
  static void set_has_metricnameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MetricValueMessage& metricvalue(const MetricResultMessage* msg);
  static void set_has_metricvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::MetricValueMessage&
MetricResultMessage::_Internal::metricvalue(const MetricResultMessage* msg) {
  return *msg->metricvalue_;
}
MetricResultMessage::MetricResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metricvaluelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricResultMessage)
}
MetricResultMessage::MetricResultMessage(const MetricResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metricvaluelist_(from.metricvaluelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metricvalue()) {
    metricvalue_ = new ::MetricValueMessage(*from.metricvalue_);
  } else {
    metricvalue_ = nullptr;
  }
  metricnameid_ = from.metricnameid_;
  // @@protoc_insertion_point(copy_constructor:MetricResultMessage)
}

void MetricResultMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricResultMessage_ProfilerResults_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metricvalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&metricnameid_) -
      reinterpret_cast<char*>(&metricvalue_)) + sizeof(metricnameid_));
}

MetricResultMessage::~MetricResultMessage() {
  // @@protoc_insertion_point(destructor:MetricResultMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metricvalue_;
}

void MetricResultMessage::ArenaDtor(void* object) {
  MetricResultMessage* _this = reinterpret_cast< MetricResultMessage* >(object);
  (void)_this;
}
void MetricResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricResultMessage& MetricResultMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricResultMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void MetricResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metricvaluelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metricvalue_ != nullptr);
    metricvalue_->Clear();
  }
  metricnameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 MetricNameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_metricnameid(&has_bits);
          metricnameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MetricValueMessage MetricValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metricvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MetricListElementMessage MetricValueList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metricvaluelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricResultMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MetricNameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metricnameid(), target);
  }

  // optional .MetricValueMessage MetricValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metricvalue(this), target, stream);
  }

  // repeated .MetricListElementMessage MetricValueList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metricvaluelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_metricvaluelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricResultMessage)
  return target;
}

size_t MetricResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricResultMessage)
  size_t total_size = 0;

  // required uint32 MetricNameId = 1;
  if (_internal_has_metricnameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_metricnameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MetricListElementMessage MetricValueList = 3;
  total_size += 1UL * this->_internal_metricvaluelist_size();
  for (const auto& msg : this->metricvaluelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .MetricValueMessage MetricValue = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metricvalue_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricResultMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricResultMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricResultMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricResultMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricResultMessage)
    MergeFrom(*source);
  }
}

void MetricResultMessage::MergeFrom(const MetricResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metricvaluelist_.MergeFrom(from.metricvaluelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metricvalue()->::MetricValueMessage::MergeFrom(from._internal_metricvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      metricnameid_ = from.metricnameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricResultMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricResultMessage::CopyFrom(const MetricResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricResultMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metricvaluelist_)) return false;
  return true;
}

void MetricResultMessage::InternalSwap(MetricResultMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metricvaluelist_.InternalSwap(&other->metricvaluelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricResultMessage, metricnameid_)
      + sizeof(MetricResultMessage::metricnameid_)
      - PROTOBUF_FIELD_OFFSET(MetricResultMessage, metricvalue_)>(
          reinterpret_cast<char*>(&metricvalue_),
          reinterpret_cast<char*>(&other->metricvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricResultMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSourceMessage_TypeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSourceMessage_TypeInfo>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilerSourceMessage_TypeInfo::ProfilerSourceMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSourceMessage.TypeInfo)
}
ProfilerSourceMessage_TypeInfo::ProfilerSourceMessage_TypeInfo(const ProfilerSourceMessage_TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:ProfilerSourceMessage.TypeInfo)
}

void ProfilerSourceMessage_TypeInfo::SharedCtor() {
  category_ = 3;
  method_ = 1;
}

ProfilerSourceMessage_TypeInfo::~ProfilerSourceMessage_TypeInfo() {
  // @@protoc_insertion_point(destructor:ProfilerSourceMessage.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSourceMessage_TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerSourceMessage_TypeInfo::ArenaDtor(void* object) {
  ProfilerSourceMessage_TypeInfo* _this = reinterpret_cast< ProfilerSourceMessage_TypeInfo* >(object);
  (void)_this;
}
void ProfilerSourceMessage_TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSourceMessage_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSourceMessage_TypeInfo& ProfilerSourceMessage_TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSourceMessage_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSourceMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 3;
    method_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSourceMessage_TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProfilerCategory Category = 1 [default = CategoryResults];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerCategory_IsValid(val))) {
            _internal_set_category(static_cast<::ProfilerCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProfilerResultsMethod Method = 2 [default = MethodSourceMessage];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerResultsMethod_IsValid(val))) {
            _internal_set_method(static_cast<::ProfilerResultsMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSourceMessage_TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSourceMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfilerCategory Category = 1 [default = CategoryResults];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional .ProfilerResultsMethod Method = 2 [default = MethodSourceMessage];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSourceMessage.TypeInfo)
  return target;
}

size_t ProfilerSourceMessage_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSourceMessage.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ProfilerCategory Category = 1 [default = CategoryResults];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .ProfilerResultsMethod Method = 2 [default = MethodSourceMessage];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSourceMessage_TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSourceMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSourceMessage_TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSourceMessage_TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSourceMessage.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSourceMessage.TypeInfo)
    MergeFrom(*source);
  }
}

void ProfilerSourceMessage_TypeInfo::MergeFrom(const ProfilerSourceMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSourceMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerSourceMessage_TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSourceMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSourceMessage_TypeInfo::CopyFrom(const ProfilerSourceMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSourceMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSourceMessage_TypeInfo::IsInitialized() const {
  return true;
}

void ProfilerSourceMessage_TypeInfo::InternalSwap(ProfilerSourceMessage_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSourceMessage_TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerSourceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerSourceMessage>()._has_bits_);
  static const ::SourceData& source(const ProfilerSourceMessage* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::SourceData&
ProfilerSourceMessage::_Internal::source(const ProfilerSourceMessage* msg) {
  return *msg->source_;
}
void ProfilerSourceMessage::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ProfilerSourceMessage::ProfilerSourceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerSourceMessage)
}
ProfilerSourceMessage::ProfilerSourceMessage(const ProfilerSourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::SourceData(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerSourceMessage)
}

void ProfilerSourceMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerSourceMessage_ProfilerResults_2eproto.base);
  source_ = nullptr;
}

ProfilerSourceMessage::~ProfilerSourceMessage() {
  // @@protoc_insertion_point(destructor:ProfilerSourceMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerSourceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
}

void ProfilerSourceMessage::ArenaDtor(void* object) {
  ProfilerSourceMessage* _this = reinterpret_cast< ProfilerSourceMessage* >(object);
  (void)_this;
}
void ProfilerSourceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerSourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerSourceMessage& ProfilerSourceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerSourceMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ProfilerSourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(source_ != nullptr);
    source_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerSourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SourceData Source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerSourceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SourceData Source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerSourceMessage)
  return target;
}

size_t ProfilerSourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerSourceMessage)
  size_t total_size = 0;

  // required .SourceData Source = 1;
  if (_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerSourceMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerSourceMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerSourceMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerSourceMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerSourceMessage)
    MergeFrom(*source);
  }
}

void ProfilerSourceMessage::MergeFrom(const ProfilerSourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_mutable_source()->::SourceData::MergeFrom(from._internal_source());
  }
}

void ProfilerSourceMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerSourceMessage::CopyFrom(const ProfilerSourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerSourceMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProfilerSourceMessage::InternalSwap(ProfilerSourceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerSourceMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClearCachedProfilerSourceMessage_TypeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearCachedProfilerSourceMessage_TypeInfo>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClearCachedProfilerSourceMessage_TypeInfo::ClearCachedProfilerSourceMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClearCachedProfilerSourceMessage.TypeInfo)
}
ClearCachedProfilerSourceMessage_TypeInfo::ClearCachedProfilerSourceMessage_TypeInfo(const ClearCachedProfilerSourceMessage_TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:ClearCachedProfilerSourceMessage.TypeInfo)
}

void ClearCachedProfilerSourceMessage_TypeInfo::SharedCtor() {
  category_ = 3;
  method_ = 3;
}

ClearCachedProfilerSourceMessage_TypeInfo::~ClearCachedProfilerSourceMessage_TypeInfo() {
  // @@protoc_insertion_point(destructor:ClearCachedProfilerSourceMessage.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearCachedProfilerSourceMessage_TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearCachedProfilerSourceMessage_TypeInfo::ArenaDtor(void* object) {
  ClearCachedProfilerSourceMessage_TypeInfo* _this = reinterpret_cast< ClearCachedProfilerSourceMessage_TypeInfo* >(object);
  (void)_this;
}
void ClearCachedProfilerSourceMessage_TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearCachedProfilerSourceMessage_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearCachedProfilerSourceMessage_TypeInfo& ClearCachedProfilerSourceMessage_TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearCachedProfilerSourceMessage_TypeInfo_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ClearCachedProfilerSourceMessage_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ClearCachedProfilerSourceMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 3;
    method_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearCachedProfilerSourceMessage_TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProfilerCategory Category = 1 [default = CategoryResults];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerCategory_IsValid(val))) {
            _internal_set_category(static_cast<::ProfilerCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProfilerResultsMethod Method = 2 [default = MethodClearCachedProfilerSourceMessage];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerResultsMethod_IsValid(val))) {
            _internal_set_method(static_cast<::ProfilerResultsMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearCachedProfilerSourceMessage_TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClearCachedProfilerSourceMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfilerCategory Category = 1 [default = CategoryResults];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional .ProfilerResultsMethod Method = 2 [default = MethodClearCachedProfilerSourceMessage];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClearCachedProfilerSourceMessage.TypeInfo)
  return target;
}

size_t ClearCachedProfilerSourceMessage_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClearCachedProfilerSourceMessage.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ProfilerCategory Category = 1 [default = CategoryResults];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .ProfilerResultsMethod Method = 2 [default = MethodClearCachedProfilerSourceMessage];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearCachedProfilerSourceMessage_TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClearCachedProfilerSourceMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearCachedProfilerSourceMessage_TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearCachedProfilerSourceMessage_TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClearCachedProfilerSourceMessage.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClearCachedProfilerSourceMessage.TypeInfo)
    MergeFrom(*source);
  }
}

void ClearCachedProfilerSourceMessage_TypeInfo::MergeFrom(const ClearCachedProfilerSourceMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClearCachedProfilerSourceMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearCachedProfilerSourceMessage_TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClearCachedProfilerSourceMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearCachedProfilerSourceMessage_TypeInfo::CopyFrom(const ClearCachedProfilerSourceMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClearCachedProfilerSourceMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearCachedProfilerSourceMessage_TypeInfo::IsInitialized() const {
  return true;
}

void ClearCachedProfilerSourceMessage_TypeInfo::InternalSwap(ClearCachedProfilerSourceMessage_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearCachedProfilerSourceMessage_TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClearCachedProfilerSourceMessage::_Internal {
 public:
};

ClearCachedProfilerSourceMessage::ClearCachedProfilerSourceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClearCachedProfilerSourceMessage)
}
ClearCachedProfilerSourceMessage::ClearCachedProfilerSourceMessage(const ClearCachedProfilerSourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClearCachedProfilerSourceMessage)
}

void ClearCachedProfilerSourceMessage::SharedCtor() {
}

ClearCachedProfilerSourceMessage::~ClearCachedProfilerSourceMessage() {
  // @@protoc_insertion_point(destructor:ClearCachedProfilerSourceMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearCachedProfilerSourceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearCachedProfilerSourceMessage::ArenaDtor(void* object) {
  ClearCachedProfilerSourceMessage* _this = reinterpret_cast< ClearCachedProfilerSourceMessage* >(object);
  (void)_this;
}
void ClearCachedProfilerSourceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearCachedProfilerSourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearCachedProfilerSourceMessage& ClearCachedProfilerSourceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearCachedProfilerSourceMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ClearCachedProfilerSourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClearCachedProfilerSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearCachedProfilerSourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearCachedProfilerSourceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClearCachedProfilerSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClearCachedProfilerSourceMessage)
  return target;
}

size_t ClearCachedProfilerSourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClearCachedProfilerSourceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearCachedProfilerSourceMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClearCachedProfilerSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearCachedProfilerSourceMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearCachedProfilerSourceMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClearCachedProfilerSourceMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClearCachedProfilerSourceMessage)
    MergeFrom(*source);
  }
}

void ClearCachedProfilerSourceMessage::MergeFrom(const ClearCachedProfilerSourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClearCachedProfilerSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearCachedProfilerSourceMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClearCachedProfilerSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearCachedProfilerSourceMessage::CopyFrom(const ClearCachedProfilerSourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClearCachedProfilerSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearCachedProfilerSourceMessage::IsInitialized() const {
  return true;
}

void ClearCachedProfilerSourceMessage::InternalSwap(ClearCachedProfilerSourceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearCachedProfilerSourceMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerVersionInfoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerVersionInfoMessage>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProfilerVersionInfoMessage::ProfilerVersionInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerVersionInfoMessage)
}
ProfilerVersionInfoMessage::ProfilerVersionInfoMessage(const ProfilerVersionInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_provider()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProfilerVersionInfoMessage)
}

void ProfilerVersionInfoMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfilerVersionInfoMessage::~ProfilerVersionInfoMessage() {
  // @@protoc_insertion_point(destructor:ProfilerVersionInfoMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerVersionInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerVersionInfoMessage::ArenaDtor(void* object) {
  ProfilerVersionInfoMessage* _this = reinterpret_cast< ProfilerVersionInfoMessage* >(object);
  (void)_this;
}
void ProfilerVersionInfoMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerVersionInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerVersionInfoMessage& ProfilerVersionInfoMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerVersionInfoMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ProfilerVersionInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerVersionInfoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      provider_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerVersionInfoMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerVersionInfoMessage.Provider");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfilerVersionInfoMessage.Version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerVersionInfoMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerVersionInfoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerVersionInfoMessage.Provider");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider(), target);
  }

  // required string Version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfilerVersionInfoMessage.Version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerVersionInfoMessage)
  return target;
}

size_t ProfilerVersionInfoMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProfilerVersionInfoMessage)
  size_t total_size = 0;

  if (_internal_has_provider()) {
    // required string Provider = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  if (_internal_has_version()) {
    // required string Version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return total_size;
}
size_t ProfilerVersionInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerVersionInfoMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Provider = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());

    // required string Version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerVersionInfoMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerVersionInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerVersionInfoMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerVersionInfoMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerVersionInfoMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerVersionInfoMessage)
    MergeFrom(*source);
  }
}

void ProfilerVersionInfoMessage::MergeFrom(const ProfilerVersionInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerVersionInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_provider(from._internal_provider());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
  }
}

void ProfilerVersionInfoMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerVersionInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerVersionInfoMessage::CopyFrom(const ProfilerVersionInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerVersionInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerVersionInfoMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProfilerVersionInfoMessage::InternalSwap(ProfilerVersionInfoMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerVersionInfoMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerResultMessage_TypeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerResultMessage_TypeInfo>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilerResultMessage_TypeInfo::ProfilerResultMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerResultMessage.TypeInfo)
}
ProfilerResultMessage_TypeInfo::ProfilerResultMessage_TypeInfo(const ProfilerResultMessage_TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:ProfilerResultMessage.TypeInfo)
}

void ProfilerResultMessage_TypeInfo::SharedCtor() {
  category_ = 3;
  method_ = 2;
}

ProfilerResultMessage_TypeInfo::~ProfilerResultMessage_TypeInfo() {
  // @@protoc_insertion_point(destructor:ProfilerResultMessage.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerResultMessage_TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilerResultMessage_TypeInfo::ArenaDtor(void* object) {
  ProfilerResultMessage_TypeInfo* _this = reinterpret_cast< ProfilerResultMessage_TypeInfo* >(object);
  (void)_this;
}
void ProfilerResultMessage_TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerResultMessage_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerResultMessage_TypeInfo& ProfilerResultMessage_TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerResultMessage_TypeInfo_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ProfilerResultMessage_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerResultMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 3;
    method_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerResultMessage_TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProfilerCategory Category = 1 [default = CategoryResults];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerCategory_IsValid(val))) {
            _internal_set_category(static_cast<::ProfilerCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProfilerResultsMethod Method = 2 [default = MethodResultMessage];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProfilerResultsMethod_IsValid(val))) {
            _internal_set_method(static_cast<::ProfilerResultsMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerResultMessage_TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerResultMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfilerCategory Category = 1 [default = CategoryResults];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional .ProfilerResultsMethod Method = 2 [default = MethodResultMessage];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerResultMessage.TypeInfo)
  return target;
}

size_t ProfilerResultMessage_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerResultMessage.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ProfilerCategory Category = 1 [default = CategoryResults];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .ProfilerResultsMethod Method = 2 [default = MethodResultMessage];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerResultMessage_TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerResultMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerResultMessage_TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerResultMessage_TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerResultMessage.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerResultMessage.TypeInfo)
    MergeFrom(*source);
  }
}

void ProfilerResultMessage_TypeInfo::MergeFrom(const ProfilerResultMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerResultMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerResultMessage_TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerResultMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerResultMessage_TypeInfo::CopyFrom(const ProfilerResultMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerResultMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerResultMessage_TypeInfo::IsInitialized() const {
  return true;
}

void ProfilerResultMessage_TypeInfo::InternalSwap(ProfilerResultMessage_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerResultMessage_TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfilerResultMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilerResultMessage>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::LaunchData& launch(const ProfilerResultMessage* msg);
  static void set_has_launch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SourceData& source(const ProfilerResultMessage* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerStringTable& stringtable(const ProfilerResultMessage* msg);
  static void set_has_stringtable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unsupporteddevice(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ProfileSeriesInfoMessage& seriesinfo(const ProfilerResultMessage* msg);
  static void set_has_seriesinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::LaunchData&
ProfilerResultMessage::_Internal::launch(const ProfilerResultMessage* msg) {
  return *msg->launch_;
}
const ::SourceData&
ProfilerResultMessage::_Internal::source(const ProfilerResultMessage* msg) {
  return *msg->source_;
}
const ::ProfilerStringTable&
ProfilerResultMessage::_Internal::stringtable(const ProfilerResultMessage* msg) {
  return *msg->stringtable_;
}
const ::ProfileSeriesInfoMessage&
ProfilerResultMessage::_Internal::seriesinfo(const ProfilerResultMessage* msg) {
  return *msg->seriesinfo_;
}
void ProfilerResultMessage::clear_launch() {
  if (launch_ != nullptr) launch_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ProfilerResultMessage::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ProfilerResultMessage::clear_stringtable() {
  if (stringtable_ != nullptr) stringtable_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ProfilerResultMessage::clear_seriesinfo() {
  if (seriesinfo_ != nullptr) seriesinfo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ProfilerResultMessage::ProfilerResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metricresults_(arena),
  versioninfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfilerResultMessage)
}
ProfilerResultMessage::ProfilerResultMessage(const ProfilerResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metricresults_(from.metricresults_),
      versioninfo_(from.versioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_launch()) {
    launch_ = new ::LaunchData(*from.launch_);
  } else {
    launch_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::SourceData(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_stringtable()) {
    stringtable_ = new ::ProfilerStringTable(*from.stringtable_);
  } else {
    stringtable_ = nullptr;
  }
  if (from._internal_has_seriesinfo()) {
    seriesinfo_ = new ::ProfileSeriesInfoMessage(*from.seriesinfo_);
  } else {
    seriesinfo_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsupporteddevice_) -
    reinterpret_cast<char*>(&id_)) + sizeof(unsupporteddevice_));
  // @@protoc_insertion_point(copy_constructor:ProfilerResultMessage)
}

void ProfilerResultMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerResultMessage_ProfilerResults_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&launch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unsupporteddevice_) -
      reinterpret_cast<char*>(&launch_)) + sizeof(unsupporteddevice_));
}

ProfilerResultMessage::~ProfilerResultMessage() {
  // @@protoc_insertion_point(destructor:ProfilerResultMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfilerResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete launch_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete stringtable_;
  if (this != internal_default_instance()) delete seriesinfo_;
}

void ProfilerResultMessage::ArenaDtor(void* object) {
  ProfilerResultMessage* _this = reinterpret_cast< ProfilerResultMessage* >(object);
  (void)_this;
}
void ProfilerResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilerResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerResultMessage& ProfilerResultMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerResultMessage_ProfilerResults_2eproto.base);
  return *internal_default_instance();
}


void ProfilerResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilerResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metricresults_.Clear();
  versioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(launch_ != nullptr);
      launch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stringtable_ != nullptr);
      stringtable_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(seriesinfo_ != nullptr);
      seriesinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsupporteddevice_) -
        reinterpret_cast<char*>(&id_)) + sizeof(unsupporteddevice_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilerResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .LaunchData Launch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_launch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MetricResultMessage MetricResults = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metricresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .SourceData Source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProfilerStringTable StringTable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool UnsupportedDevice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unsupporteddevice(&has_bits);
          unsupporteddevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProfilerVersionInfoMessage VersionInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ProfileSeriesInfoMessage SeriesInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_seriesinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerResultMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilerResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required .LaunchData Launch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::launch(this), target, stream);
  }

  // repeated .MetricResultMessage MetricResults = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metricresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_metricresults(i), target, stream);
  }

  // required .SourceData Source = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::source(this), target, stream);
  }

  // required .ProfilerStringTable StringTable = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stringtable(this), target, stream);
  }

  // optional bool UnsupportedDevice = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_unsupporteddevice(), target);
  }

  // repeated .ProfilerVersionInfoMessage VersionInfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_versioninfo(i), target, stream);
  }

  // optional .ProfileSeriesInfoMessage SeriesInfo = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::seriesinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilerResultMessage)
  return target;
}

size_t ProfilerResultMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProfilerResultMessage)
  size_t total_size = 0;

  if (_internal_has_launch()) {
    // required .LaunchData Launch = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *launch_);
  }

  if (_internal_has_source()) {
    // required .SourceData Source = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  if (_internal_has_stringtable()) {
    // required .ProfilerStringTable StringTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stringtable_);
  }

  if (_internal_has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t ProfilerResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilerResultMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .LaunchData Launch = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *launch_);

    // required .SourceData Source = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);

    // required .ProfilerStringTable StringTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stringtable_);

    // required uint32 ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MetricResultMessage MetricResults = 3;
  total_size += 1UL * this->_internal_metricresults_size();
  for (const auto& msg : this->metricresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfilerVersionInfoMessage VersionInfo = 7;
  total_size += 1UL * this->_internal_versioninfo_size();
  for (const auto& msg : this->versioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ProfileSeriesInfoMessage SeriesInfo = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seriesinfo_);
  }

  // optional bool UnsupportedDevice = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerResultMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfilerResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerResultMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerResultMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfilerResultMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfilerResultMessage)
    MergeFrom(*source);
  }
}

void ProfilerResultMessage::MergeFrom(const ProfilerResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilerResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metricresults_.MergeFrom(from.metricresults_);
  versioninfo_.MergeFrom(from.versioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_launch()->::LaunchData::MergeFrom(from._internal_launch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source()->::SourceData::MergeFrom(from._internal_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stringtable()->::ProfilerStringTable::MergeFrom(from._internal_stringtable());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_seriesinfo()->::ProfileSeriesInfoMessage::MergeFrom(from._internal_seriesinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      unsupporteddevice_ = from.unsupporteddevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilerResultMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfilerResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerResultMessage::CopyFrom(const ProfilerResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilerResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerResultMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metricresults_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(versioninfo_)) return false;
  if (_internal_has_launch()) {
    if (!launch_->IsInitialized()) return false;
  }
  if (_internal_has_seriesinfo()) {
    if (!seriesinfo_->IsInitialized()) return false;
  }
  return true;
}

void ProfilerResultMessage::InternalSwap(ProfilerResultMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metricresults_.InternalSwap(&other->metricresults_);
  versioninfo_.InternalSwap(&other->versioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilerResultMessage, unsupporteddevice_)
      + sizeof(ProfilerResultMessage::unsupporteddevice_)
      - PROTOBUF_FIELD_OFFSET(ProfilerResultMessage, launch_)>(
          reinterpret_cast<char*>(&launch_),
          reinterpret_cast<char*>(&other->launch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerResultMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MetricValueMessage* Arena::CreateMaybeMessage< ::MetricValueMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricValueMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricListElementMessage* Arena::CreateMaybeMessage< ::MetricListElementMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricListElementMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricResultMessage* Arena::CreateMaybeMessage< ::MetricResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSourceMessage_TypeInfo* Arena::CreateMaybeMessage< ::ProfilerSourceMessage_TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSourceMessage_TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerSourceMessage* Arena::CreateMaybeMessage< ::ProfilerSourceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerSourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ClearCachedProfilerSourceMessage_TypeInfo* Arena::CreateMaybeMessage< ::ClearCachedProfilerSourceMessage_TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClearCachedProfilerSourceMessage_TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ClearCachedProfilerSourceMessage* Arena::CreateMaybeMessage< ::ClearCachedProfilerSourceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClearCachedProfilerSourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerVersionInfoMessage* Arena::CreateMaybeMessage< ::ProfilerVersionInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerVersionInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerResultMessage_TypeInfo* Arena::CreateMaybeMessage< ::ProfilerResultMessage_TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerResultMessage_TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilerResultMessage* Arena::CreateMaybeMessage< ::ProfilerResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilerResultMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
