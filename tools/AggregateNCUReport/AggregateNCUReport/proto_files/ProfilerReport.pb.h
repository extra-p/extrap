// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerReport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProfilerReport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProfilerReport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Nvtx.pb.h"
#include "ProfilerStringTable.pb.h"
#include "ProfilerCommon.pb.h"
#include "ProfilerReportCommon.pb.h"
#include "ProfilerSection.pb.h"
#include "RuleResults.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProfilerReport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProfilerReport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerReport_2eproto;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class Comment;
class CommentDefaultTypeInternal;
extern CommentDefaultTypeInternal _Comment_default_instance_;
class CommentID;
class CommentIDDefaultTypeInternal;
extern CommentIDDefaultTypeInternal _CommentID_default_instance_;
class DeviceAttribute;
class DeviceAttributeDefaultTypeInternal;
extern DeviceAttributeDefaultTypeInternal _DeviceAttribute_default_instance_;
class DeviceAttributes;
class DeviceAttributesDefaultTypeInternal;
extern DeviceAttributesDefaultTypeInternal _DeviceAttributes_default_instance_;
class DeviceProperties;
class DevicePropertiesDefaultTypeInternal;
extern DevicePropertiesDefaultTypeInternal _DeviceProperties_default_instance_;
class DeviceProperty;
class DevicePropertyDefaultTypeInternal;
extern DevicePropertyDefaultTypeInternal _DeviceProperty_default_instance_;
class FileHeader;
class FileHeaderDefaultTypeInternal;
extern FileHeaderDefaultTypeInternal _FileHeader_default_instance_;
class FilterOptions;
class FilterOptionsDefaultTypeInternal;
extern FilterOptionsDefaultTypeInternal _FilterOptions_default_instance_;
class OtherOptions;
class OtherOptionsDefaultTypeInternal;
extern OtherOptionsDefaultTypeInternal _OtherOptions_default_instance_;
class ProcessInfo;
class ProcessInfoDefaultTypeInternal;
extern ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
class ProfileMetricListElement;
class ProfileMetricListElementDefaultTypeInternal;
extern ProfileMetricListElementDefaultTypeInternal _ProfileMetricListElement_default_instance_;
class ProfileMetricResult;
class ProfileMetricResultDefaultTypeInternal;
extern ProfileMetricResultDefaultTypeInternal _ProfileMetricResult_default_instance_;
class ProfileMetricValue;
class ProfileMetricValueDefaultTypeInternal;
extern ProfileMetricValueDefaultTypeInternal _ProfileMetricValue_default_instance_;
class ProfileResult;
class ProfileResultDefaultTypeInternal;
extern ProfileResultDefaultTypeInternal _ProfileResult_default_instance_;
class ProfileSeriesInfoMessage;
class ProfileSeriesInfoMessageDefaultTypeInternal;
extern ProfileSeriesInfoMessageDefaultTypeInternal _ProfileSeriesInfoMessage_default_instance_;
class ProfilerSettings;
class ProfilerSettingsDefaultTypeInternal;
extern ProfilerSettingsDefaultTypeInternal _ProfilerSettings_default_instance_;
class ReportSessionDetails;
class ReportSessionDetailsDefaultTypeInternal;
extern ReportSessionDetailsDefaultTypeInternal _ReportSessionDetails_default_instance_;
class SamplingOptions;
class SamplingOptionsDefaultTypeInternal;
extern SamplingOptionsDefaultTypeInternal _SamplingOptions_default_instance_;
class SystemInfo;
class SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class VersionInfo;
class VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockHeader* Arena::CreateMaybeMessage<::BlockHeader>(Arena*);
template<> ::Comment* Arena::CreateMaybeMessage<::Comment>(Arena*);
template<> ::CommentID* Arena::CreateMaybeMessage<::CommentID>(Arena*);
template<> ::DeviceAttribute* Arena::CreateMaybeMessage<::DeviceAttribute>(Arena*);
template<> ::DeviceAttributes* Arena::CreateMaybeMessage<::DeviceAttributes>(Arena*);
template<> ::DeviceProperties* Arena::CreateMaybeMessage<::DeviceProperties>(Arena*);
template<> ::DeviceProperty* Arena::CreateMaybeMessage<::DeviceProperty>(Arena*);
template<> ::FileHeader* Arena::CreateMaybeMessage<::FileHeader>(Arena*);
template<> ::FilterOptions* Arena::CreateMaybeMessage<::FilterOptions>(Arena*);
template<> ::OtherOptions* Arena::CreateMaybeMessage<::OtherOptions>(Arena*);
template<> ::ProcessInfo* Arena::CreateMaybeMessage<::ProcessInfo>(Arena*);
template<> ::ProfileMetricListElement* Arena::CreateMaybeMessage<::ProfileMetricListElement>(Arena*);
template<> ::ProfileMetricResult* Arena::CreateMaybeMessage<::ProfileMetricResult>(Arena*);
template<> ::ProfileMetricValue* Arena::CreateMaybeMessage<::ProfileMetricValue>(Arena*);
template<> ::ProfileResult* Arena::CreateMaybeMessage<::ProfileResult>(Arena*);
template<> ::ProfileSeriesInfoMessage* Arena::CreateMaybeMessage<::ProfileSeriesInfoMessage>(Arena*);
template<> ::ProfilerSettings* Arena::CreateMaybeMessage<::ProfilerSettings>(Arena*);
template<> ::ReportSessionDetails* Arena::CreateMaybeMessage<::ReportSessionDetails>(Arena*);
template<> ::SamplingOptions* Arena::CreateMaybeMessage<::SamplingOptions>(Arena*);
template<> ::SystemInfo* Arena::CreateMaybeMessage<::SystemInfo>(Arena*);
template<> ::VersionInfo* Arena::CreateMaybeMessage<::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PlatformType : int {
  Unknown = 0,
  Windows = 1,
  Linux = 2,
  Android = 3,
  OSX = 4,
  QNX = 5,
  Hos = 6
};
bool PlatformType_IsValid(int value);
constexpr PlatformType PlatformType_MIN = Unknown;
constexpr PlatformType PlatformType_MAX = Hos;
constexpr int PlatformType_ARRAYSIZE = PlatformType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlatformType_descriptor();
template<typename T>
inline const std::string& PlatformType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlatformType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlatformType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlatformType_descriptor(), enum_t_value);
}
inline bool PlatformType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlatformType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlatformType>(
    PlatformType_descriptor(), name, value);
}
// ===================================================================

class DeviceProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceProperty) */ {
 public:
  inline DeviceProperty() : DeviceProperty(nullptr) {}
  virtual ~DeviceProperty();

  DeviceProperty(const DeviceProperty& from);
  DeviceProperty(DeviceProperty&& from) noexcept
    : DeviceProperty() {
    *this = ::std::move(from);
  }

  inline DeviceProperty& operator=(const DeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProperty& operator=(DeviceProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceProperty& default_instance();

  static inline const DeviceProperty* internal_default_instance() {
    return reinterpret_cast<const DeviceProperty*>(
               &_DeviceProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceProperty& a, DeviceProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceProperty* New() const final {
    return CreateMaybeMessage<DeviceProperty>(nullptr);
  }

  DeviceProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceProperty& from);
  void MergeFrom(const DeviceProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceProperty";
  }
  protected:
  explicit DeviceProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string Key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:DeviceProperty)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class DeviceProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceProperties) */ {
 public:
  inline DeviceProperties() : DeviceProperties(nullptr) {}
  virtual ~DeviceProperties();

  DeviceProperties(const DeviceProperties& from);
  DeviceProperties(DeviceProperties&& from) noexcept
    : DeviceProperties() {
    *this = ::std::move(from);
  }

  inline DeviceProperties& operator=(const DeviceProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProperties& operator=(DeviceProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceProperties& default_instance();

  static inline const DeviceProperties* internal_default_instance() {
    return reinterpret_cast<const DeviceProperties*>(
               &_DeviceProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceProperties& a, DeviceProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceProperties* New() const final {
    return CreateMaybeMessage<DeviceProperties>(nullptr);
  }

  DeviceProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceProperties& from);
  void MergeFrom(const DeviceProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceProperties";
  }
  protected:
  explicit DeviceProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .DeviceProperty Properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::DeviceProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceProperty >*
      mutable_properties();
  private:
  const ::DeviceProperty& _internal_properties(int index) const;
  ::DeviceProperty* _internal_add_properties();
  public:
  const ::DeviceProperty& properties(int index) const;
  ::DeviceProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:DeviceProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceProperty > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class DeviceAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceAttribute) */ {
 public:
  inline DeviceAttribute() : DeviceAttribute(nullptr) {}
  virtual ~DeviceAttribute();

  DeviceAttribute(const DeviceAttribute& from);
  DeviceAttribute(DeviceAttribute&& from) noexcept
    : DeviceAttribute() {
    *this = ::std::move(from);
  }

  inline DeviceAttribute& operator=(const DeviceAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttribute& operator=(DeviceAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceAttribute& default_instance();

  static inline const DeviceAttribute* internal_default_instance() {
    return reinterpret_cast<const DeviceAttribute*>(
               &_DeviceAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceAttribute& a, DeviceAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAttribute* New() const final {
    return CreateMaybeMessage<DeviceAttribute>(nullptr);
  }

  DeviceAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceAttribute& from);
  void MergeFrom(const DeviceAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceAttribute";
  }
  protected:
  explicit DeviceAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .ProfileMetricValue Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::ProfileMetricValue& value() const;
  ::ProfileMetricValue* release_value();
  ::ProfileMetricValue* mutable_value();
  void set_allocated_value(::ProfileMetricValue* value);
  private:
  const ::ProfileMetricValue& _internal_value() const;
  ::ProfileMetricValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::ProfileMetricValue* value);
  ::ProfileMetricValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:DeviceAttribute)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::ProfileMetricValue* value_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class DeviceAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceAttributes) */ {
 public:
  inline DeviceAttributes() : DeviceAttributes(nullptr) {}
  virtual ~DeviceAttributes();

  DeviceAttributes(const DeviceAttributes& from);
  DeviceAttributes(DeviceAttributes&& from) noexcept
    : DeviceAttributes() {
    *this = ::std::move(from);
  }

  inline DeviceAttributes& operator=(const DeviceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttributes& operator=(DeviceAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceAttributes& default_instance();

  static inline const DeviceAttributes* internal_default_instance() {
    return reinterpret_cast<const DeviceAttributes*>(
               &_DeviceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceAttributes& a, DeviceAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAttributes* New() const final {
    return CreateMaybeMessage<DeviceAttributes>(nullptr);
  }

  DeviceAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceAttributes& from);
  void MergeFrom(const DeviceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceAttributes";
  }
  protected:
  explicit DeviceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 3,
    kNameFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated .DeviceAttribute Attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::DeviceAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttribute >*
      mutable_attributes();
  private:
  const ::DeviceAttribute& _internal_attributes(int index) const;
  ::DeviceAttribute* _internal_add_attributes();
  public:
  const ::DeviceAttribute& attributes(int index) const;
  ::DeviceAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttribute >&
      attributes() const;

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 ID = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfo& default_instance();

  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return CreateMaybeMessage<SystemInfo>(nullptr);
  }

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOSNameFieldNumber = 1,
    kBuildFieldNumber = 2,
    kProcessorFieldNumber = 3,
    kArchitectureFieldNumber = 4,
    kComputerNameFieldNumber = 5,
    kPlatformFieldNumber = 6,
  };
  // optional string OSName = 1;
  bool has_osname() const;
  private:
  bool _internal_has_osname() const;
  public:
  void clear_osname();
  const std::string& osname() const;
  void set_osname(const std::string& value);
  void set_osname(std::string&& value);
  void set_osname(const char* value);
  void set_osname(const char* value, size_t size);
  std::string* mutable_osname();
  std::string* release_osname();
  void set_allocated_osname(std::string* osname);
  private:
  const std::string& _internal_osname() const;
  void _internal_set_osname(const std::string& value);
  std::string* _internal_mutable_osname();
  public:

  // optional string Build = 2;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const std::string& build() const;
  void set_build(const std::string& value);
  void set_build(std::string&& value);
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  std::string* mutable_build();
  std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // optional string Processor = 3;
  bool has_processor() const;
  private:
  bool _internal_has_processor() const;
  public:
  void clear_processor();
  const std::string& processor() const;
  void set_processor(const std::string& value);
  void set_processor(std::string&& value);
  void set_processor(const char* value);
  void set_processor(const char* value, size_t size);
  std::string* mutable_processor();
  std::string* release_processor();
  void set_allocated_processor(std::string* processor);
  private:
  const std::string& _internal_processor() const;
  void _internal_set_processor(const std::string& value);
  std::string* _internal_mutable_processor();
  public:

  // optional string Architecture = 4;
  bool has_architecture() const;
  private:
  bool _internal_has_architecture() const;
  public:
  void clear_architecture();
  const std::string& architecture() const;
  void set_architecture(const std::string& value);
  void set_architecture(std::string&& value);
  void set_architecture(const char* value);
  void set_architecture(const char* value, size_t size);
  std::string* mutable_architecture();
  std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);
  private:
  const std::string& _internal_architecture() const;
  void _internal_set_architecture(const std::string& value);
  std::string* _internal_mutable_architecture();
  public:

  // optional string ComputerName = 5;
  bool has_computername() const;
  private:
  bool _internal_has_computername() const;
  public:
  void clear_computername();
  const std::string& computername() const;
  void set_computername(const std::string& value);
  void set_computername(std::string&& value);
  void set_computername(const char* value);
  void set_computername(const char* value, size_t size);
  std::string* mutable_computername();
  std::string* release_computername();
  void set_allocated_computername(std::string* computername);
  private:
  const std::string& _internal_computername() const;
  void _internal_set_computername(const std::string& value);
  std::string* _internal_mutable_computername();
  public:

  // optional .PlatformType Platform = 6;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  ::PlatformType platform() const;
  void set_platform(::PlatformType value);
  private:
  ::PlatformType _internal_platform() const;
  void _internal_set_platform(::PlatformType value);
  public:

  // @@protoc_insertion_point(class_scope:SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computername_;
  int platform_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class VersionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VersionInfo) */ {
 public:
  inline VersionInfo() : VersionInfo(nullptr) {}
  virtual ~VersionInfo();

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionInfo& default_instance();

  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionInfo* New() const final {
    return CreateMaybeMessage<VersionInfo>(nullptr);
  }

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VersionInfo";
  }
  protected:
  explicit VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required string Provider = 1;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // required string Version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:VersionInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class FilterOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilterOptions) */ {
 public:
  inline FilterOptions() : FilterOptions(nullptr) {}
  virtual ~FilterOptions();

  FilterOptions(const FilterOptions& from);
  FilterOptions(FilterOptions&& from) noexcept
    : FilterOptions() {
    *this = ::std::move(from);
  }

  inline FilterOptions& operator=(const FilterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterOptions& operator=(FilterOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterOptions& default_instance();

  static inline const FilterOptions* internal_default_instance() {
    return reinterpret_cast<const FilterOptions*>(
               &_FilterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FilterOptions& a, FilterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterOptions* New() const final {
    return CreateMaybeMessage<FilterOptions>(nullptr);
  }

  FilterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterOptions& from);
  void MergeFrom(const FilterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilterOptions";
  }
  protected:
  explicit FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelRegexFieldNumber = 1,
    kKernelRegexBaseFieldNumber = 2,
    kKernelIdFieldNumber = 3,
    kSkipCountFieldNumber = 4,
    kSkipBeforeMatchCountFieldNumber = 5,
    kCaptureCountFieldNumber = 6,
  };
  // optional string KernelRegex = 1;
  bool has_kernelregex() const;
  private:
  bool _internal_has_kernelregex() const;
  public:
  void clear_kernelregex();
  const std::string& kernelregex() const;
  void set_kernelregex(const std::string& value);
  void set_kernelregex(std::string&& value);
  void set_kernelregex(const char* value);
  void set_kernelregex(const char* value, size_t size);
  std::string* mutable_kernelregex();
  std::string* release_kernelregex();
  void set_allocated_kernelregex(std::string* kernelregex);
  private:
  const std::string& _internal_kernelregex() const;
  void _internal_set_kernelregex(const std::string& value);
  std::string* _internal_mutable_kernelregex();
  public:

  // optional string KernelRegexBase = 2;
  bool has_kernelregexbase() const;
  private:
  bool _internal_has_kernelregexbase() const;
  public:
  void clear_kernelregexbase();
  const std::string& kernelregexbase() const;
  void set_kernelregexbase(const std::string& value);
  void set_kernelregexbase(std::string&& value);
  void set_kernelregexbase(const char* value);
  void set_kernelregexbase(const char* value, size_t size);
  std::string* mutable_kernelregexbase();
  std::string* release_kernelregexbase();
  void set_allocated_kernelregexbase(std::string* kernelregexbase);
  private:
  const std::string& _internal_kernelregexbase() const;
  void _internal_set_kernelregexbase(const std::string& value);
  std::string* _internal_mutable_kernelregexbase();
  public:

  // optional string KernelId = 3;
  bool has_kernelid() const;
  private:
  bool _internal_has_kernelid() const;
  public:
  void clear_kernelid();
  const std::string& kernelid() const;
  void set_kernelid(const std::string& value);
  void set_kernelid(std::string&& value);
  void set_kernelid(const char* value);
  void set_kernelid(const char* value, size_t size);
  std::string* mutable_kernelid();
  std::string* release_kernelid();
  void set_allocated_kernelid(std::string* kernelid);
  private:
  const std::string& _internal_kernelid() const;
  void _internal_set_kernelid(const std::string& value);
  std::string* _internal_mutable_kernelid();
  public:

  // optional uint32 SkipCount = 4;
  bool has_skipcount() const;
  private:
  bool _internal_has_skipcount() const;
  public:
  void clear_skipcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 skipcount() const;
  void set_skipcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skipcount() const;
  void _internal_set_skipcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 SkipBeforeMatchCount = 5;
  bool has_skipbeforematchcount() const;
  private:
  bool _internal_has_skipbeforematchcount() const;
  public:
  void clear_skipbeforematchcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 skipbeforematchcount() const;
  void set_skipbeforematchcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skipbeforematchcount() const;
  void _internal_set_skipbeforematchcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 CaptureCount = 6;
  bool has_capturecount() const;
  private:
  bool _internal_has_capturecount() const;
  public:
  void clear_capturecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 capturecount() const;
  void set_capturecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capturecount() const;
  void _internal_set_capturecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FilterOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelregex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelregexbase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skipcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skipbeforematchcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capturecount_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class SamplingOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SamplingOptions) */ {
 public:
  inline SamplingOptions() : SamplingOptions(nullptr) {}
  virtual ~SamplingOptions();

  SamplingOptions(const SamplingOptions& from);
  SamplingOptions(SamplingOptions&& from) noexcept
    : SamplingOptions() {
    *this = ::std::move(from);
  }

  inline SamplingOptions& operator=(const SamplingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplingOptions& operator=(SamplingOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplingOptions& default_instance();

  static inline const SamplingOptions* internal_default_instance() {
    return reinterpret_cast<const SamplingOptions*>(
               &_SamplingOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SamplingOptions& a, SamplingOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplingOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplingOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplingOptions* New() const final {
    return CreateMaybeMessage<SamplingOptions>(nullptr);
  }

  SamplingOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplingOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplingOptions& from);
  void MergeFrom(const SamplingOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplingOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SamplingOptions";
  }
  protected:
  explicit SamplingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 2,
    kMaxPassesFieldNumber = 3,
    kBufferSizeFieldNumber = 4,
    kIntervalAutoFieldNumber = 1,
  };
  // optional uint64 Interval = 2;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 MaxPasses = 3;
  bool has_maxpasses() const;
  private:
  bool _internal_has_maxpasses() const;
  public:
  void clear_maxpasses();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxpasses() const;
  void set_maxpasses(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxpasses() const;
  void _internal_set_maxpasses(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 BufferSize = 4;
  bool has_buffersize() const;
  private:
  bool _internal_has_buffersize() const;
  public:
  void clear_buffersize();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffersize() const;
  void set_buffersize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buffersize() const;
  void _internal_set_buffersize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool IntervalAuto = 1;
  bool has_intervalauto() const;
  private:
  bool _internal_has_intervalauto() const;
  public:
  void clear_intervalauto();
  bool intervalauto() const;
  void set_intervalauto(bool value);
  private:
  bool _internal_intervalauto() const;
  void _internal_set_intervalauto(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SamplingOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxpasses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffersize_;
  bool intervalauto_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class OtherOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherOptions) */ {
 public:
  inline OtherOptions() : OtherOptions(nullptr) {}
  virtual ~OtherOptions();

  OtherOptions(const OtherOptions& from);
  OtherOptions(OtherOptions&& from) noexcept
    : OtherOptions() {
    *this = ::std::move(from);
  }

  inline OtherOptions& operator=(const OtherOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherOptions& operator=(OtherOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherOptions& default_instance();

  static inline const OtherOptions* internal_default_instance() {
    return reinterpret_cast<const OtherOptions*>(
               &_OtherOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OtherOptions& a, OtherOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherOptions* New() const final {
    return CreateMaybeMessage<OtherOptions>(nullptr);
  }

  OtherOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherOptions& from);
  void MergeFrom(const OtherOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherOptions";
  }
  protected:
  explicit OtherOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kApplyRulesFieldNumber = 1,
  };
  // optional string Metrics = 2;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const std::string& metrics() const;
  void set_metrics(const std::string& value);
  void set_metrics(std::string&& value);
  void set_metrics(const char* value);
  void set_metrics(const char* value, size_t size);
  std::string* mutable_metrics();
  std::string* release_metrics();
  void set_allocated_metrics(std::string* metrics);
  private:
  const std::string& _internal_metrics() const;
  void _internal_set_metrics(const std::string& value);
  std::string* _internal_mutable_metrics();
  public:

  // optional bool ApplyRules = 1;
  bool has_applyrules() const;
  private:
  bool _internal_has_applyrules() const;
  public:
  void clear_applyrules();
  bool applyrules() const;
  void set_applyrules(bool value);
  private:
  bool _internal_applyrules() const;
  void _internal_set_applyrules(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OtherOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrics_;
  bool applyrules_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfilerSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilerSettings) */ {
 public:
  inline ProfilerSettings() : ProfilerSettings(nullptr) {}
  virtual ~ProfilerSettings();

  ProfilerSettings(const ProfilerSettings& from);
  ProfilerSettings(ProfilerSettings&& from) noexcept
    : ProfilerSettings() {
    *this = ::std::move(from);
  }

  inline ProfilerSettings& operator=(const ProfilerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerSettings& operator=(ProfilerSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilerSettings& default_instance();

  static inline const ProfilerSettings* internal_default_instance() {
    return reinterpret_cast<const ProfilerSettings*>(
               &_ProfilerSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProfilerSettings& a, ProfilerSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilerSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerSettings* New() const final {
    return CreateMaybeMessage<ProfilerSettings>(nullptr);
  }

  ProfilerSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilerSettings& from);
  void MergeFrom(const ProfilerSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilerSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilerSettings";
  }
  protected:
  explicit ProfilerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityTypeFieldNumber = 4,
    kEnabledSectionsFieldNumber = 7,
    kClockControlModeFieldNumber = 8,
    kFilterOptionsFieldNumber = 5,
    kOtherOptionsFieldNumber = 6,
    kSamplingOptionsFieldNumber = 9,
    kEnableNvtxFieldNumber = 1,
    kDisableProfilingStartStopFieldNumber = 2,
    kEnableProfilingFromStartFieldNumber = 3,
  };
  // optional string ActivityType = 4;
  bool has_activitytype() const;
  private:
  bool _internal_has_activitytype() const;
  public:
  void clear_activitytype();
  const std::string& activitytype() const;
  void set_activitytype(const std::string& value);
  void set_activitytype(std::string&& value);
  void set_activitytype(const char* value);
  void set_activitytype(const char* value, size_t size);
  std::string* mutable_activitytype();
  std::string* release_activitytype();
  void set_allocated_activitytype(std::string* activitytype);
  private:
  const std::string& _internal_activitytype() const;
  void _internal_set_activitytype(const std::string& value);
  std::string* _internal_mutable_activitytype();
  public:

  // optional string EnabledSections = 7;
  bool has_enabledsections() const;
  private:
  bool _internal_has_enabledsections() const;
  public:
  void clear_enabledsections();
  const std::string& enabledsections() const;
  void set_enabledsections(const std::string& value);
  void set_enabledsections(std::string&& value);
  void set_enabledsections(const char* value);
  void set_enabledsections(const char* value, size_t size);
  std::string* mutable_enabledsections();
  std::string* release_enabledsections();
  void set_allocated_enabledsections(std::string* enabledsections);
  private:
  const std::string& _internal_enabledsections() const;
  void _internal_set_enabledsections(const std::string& value);
  std::string* _internal_mutable_enabledsections();
  public:

  // optional string ClockControlMode = 8;
  bool has_clockcontrolmode() const;
  private:
  bool _internal_has_clockcontrolmode() const;
  public:
  void clear_clockcontrolmode();
  const std::string& clockcontrolmode() const;
  void set_clockcontrolmode(const std::string& value);
  void set_clockcontrolmode(std::string&& value);
  void set_clockcontrolmode(const char* value);
  void set_clockcontrolmode(const char* value, size_t size);
  std::string* mutable_clockcontrolmode();
  std::string* release_clockcontrolmode();
  void set_allocated_clockcontrolmode(std::string* clockcontrolmode);
  private:
  const std::string& _internal_clockcontrolmode() const;
  void _internal_set_clockcontrolmode(const std::string& value);
  std::string* _internal_mutable_clockcontrolmode();
  public:

  // optional .FilterOptions FilterOptions = 5;
  bool has_filteroptions() const;
  private:
  bool _internal_has_filteroptions() const;
  public:
  void clear_filteroptions();
  const ::FilterOptions& filteroptions() const;
  ::FilterOptions* release_filteroptions();
  ::FilterOptions* mutable_filteroptions();
  void set_allocated_filteroptions(::FilterOptions* filteroptions);
  private:
  const ::FilterOptions& _internal_filteroptions() const;
  ::FilterOptions* _internal_mutable_filteroptions();
  public:
  void unsafe_arena_set_allocated_filteroptions(
      ::FilterOptions* filteroptions);
  ::FilterOptions* unsafe_arena_release_filteroptions();

  // optional .OtherOptions OtherOptions = 6;
  bool has_otheroptions() const;
  private:
  bool _internal_has_otheroptions() const;
  public:
  void clear_otheroptions();
  const ::OtherOptions& otheroptions() const;
  ::OtherOptions* release_otheroptions();
  ::OtherOptions* mutable_otheroptions();
  void set_allocated_otheroptions(::OtherOptions* otheroptions);
  private:
  const ::OtherOptions& _internal_otheroptions() const;
  ::OtherOptions* _internal_mutable_otheroptions();
  public:
  void unsafe_arena_set_allocated_otheroptions(
      ::OtherOptions* otheroptions);
  ::OtherOptions* unsafe_arena_release_otheroptions();

  // optional .SamplingOptions SamplingOptions = 9;
  bool has_samplingoptions() const;
  private:
  bool _internal_has_samplingoptions() const;
  public:
  void clear_samplingoptions();
  const ::SamplingOptions& samplingoptions() const;
  ::SamplingOptions* release_samplingoptions();
  ::SamplingOptions* mutable_samplingoptions();
  void set_allocated_samplingoptions(::SamplingOptions* samplingoptions);
  private:
  const ::SamplingOptions& _internal_samplingoptions() const;
  ::SamplingOptions* _internal_mutable_samplingoptions();
  public:
  void unsafe_arena_set_allocated_samplingoptions(
      ::SamplingOptions* samplingoptions);
  ::SamplingOptions* unsafe_arena_release_samplingoptions();

  // optional bool EnableNvtx = 1;
  bool has_enablenvtx() const;
  private:
  bool _internal_has_enablenvtx() const;
  public:
  void clear_enablenvtx();
  bool enablenvtx() const;
  void set_enablenvtx(bool value);
  private:
  bool _internal_enablenvtx() const;
  void _internal_set_enablenvtx(bool value);
  public:

  // optional bool DisableProfilingStartStop = 2;
  bool has_disableprofilingstartstop() const;
  private:
  bool _internal_has_disableprofilingstartstop() const;
  public:
  void clear_disableprofilingstartstop();
  bool disableprofilingstartstop() const;
  void set_disableprofilingstartstop(bool value);
  private:
  bool _internal_disableprofilingstartstop() const;
  void _internal_set_disableprofilingstartstop(bool value);
  public:

  // optional bool EnableProfilingFromStart = 3;
  bool has_enableprofilingfromstart() const;
  private:
  bool _internal_has_enableprofilingfromstart() const;
  public:
  void clear_enableprofilingfromstart();
  bool enableprofilingfromstart() const;
  void set_enableprofilingfromstart(bool value);
  private:
  bool _internal_enableprofilingfromstart() const;
  void _internal_set_enableprofilingfromstart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilerSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enabledsections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clockcontrolmode_;
  ::FilterOptions* filteroptions_;
  ::OtherOptions* otheroptions_;
  ::SamplingOptions* samplingoptions_;
  bool enablenvtx_;
  bool disableprofilingstartstop_;
  bool enableprofilingfromstart_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ReportSessionDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReportSessionDetails) */ {
 public:
  inline ReportSessionDetails() : ReportSessionDetails(nullptr) {}
  virtual ~ReportSessionDetails();

  ReportSessionDetails(const ReportSessionDetails& from);
  ReportSessionDetails(ReportSessionDetails&& from) noexcept
    : ReportSessionDetails() {
    *this = ::std::move(from);
  }

  inline ReportSessionDetails& operator=(const ReportSessionDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportSessionDetails& operator=(ReportSessionDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportSessionDetails& default_instance();

  static inline const ReportSessionDetails* internal_default_instance() {
    return reinterpret_cast<const ReportSessionDetails*>(
               &_ReportSessionDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReportSessionDetails& a, ReportSessionDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportSessionDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportSessionDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportSessionDetails* New() const final {
    return CreateMaybeMessage<ReportSessionDetails>(nullptr);
  }

  ReportSessionDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportSessionDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportSessionDetails& from);
  void MergeFrom(const ReportSessionDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportSessionDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReportSessionDetails";
  }
  protected:
  explicit ReportSessionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceAttributesFieldNumber = 6,
    kVersionInfoFieldNumber = 8,
    kCommentsFieldNumber = 7,
    kHostSystemInfoFieldNumber = 3,
    kTargetSystemInfoFieldNumber = 4,
    kDevicePropertiesFieldNumber = 5,
    kExecutableSettingsFieldNumber = 9,
    kProfilerSettingsFieldNumber = 10,
    kCreationTimeFieldNumber = 2,
    kProcessIDFieldNumber = 1,
  };
  // repeated .DeviceAttributes DeviceAttributes = 6;
  int deviceattributes_size() const;
  private:
  int _internal_deviceattributes_size() const;
  public:
  void clear_deviceattributes();
  ::DeviceAttributes* mutable_deviceattributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttributes >*
      mutable_deviceattributes();
  private:
  const ::DeviceAttributes& _internal_deviceattributes(int index) const;
  ::DeviceAttributes* _internal_add_deviceattributes();
  public:
  const ::DeviceAttributes& deviceattributes(int index) const;
  ::DeviceAttributes* add_deviceattributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttributes >&
      deviceattributes() const;

  // repeated .VersionInfo VersionInfo = 8;
  int versioninfo_size() const;
  private:
  int _internal_versioninfo_size() const;
  public:
  void clear_versioninfo();
  ::VersionInfo* mutable_versioninfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersionInfo >*
      mutable_versioninfo();
  private:
  const ::VersionInfo& _internal_versioninfo(int index) const;
  ::VersionInfo* _internal_add_versioninfo();
  public:
  const ::VersionInfo& versioninfo(int index) const;
  ::VersionInfo* add_versioninfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersionInfo >&
      versioninfo() const;

  // optional string Comments = 7;
  bool has_comments() const;
  private:
  bool _internal_has_comments() const;
  public:
  void clear_comments();
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);
  private:
  const std::string& _internal_comments() const;
  void _internal_set_comments(const std::string& value);
  std::string* _internal_mutable_comments();
  public:

  // optional .SystemInfo HostSystemInfo = 3;
  bool has_hostsysteminfo() const;
  private:
  bool _internal_has_hostsysteminfo() const;
  public:
  void clear_hostsysteminfo();
  const ::SystemInfo& hostsysteminfo() const;
  ::SystemInfo* release_hostsysteminfo();
  ::SystemInfo* mutable_hostsysteminfo();
  void set_allocated_hostsysteminfo(::SystemInfo* hostsysteminfo);
  private:
  const ::SystemInfo& _internal_hostsysteminfo() const;
  ::SystemInfo* _internal_mutable_hostsysteminfo();
  public:
  void unsafe_arena_set_allocated_hostsysteminfo(
      ::SystemInfo* hostsysteminfo);
  ::SystemInfo* unsafe_arena_release_hostsysteminfo();

  // optional .SystemInfo TargetSystemInfo = 4;
  bool has_targetsysteminfo() const;
  private:
  bool _internal_has_targetsysteminfo() const;
  public:
  void clear_targetsysteminfo();
  const ::SystemInfo& targetsysteminfo() const;
  ::SystemInfo* release_targetsysteminfo();
  ::SystemInfo* mutable_targetsysteminfo();
  void set_allocated_targetsysteminfo(::SystemInfo* targetsysteminfo);
  private:
  const ::SystemInfo& _internal_targetsysteminfo() const;
  ::SystemInfo* _internal_mutable_targetsysteminfo();
  public:
  void unsafe_arena_set_allocated_targetsysteminfo(
      ::SystemInfo* targetsysteminfo);
  ::SystemInfo* unsafe_arena_release_targetsysteminfo();

  // optional .DeviceProperties DeviceProperties = 5;
  bool has_deviceproperties() const;
  private:
  bool _internal_has_deviceproperties() const;
  public:
  void clear_deviceproperties();
  const ::DeviceProperties& deviceproperties() const;
  ::DeviceProperties* release_deviceproperties();
  ::DeviceProperties* mutable_deviceproperties();
  void set_allocated_deviceproperties(::DeviceProperties* deviceproperties);
  private:
  const ::DeviceProperties& _internal_deviceproperties() const;
  ::DeviceProperties* _internal_mutable_deviceproperties();
  public:
  void unsafe_arena_set_allocated_deviceproperties(
      ::DeviceProperties* deviceproperties);
  ::DeviceProperties* unsafe_arena_release_deviceproperties();

  // optional .ExecutableSettings ExecutableSettings = 9;
  bool has_executablesettings() const;
  private:
  bool _internal_has_executablesettings() const;
  public:
  void clear_executablesettings();
  const ::ExecutableSettings& executablesettings() const;
  ::ExecutableSettings* release_executablesettings();
  ::ExecutableSettings* mutable_executablesettings();
  void set_allocated_executablesettings(::ExecutableSettings* executablesettings);
  private:
  const ::ExecutableSettings& _internal_executablesettings() const;
  ::ExecutableSettings* _internal_mutable_executablesettings();
  public:
  void unsafe_arena_set_allocated_executablesettings(
      ::ExecutableSettings* executablesettings);
  ::ExecutableSettings* unsafe_arena_release_executablesettings();

  // optional .ProfilerSettings ProfilerSettings = 10;
  bool has_profilersettings() const;
  private:
  bool _internal_has_profilersettings() const;
  public:
  void clear_profilersettings();
  const ::ProfilerSettings& profilersettings() const;
  ::ProfilerSettings* release_profilersettings();
  ::ProfilerSettings* mutable_profilersettings();
  void set_allocated_profilersettings(::ProfilerSettings* profilersettings);
  private:
  const ::ProfilerSettings& _internal_profilersettings() const;
  ::ProfilerSettings* _internal_mutable_profilersettings();
  public:
  void unsafe_arena_set_allocated_profilersettings(
      ::ProfilerSettings* profilersettings);
  ::ProfilerSettings* unsafe_arena_release_profilersettings();

  // optional uint64 CreationTime = 2;
  bool has_creationtime() const;
  private:
  bool _internal_has_creationtime() const;
  public:
  void clear_creationtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 creationtime() const;
  void set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creationtime() const;
  void _internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ProcessID = 1;
  bool has_processid() const;
  private:
  bool _internal_has_processid() const;
  public:
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::uint32 processid() const;
  void set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processid() const;
  void _internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReportSessionDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttributes > deviceattributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersionInfo > versioninfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  ::SystemInfo* hostsysteminfo_;
  ::SystemInfo* targetsysteminfo_;
  ::DeviceProperties* deviceproperties_;
  ::ExecutableSettings* executablesettings_;
  ::ProfilerSettings* profilersettings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creationtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfileMetricValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileMetricValue) */ {
 public:
  inline ProfileMetricValue() : ProfileMetricValue(nullptr) {}
  virtual ~ProfileMetricValue();

  ProfileMetricValue(const ProfileMetricValue& from);
  ProfileMetricValue(ProfileMetricValue&& from) noexcept
    : ProfileMetricValue() {
    *this = ::std::move(from);
  }

  inline ProfileMetricValue& operator=(const ProfileMetricValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileMetricValue& operator=(ProfileMetricValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileMetricValue& default_instance();

  static inline const ProfileMetricValue* internal_default_instance() {
    return reinterpret_cast<const ProfileMetricValue*>(
               &_ProfileMetricValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProfileMetricValue& a, ProfileMetricValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileMetricValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileMetricValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileMetricValue* New() const final {
    return CreateMaybeMessage<ProfileMetricValue>(nullptr);
  }

  ProfileMetricValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileMetricValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileMetricValue& from);
  void MergeFrom(const ProfileMetricValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileMetricValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileMetricValue";
  }
  protected:
  explicit ProfileMetricValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kDoubleValueFieldNumber = 3,
    kFloatValueFieldNumber = 2,
    kUint32ValueFieldNumber = 4,
    kUint64ValueFieldNumber = 5,
  };
  // optional string StringValue = 1;
  bool has_stringvalue() const;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  void set_stringvalue(const std::string& value);
  void set_stringvalue(std::string&& value);
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  std::string* mutable_stringvalue();
  std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // optional double DoubleValue = 3;
  bool has_doublevalue() const;
  private:
  bool _internal_has_doublevalue() const;
  public:
  void clear_doublevalue();
  double doublevalue() const;
  void set_doublevalue(double value);
  private:
  double _internal_doublevalue() const;
  void _internal_set_doublevalue(double value);
  public:

  // optional float FloatValue = 2;
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // optional uint32 Uint32Value = 4;
  bool has_uint32value() const;
  private:
  bool _internal_has_uint32value() const;
  public:
  void clear_uint32value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32value() const;
  void set_uint32value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32value() const;
  void _internal_set_uint32value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 Uint64Value = 5;
  bool has_uint64value() const;
  private:
  bool _internal_has_uint64value() const;
  public:
  void clear_uint64value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64value() const;
  void set_uint64value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64value() const;
  void _internal_set_uint64value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileMetricValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
  double doublevalue_;
  float floatvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64value_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfileMetricListElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileMetricListElement) */ {
 public:
  inline ProfileMetricListElement() : ProfileMetricListElement(nullptr) {}
  virtual ~ProfileMetricListElement();

  ProfileMetricListElement(const ProfileMetricListElement& from);
  ProfileMetricListElement(ProfileMetricListElement&& from) noexcept
    : ProfileMetricListElement() {
    *this = ::std::move(from);
  }

  inline ProfileMetricListElement& operator=(const ProfileMetricListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileMetricListElement& operator=(ProfileMetricListElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileMetricListElement& default_instance();

  static inline const ProfileMetricListElement* internal_default_instance() {
    return reinterpret_cast<const ProfileMetricListElement*>(
               &_ProfileMetricListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProfileMetricListElement& a, ProfileMetricListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileMetricListElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileMetricListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileMetricListElement* New() const final {
    return CreateMaybeMessage<ProfileMetricListElement>(nullptr);
  }

  ProfileMetricListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileMetricListElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileMetricListElement& from);
  void MergeFrom(const ProfileMetricListElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileMetricListElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileMetricListElement";
  }
  protected:
  explicit ProfileMetricListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrelationIdFieldNumber = 1,
    kElementValueFieldNumber = 2,
  };
  // optional .ProfileMetricValue CorrelationId = 1;
  bool has_correlationid() const;
  private:
  bool _internal_has_correlationid() const;
  public:
  void clear_correlationid();
  const ::ProfileMetricValue& correlationid() const;
  ::ProfileMetricValue* release_correlationid();
  ::ProfileMetricValue* mutable_correlationid();
  void set_allocated_correlationid(::ProfileMetricValue* correlationid);
  private:
  const ::ProfileMetricValue& _internal_correlationid() const;
  ::ProfileMetricValue* _internal_mutable_correlationid();
  public:
  void unsafe_arena_set_allocated_correlationid(
      ::ProfileMetricValue* correlationid);
  ::ProfileMetricValue* unsafe_arena_release_correlationid();

  // required .ProfileMetricValue ElementValue = 2;
  bool has_elementvalue() const;
  private:
  bool _internal_has_elementvalue() const;
  public:
  void clear_elementvalue();
  const ::ProfileMetricValue& elementvalue() const;
  ::ProfileMetricValue* release_elementvalue();
  ::ProfileMetricValue* mutable_elementvalue();
  void set_allocated_elementvalue(::ProfileMetricValue* elementvalue);
  private:
  const ::ProfileMetricValue& _internal_elementvalue() const;
  ::ProfileMetricValue* _internal_mutable_elementvalue();
  public:
  void unsafe_arena_set_allocated_elementvalue(
      ::ProfileMetricValue* elementvalue);
  ::ProfileMetricValue* unsafe_arena_release_elementvalue();

  // @@protoc_insertion_point(class_scope:ProfileMetricListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileMetricValue* correlationid_;
  ::ProfileMetricValue* elementvalue_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfileMetricResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileMetricResult) */ {
 public:
  inline ProfileMetricResult() : ProfileMetricResult(nullptr) {}
  virtual ~ProfileMetricResult();

  ProfileMetricResult(const ProfileMetricResult& from);
  ProfileMetricResult(ProfileMetricResult&& from) noexcept
    : ProfileMetricResult() {
    *this = ::std::move(from);
  }

  inline ProfileMetricResult& operator=(const ProfileMetricResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileMetricResult& operator=(ProfileMetricResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileMetricResult& default_instance();

  static inline const ProfileMetricResult* internal_default_instance() {
    return reinterpret_cast<const ProfileMetricResult*>(
               &_ProfileMetricResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProfileMetricResult& a, ProfileMetricResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileMetricResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileMetricResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileMetricResult* New() const final {
    return CreateMaybeMessage<ProfileMetricResult>(nullptr);
  }

  ProfileMetricResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileMetricResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileMetricResult& from);
  void MergeFrom(const ProfileMetricResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileMetricResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileMetricResult";
  }
  protected:
  explicit ProfileMetricResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricValueListFieldNumber = 3,
    kMetricValueFieldNumber = 2,
    kNameIdFieldNumber = 1,
  };
  // repeated .ProfileMetricListElement MetricValueList = 3;
  int metricvaluelist_size() const;
  private:
  int _internal_metricvaluelist_size() const;
  public:
  void clear_metricvaluelist();
  ::ProfileMetricListElement* mutable_metricvaluelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricListElement >*
      mutable_metricvaluelist();
  private:
  const ::ProfileMetricListElement& _internal_metricvaluelist(int index) const;
  ::ProfileMetricListElement* _internal_add_metricvaluelist();
  public:
  const ::ProfileMetricListElement& metricvaluelist(int index) const;
  ::ProfileMetricListElement* add_metricvaluelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricListElement >&
      metricvaluelist() const;

  // optional .ProfileMetricValue MetricValue = 2;
  bool has_metricvalue() const;
  private:
  bool _internal_has_metricvalue() const;
  public:
  void clear_metricvalue();
  const ::ProfileMetricValue& metricvalue() const;
  ::ProfileMetricValue* release_metricvalue();
  ::ProfileMetricValue* mutable_metricvalue();
  void set_allocated_metricvalue(::ProfileMetricValue* metricvalue);
  private:
  const ::ProfileMetricValue& _internal_metricvalue() const;
  ::ProfileMetricValue* _internal_mutable_metricvalue();
  public:
  void unsafe_arena_set_allocated_metricvalue(
      ::ProfileMetricValue* metricvalue);
  ::ProfileMetricValue* unsafe_arena_release_metricvalue();

  // required uint32 NameId = 1;
  bool has_nameid() const;
  private:
  bool _internal_has_nameid() const;
  public:
  void clear_nameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nameid() const;
  void set_nameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nameid() const;
  void _internal_set_nameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileMetricResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricListElement > metricvaluelist_;
  ::ProfileMetricValue* metricvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nameid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class CommentID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommentID) */ {
 public:
  inline CommentID() : CommentID(nullptr) {}
  virtual ~CommentID();

  CommentID(const CommentID& from);
  CommentID(CommentID&& from) noexcept
    : CommentID() {
    *this = ::std::move(from);
  }

  inline CommentID& operator=(const CommentID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentID& operator=(CommentID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommentID& default_instance();

  static inline const CommentID* internal_default_instance() {
    return reinterpret_cast<const CommentID*>(
               &_CommentID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommentID& a, CommentID& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentID* New() const final {
    return CreateMaybeMessage<CommentID>(nullptr);
  }

  CommentID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentID& from);
  void MergeFrom(const CommentID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommentID";
  }
  protected:
  explicit CommentID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionIDFieldNumber = 1,
  };
  // required string SectionID = 1;
  bool has_sectionid() const;
  private:
  bool _internal_has_sectionid() const;
  public:
  void clear_sectionid();
  const std::string& sectionid() const;
  void set_sectionid(const std::string& value);
  void set_sectionid(std::string&& value);
  void set_sectionid(const char* value);
  void set_sectionid(const char* value, size_t size);
  std::string* mutable_sectionid();
  std::string* release_sectionid();
  void set_allocated_sectionid(std::string* sectionid);
  private:
  const std::string& _internal_sectionid() const;
  void _internal_set_sectionid(const std::string& value);
  std::string* _internal_mutable_sectionid();
  public:

  // @@protoc_insertion_point(class_scope:CommentID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sectionid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class Comment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Comment) */ {
 public:
  inline Comment() : Comment(nullptr) {}
  virtual ~Comment();

  Comment(const Comment& from);
  Comment(Comment&& from) noexcept
    : Comment() {
    *this = ::std::move(from);
  }

  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Comment& operator=(Comment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Comment& default_instance();

  static inline const Comment* internal_default_instance() {
    return reinterpret_cast<const Comment*>(
               &_Comment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Comment& a, Comment& b) {
    a.Swap(&b);
  }
  inline void Swap(Comment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Comment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Comment* New() const final {
    return CreateMaybeMessage<Comment>(nullptr);
  }

  Comment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Comment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Comment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Comment";
  }
  protected:
  explicit Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 2,
    kTextFieldNumber = 3,
    kIDFieldNumber = 1,
  };
  // required string DisplayName = 2;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // required string Text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // required .CommentID ID = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::CommentID& id() const;
  ::CommentID* release_id();
  ::CommentID* mutable_id();
  void set_allocated_id(::CommentID* id);
  private:
  const ::CommentID& _internal_id() const;
  ::CommentID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::CommentID* id);
  ::CommentID* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:Comment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::CommentID* id_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfileSeriesInfoMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileSeriesInfoMessage) */ {
 public:
  inline ProfileSeriesInfoMessage() : ProfileSeriesInfoMessage(nullptr) {}
  virtual ~ProfileSeriesInfoMessage();

  ProfileSeriesInfoMessage(const ProfileSeriesInfoMessage& from);
  ProfileSeriesInfoMessage(ProfileSeriesInfoMessage&& from) noexcept
    : ProfileSeriesInfoMessage() {
    *this = ::std::move(from);
  }

  inline ProfileSeriesInfoMessage& operator=(const ProfileSeriesInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileSeriesInfoMessage& operator=(ProfileSeriesInfoMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileSeriesInfoMessage& default_instance();

  static inline const ProfileSeriesInfoMessage* internal_default_instance() {
    return reinterpret_cast<const ProfileSeriesInfoMessage*>(
               &_ProfileSeriesInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProfileSeriesInfoMessage& a, ProfileSeriesInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileSeriesInfoMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileSeriesInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileSeriesInfoMessage* New() const final {
    return CreateMaybeMessage<ProfileSeriesInfoMessage>(nullptr);
  }

  ProfileSeriesInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileSeriesInfoMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileSeriesInfoMessage& from);
  void MergeFrom(const ProfileSeriesInfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileSeriesInfoMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileSeriesInfoMessage";
  }
  protected:
  explicit ProfileSeriesInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCombinationStrFieldNumber = 2,
    kSeriesIDFieldNumber = 1,
  };
  // optional string CombinationStr = 2;
  bool has_combinationstr() const;
  private:
  bool _internal_has_combinationstr() const;
  public:
  void clear_combinationstr();
  const std::string& combinationstr() const;
  void set_combinationstr(const std::string& value);
  void set_combinationstr(std::string&& value);
  void set_combinationstr(const char* value);
  void set_combinationstr(const char* value, size_t size);
  std::string* mutable_combinationstr();
  std::string* release_combinationstr();
  void set_allocated_combinationstr(std::string* combinationstr);
  private:
  const std::string& _internal_combinationstr() const;
  void _internal_set_combinationstr(const std::string& value);
  std::string* _internal_mutable_combinationstr();
  public:

  // required uint32 SeriesID = 1;
  bool has_seriesid() const;
  private:
  bool _internal_has_seriesid() const;
  public:
  void clear_seriesid();
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesid() const;
  void set_seriesid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seriesid() const;
  void _internal_set_seriesid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileSeriesInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combinationstr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProfileResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileResult) */ {
 public:
  inline ProfileResult() : ProfileResult(nullptr) {}
  virtual ~ProfileResult();

  ProfileResult(const ProfileResult& from);
  ProfileResult(ProfileResult&& from) noexcept
    : ProfileResult() {
    *this = ::std::move(from);
  }

  inline ProfileResult& operator=(const ProfileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileResult& operator=(ProfileResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileResult& default_instance();

  static inline const ProfileResult* internal_default_instance() {
    return reinterpret_cast<const ProfileResult*>(
               &_ProfileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProfileResult& a, ProfileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileResult* New() const final {
    return CreateMaybeMessage<ProfileResult>(nullptr);
  }

  ProfileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileResult& from);
  void MergeFrom(const ProfileResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileResult";
  }
  protected:
  explicit ProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricResultsFieldNumber = 13,
    kSectionsFieldNumber = 17,
    kSectionCommentsFieldNumber = 18,
    kRuleResultsFieldNumber = 19,
    kKernelMangledNameFieldNumber = 5,
    kKernelFunctionNameFieldNumber = 6,
    kKernelDemangledNameFieldNumber = 7,
    kCommentsFieldNumber = 12,
    kGlobalWorkOffsetFieldNumber = 9,
    kGlobalWorkSizeFieldNumber = 10,
    kLocalWorkSizeFieldNumber = 11,
    kSourceFieldNumber = 15,
    kNvtxFieldNumber = 21,
    kSeriesInfoFieldNumber = 24,
    kAPICallIDFieldNumber = 2,
    kProgramHandleFieldNumber = 3,
    kKernelIDFieldNumber = 4,
    kThreadIDFieldNumber = 1,
    kWorkDimensionsFieldNumber = 8,
    kCreationTimeFieldNumber = 14,
    kApiFieldNumber = 16,
    kUnsupportedDeviceFieldNumber = 20,
    kContextIDFieldNumber = 22,
    kStreamIDFieldNumber = 23,
  };
  // repeated .ProfileMetricResult MetricResults = 13;
  int metricresults_size() const;
  private:
  int _internal_metricresults_size() const;
  public:
  void clear_metricresults();
  ::ProfileMetricResult* mutable_metricresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricResult >*
      mutable_metricresults();
  private:
  const ::ProfileMetricResult& _internal_metricresults(int index) const;
  ::ProfileMetricResult* _internal_add_metricresults();
  public:
  const ::ProfileMetricResult& metricresults(int index) const;
  ::ProfileMetricResult* add_metricresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricResult >&
      metricresults() const;

  // repeated .ProfilerSection Sections = 17;
  int sections_size() const;
  private:
  int _internal_sections_size() const;
  public:
  void clear_sections();
  ::ProfilerSection* mutable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >*
      mutable_sections();
  private:
  const ::ProfilerSection& _internal_sections(int index) const;
  ::ProfilerSection* _internal_add_sections();
  public:
  const ::ProfilerSection& sections(int index) const;
  ::ProfilerSection* add_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >&
      sections() const;

  // repeated .Comment SectionComments = 18;
  int sectioncomments_size() const;
  private:
  int _internal_sectioncomments_size() const;
  public:
  void clear_sectioncomments();
  ::Comment* mutable_sectioncomments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Comment >*
      mutable_sectioncomments();
  private:
  const ::Comment& _internal_sectioncomments(int index) const;
  ::Comment* _internal_add_sectioncomments();
  public:
  const ::Comment& sectioncomments(int index) const;
  ::Comment* add_sectioncomments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Comment >&
      sectioncomments() const;

  // repeated .RuleResult RuleResults = 19;
  int ruleresults_size() const;
  private:
  int _internal_ruleresults_size() const;
  public:
  void clear_ruleresults();
  ::RuleResult* mutable_ruleresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >*
      mutable_ruleresults();
  private:
  const ::RuleResult& _internal_ruleresults(int index) const;
  ::RuleResult* _internal_add_ruleresults();
  public:
  const ::RuleResult& ruleresults(int index) const;
  ::RuleResult* add_ruleresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >&
      ruleresults() const;

  // required string KernelMangledName = 5;
  bool has_kernelmangledname() const;
  private:
  bool _internal_has_kernelmangledname() const;
  public:
  void clear_kernelmangledname();
  const std::string& kernelmangledname() const;
  void set_kernelmangledname(const std::string& value);
  void set_kernelmangledname(std::string&& value);
  void set_kernelmangledname(const char* value);
  void set_kernelmangledname(const char* value, size_t size);
  std::string* mutable_kernelmangledname();
  std::string* release_kernelmangledname();
  void set_allocated_kernelmangledname(std::string* kernelmangledname);
  private:
  const std::string& _internal_kernelmangledname() const;
  void _internal_set_kernelmangledname(const std::string& value);
  std::string* _internal_mutable_kernelmangledname();
  public:

  // required string KernelFunctionName = 6;
  bool has_kernelfunctionname() const;
  private:
  bool _internal_has_kernelfunctionname() const;
  public:
  void clear_kernelfunctionname();
  const std::string& kernelfunctionname() const;
  void set_kernelfunctionname(const std::string& value);
  void set_kernelfunctionname(std::string&& value);
  void set_kernelfunctionname(const char* value);
  void set_kernelfunctionname(const char* value, size_t size);
  std::string* mutable_kernelfunctionname();
  std::string* release_kernelfunctionname();
  void set_allocated_kernelfunctionname(std::string* kernelfunctionname);
  private:
  const std::string& _internal_kernelfunctionname() const;
  void _internal_set_kernelfunctionname(const std::string& value);
  std::string* _internal_mutable_kernelfunctionname();
  public:

  // required string KernelDemangledName = 7;
  bool has_kerneldemangledname() const;
  private:
  bool _internal_has_kerneldemangledname() const;
  public:
  void clear_kerneldemangledname();
  const std::string& kerneldemangledname() const;
  void set_kerneldemangledname(const std::string& value);
  void set_kerneldemangledname(std::string&& value);
  void set_kerneldemangledname(const char* value);
  void set_kerneldemangledname(const char* value, size_t size);
  std::string* mutable_kerneldemangledname();
  std::string* release_kerneldemangledname();
  void set_allocated_kerneldemangledname(std::string* kerneldemangledname);
  private:
  const std::string& _internal_kerneldemangledname() const;
  void _internal_set_kerneldemangledname(const std::string& value);
  std::string* _internal_mutable_kerneldemangledname();
  public:

  // optional string Comments = 12;
  bool has_comments() const;
  private:
  bool _internal_has_comments() const;
  public:
  void clear_comments();
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);
  private:
  const std::string& _internal_comments() const;
  void _internal_set_comments(const std::string& value);
  std::string* _internal_mutable_comments();
  public:

  // required .Uint64x3 GlobalWorkOffset = 9;
  bool has_globalworkoffset() const;
  private:
  bool _internal_has_globalworkoffset() const;
  public:
  void clear_globalworkoffset();
  const ::Uint64x3& globalworkoffset() const;
  ::Uint64x3* release_globalworkoffset();
  ::Uint64x3* mutable_globalworkoffset();
  void set_allocated_globalworkoffset(::Uint64x3* globalworkoffset);
  private:
  const ::Uint64x3& _internal_globalworkoffset() const;
  ::Uint64x3* _internal_mutable_globalworkoffset();
  public:
  void unsafe_arena_set_allocated_globalworkoffset(
      ::Uint64x3* globalworkoffset);
  ::Uint64x3* unsafe_arena_release_globalworkoffset();

  // required .Uint64x3 GlobalWorkSize = 10;
  bool has_globalworksize() const;
  private:
  bool _internal_has_globalworksize() const;
  public:
  void clear_globalworksize();
  const ::Uint64x3& globalworksize() const;
  ::Uint64x3* release_globalworksize();
  ::Uint64x3* mutable_globalworksize();
  void set_allocated_globalworksize(::Uint64x3* globalworksize);
  private:
  const ::Uint64x3& _internal_globalworksize() const;
  ::Uint64x3* _internal_mutable_globalworksize();
  public:
  void unsafe_arena_set_allocated_globalworksize(
      ::Uint64x3* globalworksize);
  ::Uint64x3* unsafe_arena_release_globalworksize();

  // required .Uint64x3 LocalWorkSize = 11;
  bool has_localworksize() const;
  private:
  bool _internal_has_localworksize() const;
  public:
  void clear_localworksize();
  const ::Uint64x3& localworksize() const;
  ::Uint64x3* release_localworksize();
  ::Uint64x3* mutable_localworksize();
  void set_allocated_localworksize(::Uint64x3* localworksize);
  private:
  const ::Uint64x3& _internal_localworksize() const;
  ::Uint64x3* _internal_mutable_localworksize();
  public:
  void unsafe_arena_set_allocated_localworksize(
      ::Uint64x3* localworksize);
  ::Uint64x3* unsafe_arena_release_localworksize();

  // required .SourceData Source = 15;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::SourceData& source() const;
  ::SourceData* release_source();
  ::SourceData* mutable_source();
  void set_allocated_source(::SourceData* source);
  private:
  const ::SourceData& _internal_source() const;
  ::SourceData* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::SourceData* source);
  ::SourceData* unsafe_arena_release_source();

  // optional .NvtxState Nvtx = 21;
  bool has_nvtx() const;
  private:
  bool _internal_has_nvtx() const;
  public:
  void clear_nvtx();
  const ::NvtxState& nvtx() const;
  ::NvtxState* release_nvtx();
  ::NvtxState* mutable_nvtx();
  void set_allocated_nvtx(::NvtxState* nvtx);
  private:
  const ::NvtxState& _internal_nvtx() const;
  ::NvtxState* _internal_mutable_nvtx();
  public:
  void unsafe_arena_set_allocated_nvtx(
      ::NvtxState* nvtx);
  ::NvtxState* unsafe_arena_release_nvtx();

  // optional .ProfileSeriesInfoMessage SeriesInfo = 24;
  bool has_seriesinfo() const;
  private:
  bool _internal_has_seriesinfo() const;
  public:
  void clear_seriesinfo();
  const ::ProfileSeriesInfoMessage& seriesinfo() const;
  ::ProfileSeriesInfoMessage* release_seriesinfo();
  ::ProfileSeriesInfoMessage* mutable_seriesinfo();
  void set_allocated_seriesinfo(::ProfileSeriesInfoMessage* seriesinfo);
  private:
  const ::ProfileSeriesInfoMessage& _internal_seriesinfo() const;
  ::ProfileSeriesInfoMessage* _internal_mutable_seriesinfo();
  public:
  void unsafe_arena_set_allocated_seriesinfo(
      ::ProfileSeriesInfoMessage* seriesinfo);
  ::ProfileSeriesInfoMessage* unsafe_arena_release_seriesinfo();

  // required uint64 APICallID = 2;
  bool has_apicallid() const;
  private:
  bool _internal_has_apicallid() const;
  public:
  void clear_apicallid();
  ::PROTOBUF_NAMESPACE_ID::uint64 apicallid() const;
  void set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_apicallid() const;
  void _internal_set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 ProgramHandle = 3;
  bool has_programhandle() const;
  private:
  bool _internal_has_programhandle() const;
  public:
  void clear_programhandle();
  ::PROTOBUF_NAMESPACE_ID::uint64 programhandle() const;
  void set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_programhandle() const;
  void _internal_set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 KernelID = 4;
  bool has_kernelid() const;
  private:
  bool _internal_has_kernelid() const;
  public:
  void clear_kernelid();
  ::PROTOBUF_NAMESPACE_ID::uint64 kernelid() const;
  void set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_kernelid() const;
  void _internal_set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 ThreadID = 1;
  bool has_threadid() const;
  private:
  bool _internal_has_threadid() const;
  public:
  void clear_threadid();
  ::PROTOBUF_NAMESPACE_ID::uint32 threadid() const;
  void set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_threadid() const;
  void _internal_set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 WorkDimensions = 8;
  bool has_workdimensions() const;
  private:
  bool _internal_has_workdimensions() const;
  public:
  void clear_workdimensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 workdimensions() const;
  void set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_workdimensions() const;
  void _internal_set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 CreationTime = 14;
  bool has_creationtime() const;
  private:
  bool _internal_has_creationtime() const;
  public:
  void clear_creationtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 creationtime() const;
  void set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creationtime() const;
  void _internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .APIType Api = 16;
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  ::APIType api() const;
  void set_api(::APIType value);
  private:
  ::APIType _internal_api() const;
  void _internal_set_api(::APIType value);
  public:

  // optional bool UnsupportedDevice = 20;
  bool has_unsupporteddevice() const;
  private:
  bool _internal_has_unsupporteddevice() const;
  public:
  void clear_unsupporteddevice();
  bool unsupporteddevice() const;
  void set_unsupporteddevice(bool value);
  private:
  bool _internal_unsupporteddevice() const;
  void _internal_set_unsupporteddevice(bool value);
  public:

  // optional uint32 ContextID = 22;
  bool has_contextid() const;
  private:
  bool _internal_has_contextid() const;
  public:
  void clear_contextid();
  ::PROTOBUF_NAMESPACE_ID::uint32 contextid() const;
  void set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contextid() const;
  void _internal_set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 StreamID = 23;
  bool has_streamid() const;
  private:
  bool _internal_has_streamid() const;
  public:
  void clear_streamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 streamid() const;
  void set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_streamid() const;
  void _internal_set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricResult > metricresults_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection > sections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Comment > sectioncomments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult > ruleresults_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelmangledname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelfunctionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kerneldemangledname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  ::Uint64x3* globalworkoffset_;
  ::Uint64x3* globalworksize_;
  ::Uint64x3* localworksize_;
  ::SourceData* source_;
  ::NvtxState* nvtx_;
  ::ProfileSeriesInfoMessage* seriesinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 apicallid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 programhandle_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kernelid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 threadid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 workdimensions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creationtime_;
  int api_;
  bool unsupporteddevice_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contextid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 streamid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class ProcessInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessInfo) */ {
 public:
  inline ProcessInfo() : ProcessInfo(nullptr) {}
  virtual ~ProcessInfo();

  ProcessInfo(const ProcessInfo& from);
  ProcessInfo(ProcessInfo&& from) noexcept
    : ProcessInfo() {
    *this = ::std::move(from);
  }

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInfo& operator=(ProcessInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessInfo& default_instance();

  static inline const ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessInfo*>(
               &_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProcessInfo& a, ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessInfo* New() const final {
    return CreateMaybeMessage<ProcessInfo>(nullptr);
  }

  ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessInfo& from);
  void MergeFrom(const ProcessInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessInfo";
  }
  protected:
  explicit ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 2,
    kProcessNameFieldNumber = 3,
    kProcessIDFieldNumber = 1,
  };
  // optional string Hostname = 2;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional string ProcessName = 3;
  bool has_processname() const;
  private:
  bool _internal_has_processname() const;
  public:
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // required uint32 ProcessID = 1;
  bool has_processid() const;
  private:
  bool _internal_has_processid() const;
  public:
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::uint32 processid() const;
  void set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processid() const;
  void _internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processid_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockHeader) */ {
 public:
  inline BlockHeader() : BlockHeader(nullptr) {}
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockHeader";
  }
  protected:
  explicit BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionDetailsFieldNumber = 3,
    kStringTableFieldNumber = 4,
    kProcessFieldNumber = 6,
    kNumSourcesFieldNumber = 1,
    kNumResultsFieldNumber = 2,
    kPayloadSizeFieldNumber = 5,
  };
  // optional .ReportSessionDetails SessionDetails = 3;
  bool has_sessiondetails() const;
  private:
  bool _internal_has_sessiondetails() const;
  public:
  void clear_sessiondetails();
  const ::ReportSessionDetails& sessiondetails() const;
  ::ReportSessionDetails* release_sessiondetails();
  ::ReportSessionDetails* mutable_sessiondetails();
  void set_allocated_sessiondetails(::ReportSessionDetails* sessiondetails);
  private:
  const ::ReportSessionDetails& _internal_sessiondetails() const;
  ::ReportSessionDetails* _internal_mutable_sessiondetails();
  public:
  void unsafe_arena_set_allocated_sessiondetails(
      ::ReportSessionDetails* sessiondetails);
  ::ReportSessionDetails* unsafe_arena_release_sessiondetails();

  // optional .ProfilerStringTable StringTable = 4;
  bool has_stringtable() const;
  private:
  bool _internal_has_stringtable() const;
  public:
  void clear_stringtable();
  const ::ProfilerStringTable& stringtable() const;
  ::ProfilerStringTable* release_stringtable();
  ::ProfilerStringTable* mutable_stringtable();
  void set_allocated_stringtable(::ProfilerStringTable* stringtable);
  private:
  const ::ProfilerStringTable& _internal_stringtable() const;
  ::ProfilerStringTable* _internal_mutable_stringtable();
  public:
  void unsafe_arena_set_allocated_stringtable(
      ::ProfilerStringTable* stringtable);
  ::ProfilerStringTable* unsafe_arena_release_stringtable();

  // optional .ProcessInfo Process = 6;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::ProcessInfo& process() const;
  ::ProcessInfo* release_process();
  ::ProcessInfo* mutable_process();
  void set_allocated_process(::ProcessInfo* process);
  private:
  const ::ProcessInfo& _internal_process() const;
  ::ProcessInfo* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::ProcessInfo* process);
  ::ProcessInfo* unsafe_arena_release_process();

  // optional uint32 NumSources = 1;
  bool has_numsources() const;
  private:
  bool _internal_has_numsources() const;
  public:
  void clear_numsources();
  ::PROTOBUF_NAMESPACE_ID::uint32 numsources() const;
  void set_numsources(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numsources() const;
  void _internal_set_numsources(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 NumResults = 2;
  bool has_numresults() const;
  private:
  bool _internal_has_numresults() const;
  public:
  void clear_numresults();
  ::PROTOBUF_NAMESPACE_ID::uint32 numresults() const;
  void set_numresults(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numresults() const;
  void _internal_set_numresults(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 PayloadSize = 5;
  bool has_payloadsize() const;
  private:
  bool _internal_has_payloadsize() const;
  public:
  void clear_payloadsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 payloadsize() const;
  void set_payloadsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_payloadsize() const;
  void _internal_set_payloadsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ReportSessionDetails* sessiondetails_;
  ::ProfilerStringTable* stringtable_;
  ::ProcessInfo* process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numsources_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numresults_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payloadsize_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// -------------------------------------------------------------------

class FileHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileHeader) */ {
 public:
  inline FileHeader() : FileHeader(nullptr) {}
  virtual ~FileHeader();

  FileHeader(const FileHeader& from);
  FileHeader(FileHeader&& from) noexcept
    : FileHeader() {
    *this = ::std::move(from);
  }

  inline FileHeader& operator=(const FileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHeader& operator=(FileHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileHeader& default_instance();

  static inline const FileHeader* internal_default_instance() {
    return reinterpret_cast<const FileHeader*>(
               &_FileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FileHeader& a, FileHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileHeader* New() const final {
    return CreateMaybeMessage<FileHeader>(nullptr);
  }

  FileHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileHeader& from);
  void MergeFrom(const FileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileHeader";
  }
  protected:
  explicit FileHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerReport_2eproto);
    return ::descriptor_table_ProfilerReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // required uint32 Version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FileHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_ProfilerReport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceProperty

// required string Key = 1;
inline bool DeviceProperty::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceProperty::has_key() const {
  return _internal_has_key();
}
inline void DeviceProperty::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceProperty::key() const {
  // @@protoc_insertion_point(field_get:DeviceProperty.Key)
  return _internal_key();
}
inline void DeviceProperty::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:DeviceProperty.Key)
}
inline std::string* DeviceProperty::mutable_key() {
  // @@protoc_insertion_point(field_mutable:DeviceProperty.Key)
  return _internal_mutable_key();
}
inline const std::string& DeviceProperty::_internal_key() const {
  return key_.Get();
}
inline void DeviceProperty::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceProperty::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeviceProperty.Key)
}
inline void DeviceProperty::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeviceProperty.Key)
}
inline void DeviceProperty::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeviceProperty.Key)
}
inline std::string* DeviceProperty::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceProperty::release_key() {
  // @@protoc_insertion_point(field_release:DeviceProperty.Key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceProperty::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeviceProperty.Key)
}

// required string Value = 2;
inline bool DeviceProperty::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceProperty::has_value() const {
  return _internal_has_value();
}
inline void DeviceProperty::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceProperty::value() const {
  // @@protoc_insertion_point(field_get:DeviceProperty.Value)
  return _internal_value();
}
inline void DeviceProperty::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DeviceProperty.Value)
}
inline std::string* DeviceProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable:DeviceProperty.Value)
  return _internal_mutable_value();
}
inline const std::string& DeviceProperty::_internal_value() const {
  return value_.Get();
}
inline void DeviceProperty::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceProperty::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeviceProperty.Value)
}
inline void DeviceProperty::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeviceProperty.Value)
}
inline void DeviceProperty::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeviceProperty.Value)
}
inline std::string* DeviceProperty::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceProperty::release_value() {
  // @@protoc_insertion_point(field_release:DeviceProperty.Value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceProperty::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeviceProperty.Value)
}

// -------------------------------------------------------------------

// DeviceProperties

// repeated .DeviceProperty Properties = 1;
inline int DeviceProperties::_internal_properties_size() const {
  return properties_.size();
}
inline int DeviceProperties::properties_size() const {
  return _internal_properties_size();
}
inline void DeviceProperties::clear_properties() {
  properties_.Clear();
}
inline ::DeviceProperty* DeviceProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceProperties.Properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceProperty >*
DeviceProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:DeviceProperties.Properties)
  return &properties_;
}
inline const ::DeviceProperty& DeviceProperties::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::DeviceProperty& DeviceProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:DeviceProperties.Properties)
  return _internal_properties(index);
}
inline ::DeviceProperty* DeviceProperties::_internal_add_properties() {
  return properties_.Add();
}
inline ::DeviceProperty* DeviceProperties::add_properties() {
  // @@protoc_insertion_point(field_add:DeviceProperties.Properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceProperty >&
DeviceProperties::properties() const {
  // @@protoc_insertion_point(field_list:DeviceProperties.Properties)
  return properties_;
}

// -------------------------------------------------------------------

// DeviceAttribute

// required string Name = 1;
inline bool DeviceAttribute::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceAttribute::has_name() const {
  return _internal_has_name();
}
inline void DeviceAttribute::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceAttribute::name() const {
  // @@protoc_insertion_point(field_get:DeviceAttribute.Name)
  return _internal_name();
}
inline void DeviceAttribute::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DeviceAttribute.Name)
}
inline std::string* DeviceAttribute::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DeviceAttribute.Name)
  return _internal_mutable_name();
}
inline const std::string& DeviceAttribute::_internal_name() const {
  return name_.Get();
}
inline void DeviceAttribute::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceAttribute::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeviceAttribute.Name)
}
inline void DeviceAttribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeviceAttribute.Name)
}
inline void DeviceAttribute::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeviceAttribute.Name)
}
inline std::string* DeviceAttribute::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceAttribute::release_name() {
  // @@protoc_insertion_point(field_release:DeviceAttribute.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAttribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeviceAttribute.Name)
}

// required .ProfileMetricValue Value = 2;
inline bool DeviceAttribute::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool DeviceAttribute::has_value() const {
  return _internal_has_value();
}
inline void DeviceAttribute::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfileMetricValue& DeviceAttribute::_internal_value() const {
  const ::ProfileMetricValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileMetricValue&>(
      ::_ProfileMetricValue_default_instance_);
}
inline const ::ProfileMetricValue& DeviceAttribute::value() const {
  // @@protoc_insertion_point(field_get:DeviceAttribute.Value)
  return _internal_value();
}
inline void DeviceAttribute::unsafe_arena_set_allocated_value(
    ::ProfileMetricValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceAttribute.Value)
}
inline ::ProfileMetricValue* DeviceAttribute::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileMetricValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfileMetricValue* DeviceAttribute::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:DeviceAttribute.Value)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileMetricValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::ProfileMetricValue* DeviceAttribute::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileMetricValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::ProfileMetricValue* DeviceAttribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:DeviceAttribute.Value)
  return _internal_mutable_value();
}
inline void DeviceAttribute::set_allocated_value(::ProfileMetricValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:DeviceAttribute.Value)
}

// -------------------------------------------------------------------

// DeviceAttributes

// required uint32 ID = 1;
inline bool DeviceAttributes::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceAttributes::has_id() const {
  return _internal_has_id();
}
inline void DeviceAttributes::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceAttributes::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceAttributes::id() const {
  // @@protoc_insertion_point(field_get:DeviceAttributes.ID)
  return _internal_id();
}
inline void DeviceAttributes::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void DeviceAttributes::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DeviceAttributes.ID)
}

// optional string Name = 2;
inline bool DeviceAttributes::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceAttributes::has_name() const {
  return _internal_has_name();
}
inline void DeviceAttributes::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceAttributes::name() const {
  // @@protoc_insertion_point(field_get:DeviceAttributes.Name)
  return _internal_name();
}
inline void DeviceAttributes::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DeviceAttributes.Name)
}
inline std::string* DeviceAttributes::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DeviceAttributes.Name)
  return _internal_mutable_name();
}
inline const std::string& DeviceAttributes::_internal_name() const {
  return name_.Get();
}
inline void DeviceAttributes::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceAttributes::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeviceAttributes.Name)
}
inline void DeviceAttributes::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeviceAttributes.Name)
}
inline void DeviceAttributes::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeviceAttributes.Name)
}
inline std::string* DeviceAttributes::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceAttributes::release_name() {
  // @@protoc_insertion_point(field_release:DeviceAttributes.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAttributes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeviceAttributes.Name)
}

// repeated .DeviceAttribute Attributes = 3;
inline int DeviceAttributes::_internal_attributes_size() const {
  return attributes_.size();
}
inline int DeviceAttributes::attributes_size() const {
  return _internal_attributes_size();
}
inline void DeviceAttributes::clear_attributes() {
  attributes_.Clear();
}
inline ::DeviceAttribute* DeviceAttributes::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceAttributes.Attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttribute >*
DeviceAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:DeviceAttributes.Attributes)
  return &attributes_;
}
inline const ::DeviceAttribute& DeviceAttributes::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::DeviceAttribute& DeviceAttributes::attributes(int index) const {
  // @@protoc_insertion_point(field_get:DeviceAttributes.Attributes)
  return _internal_attributes(index);
}
inline ::DeviceAttribute* DeviceAttributes::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::DeviceAttribute* DeviceAttributes::add_attributes() {
  // @@protoc_insertion_point(field_add:DeviceAttributes.Attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttribute >&
DeviceAttributes::attributes() const {
  // @@protoc_insertion_point(field_list:DeviceAttributes.Attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// SystemInfo

// optional string OSName = 1;
inline bool SystemInfo::_internal_has_osname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemInfo::has_osname() const {
  return _internal_has_osname();
}
inline void SystemInfo::clear_osname() {
  osname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemInfo::osname() const {
  // @@protoc_insertion_point(field_get:SystemInfo.OSName)
  return _internal_osname();
}
inline void SystemInfo::set_osname(const std::string& value) {
  _internal_set_osname(value);
  // @@protoc_insertion_point(field_set:SystemInfo.OSName)
}
inline std::string* SystemInfo::mutable_osname() {
  // @@protoc_insertion_point(field_mutable:SystemInfo.OSName)
  return _internal_mutable_osname();
}
inline const std::string& SystemInfo::_internal_osname() const {
  return osname_.Get();
}
inline void SystemInfo::_internal_set_osname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  osname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfo::set_osname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  osname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SystemInfo.OSName)
}
inline void SystemInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  osname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SystemInfo.OSName)
}
inline void SystemInfo::set_osname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  osname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SystemInfo.OSName)
}
inline std::string* SystemInfo::_internal_mutable_osname() {
  _has_bits_[0] |= 0x00000001u;
  return osname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfo::release_osname() {
  // @@protoc_insertion_point(field_release:SystemInfo.OSName)
  if (!_internal_has_osname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return osname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfo::set_allocated_osname(std::string* osname) {
  if (osname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  osname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SystemInfo.OSName)
}

// optional string Build = 2;
inline bool SystemInfo::_internal_has_build() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SystemInfo::has_build() const {
  return _internal_has_build();
}
inline void SystemInfo::clear_build() {
  build_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemInfo::build() const {
  // @@protoc_insertion_point(field_get:SystemInfo.Build)
  return _internal_build();
}
inline void SystemInfo::set_build(const std::string& value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:SystemInfo.Build)
}
inline std::string* SystemInfo::mutable_build() {
  // @@protoc_insertion_point(field_mutable:SystemInfo.Build)
  return _internal_mutable_build();
}
inline const std::string& SystemInfo::_internal_build() const {
  return build_.Get();
}
inline void SystemInfo::_internal_set_build(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfo::set_build(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  build_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SystemInfo.Build)
}
inline void SystemInfo::set_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SystemInfo.Build)
}
inline void SystemInfo::set_build(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SystemInfo.Build)
}
inline std::string* SystemInfo::_internal_mutable_build() {
  _has_bits_[0] |= 0x00000002u;
  return build_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfo::release_build() {
  // @@protoc_insertion_point(field_release:SystemInfo.Build)
  if (!_internal_has_build()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return build_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfo::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SystemInfo.Build)
}

// optional string Processor = 3;
inline bool SystemInfo::_internal_has_processor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SystemInfo::has_processor() const {
  return _internal_has_processor();
}
inline void SystemInfo::clear_processor() {
  processor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemInfo::processor() const {
  // @@protoc_insertion_point(field_get:SystemInfo.Processor)
  return _internal_processor();
}
inline void SystemInfo::set_processor(const std::string& value) {
  _internal_set_processor(value);
  // @@protoc_insertion_point(field_set:SystemInfo.Processor)
}
inline std::string* SystemInfo::mutable_processor() {
  // @@protoc_insertion_point(field_mutable:SystemInfo.Processor)
  return _internal_mutable_processor();
}
inline const std::string& SystemInfo::_internal_processor() const {
  return processor_.Get();
}
inline void SystemInfo::_internal_set_processor(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  processor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfo::set_processor(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  processor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SystemInfo.Processor)
}
inline void SystemInfo::set_processor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  processor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SystemInfo.Processor)
}
inline void SystemInfo::set_processor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  processor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SystemInfo.Processor)
}
inline std::string* SystemInfo::_internal_mutable_processor() {
  _has_bits_[0] |= 0x00000004u;
  return processor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfo::release_processor() {
  // @@protoc_insertion_point(field_release:SystemInfo.Processor)
  if (!_internal_has_processor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return processor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfo::set_allocated_processor(std::string* processor) {
  if (processor != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  processor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SystemInfo.Processor)
}

// optional string Architecture = 4;
inline bool SystemInfo::_internal_has_architecture() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SystemInfo::has_architecture() const {
  return _internal_has_architecture();
}
inline void SystemInfo::clear_architecture() {
  architecture_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SystemInfo::architecture() const {
  // @@protoc_insertion_point(field_get:SystemInfo.Architecture)
  return _internal_architecture();
}
inline void SystemInfo::set_architecture(const std::string& value) {
  _internal_set_architecture(value);
  // @@protoc_insertion_point(field_set:SystemInfo.Architecture)
}
inline std::string* SystemInfo::mutable_architecture() {
  // @@protoc_insertion_point(field_mutable:SystemInfo.Architecture)
  return _internal_mutable_architecture();
}
inline const std::string& SystemInfo::_internal_architecture() const {
  return architecture_.Get();
}
inline void SystemInfo::_internal_set_architecture(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfo::set_architecture(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  architecture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SystemInfo.Architecture)
}
inline void SystemInfo::set_architecture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SystemInfo.Architecture)
}
inline void SystemInfo::set_architecture(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SystemInfo.Architecture)
}
inline std::string* SystemInfo::_internal_mutable_architecture() {
  _has_bits_[0] |= 0x00000008u;
  return architecture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfo::release_architecture() {
  // @@protoc_insertion_point(field_release:SystemInfo.Architecture)
  if (!_internal_has_architecture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return architecture_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfo::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  architecture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), architecture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SystemInfo.Architecture)
}

// optional string ComputerName = 5;
inline bool SystemInfo::_internal_has_computername() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SystemInfo::has_computername() const {
  return _internal_has_computername();
}
inline void SystemInfo::clear_computername() {
  computername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SystemInfo::computername() const {
  // @@protoc_insertion_point(field_get:SystemInfo.ComputerName)
  return _internal_computername();
}
inline void SystemInfo::set_computername(const std::string& value) {
  _internal_set_computername(value);
  // @@protoc_insertion_point(field_set:SystemInfo.ComputerName)
}
inline std::string* SystemInfo::mutable_computername() {
  // @@protoc_insertion_point(field_mutable:SystemInfo.ComputerName)
  return _internal_mutable_computername();
}
inline const std::string& SystemInfo::_internal_computername() const {
  return computername_.Get();
}
inline void SystemInfo::_internal_set_computername(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  computername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfo::set_computername(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  computername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SystemInfo.ComputerName)
}
inline void SystemInfo::set_computername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  computername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SystemInfo.ComputerName)
}
inline void SystemInfo::set_computername(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  computername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SystemInfo.ComputerName)
}
inline std::string* SystemInfo::_internal_mutable_computername() {
  _has_bits_[0] |= 0x00000010u;
  return computername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfo::release_computername() {
  // @@protoc_insertion_point(field_release:SystemInfo.ComputerName)
  if (!_internal_has_computername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return computername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfo::set_allocated_computername(std::string* computername) {
  if (computername != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  computername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), computername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SystemInfo.ComputerName)
}

// optional .PlatformType Platform = 6;
inline bool SystemInfo::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SystemInfo::has_platform() const {
  return _internal_has_platform();
}
inline void SystemInfo::clear_platform() {
  platform_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PlatformType SystemInfo::_internal_platform() const {
  return static_cast< ::PlatformType >(platform_);
}
inline ::PlatformType SystemInfo::platform() const {
  // @@protoc_insertion_point(field_get:SystemInfo.Platform)
  return _internal_platform();
}
inline void SystemInfo::_internal_set_platform(::PlatformType value) {
  assert(::PlatformType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  platform_ = value;
}
inline void SystemInfo::set_platform(::PlatformType value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:SystemInfo.Platform)
}

// -------------------------------------------------------------------

// VersionInfo

// required string Provider = 1;
inline bool VersionInfo::_internal_has_provider() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersionInfo::has_provider() const {
  return _internal_has_provider();
}
inline void VersionInfo::clear_provider() {
  provider_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VersionInfo::provider() const {
  // @@protoc_insertion_point(field_get:VersionInfo.Provider)
  return _internal_provider();
}
inline void VersionInfo::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:VersionInfo.Provider)
}
inline std::string* VersionInfo::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:VersionInfo.Provider)
  return _internal_mutable_provider();
}
inline const std::string& VersionInfo::_internal_provider() const {
  return provider_.Get();
}
inline void VersionInfo::_internal_set_provider(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VersionInfo::set_provider(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  provider_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VersionInfo.Provider)
}
inline void VersionInfo::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:VersionInfo.Provider)
}
inline void VersionInfo::set_provider(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.Provider)
}
inline std::string* VersionInfo::_internal_mutable_provider() {
  _has_bits_[0] |= 0x00000001u;
  return provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VersionInfo::release_provider() {
  // @@protoc_insertion_point(field_release:VersionInfo.Provider)
  if (!_internal_has_provider()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return provider_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionInfo::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.Provider)
}

// required string Version = 2;
inline bool VersionInfo::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VersionInfo::has_version() const {
  return _internal_has_version();
}
inline void VersionInfo::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VersionInfo::version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.Version)
  return _internal_version();
}
inline void VersionInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:VersionInfo.Version)
}
inline std::string* VersionInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:VersionInfo.Version)
  return _internal_mutable_version();
}
inline const std::string& VersionInfo::_internal_version() const {
  return version_.Get();
}
inline void VersionInfo::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VersionInfo::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VersionInfo.Version)
}
inline void VersionInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:VersionInfo.Version)
}
inline void VersionInfo::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.Version)
}
inline std::string* VersionInfo::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VersionInfo::release_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.Version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.Version)
}

// -------------------------------------------------------------------

// FilterOptions

// optional string KernelRegex = 1;
inline bool FilterOptions::_internal_has_kernelregex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterOptions::has_kernelregex() const {
  return _internal_has_kernelregex();
}
inline void FilterOptions::clear_kernelregex() {
  kernelregex_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilterOptions::kernelregex() const {
  // @@protoc_insertion_point(field_get:FilterOptions.KernelRegex)
  return _internal_kernelregex();
}
inline void FilterOptions::set_kernelregex(const std::string& value) {
  _internal_set_kernelregex(value);
  // @@protoc_insertion_point(field_set:FilterOptions.KernelRegex)
}
inline std::string* FilterOptions::mutable_kernelregex() {
  // @@protoc_insertion_point(field_mutable:FilterOptions.KernelRegex)
  return _internal_mutable_kernelregex();
}
inline const std::string& FilterOptions::_internal_kernelregex() const {
  return kernelregex_.Get();
}
inline void FilterOptions::_internal_set_kernelregex(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelregex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterOptions::set_kernelregex(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelregex_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilterOptions.KernelRegex)
}
inline void FilterOptions::set_kernelregex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kernelregex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilterOptions.KernelRegex)
}
inline void FilterOptions::set_kernelregex(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kernelregex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilterOptions.KernelRegex)
}
inline std::string* FilterOptions::_internal_mutable_kernelregex() {
  _has_bits_[0] |= 0x00000001u;
  return kernelregex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterOptions::release_kernelregex() {
  // @@protoc_insertion_point(field_release:FilterOptions.KernelRegex)
  if (!_internal_has_kernelregex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kernelregex_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterOptions::set_allocated_kernelregex(std::string* kernelregex) {
  if (kernelregex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kernelregex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelregex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilterOptions.KernelRegex)
}

// optional string KernelRegexBase = 2;
inline bool FilterOptions::_internal_has_kernelregexbase() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilterOptions::has_kernelregexbase() const {
  return _internal_has_kernelregexbase();
}
inline void FilterOptions::clear_kernelregexbase() {
  kernelregexbase_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FilterOptions::kernelregexbase() const {
  // @@protoc_insertion_point(field_get:FilterOptions.KernelRegexBase)
  return _internal_kernelregexbase();
}
inline void FilterOptions::set_kernelregexbase(const std::string& value) {
  _internal_set_kernelregexbase(value);
  // @@protoc_insertion_point(field_set:FilterOptions.KernelRegexBase)
}
inline std::string* FilterOptions::mutable_kernelregexbase() {
  // @@protoc_insertion_point(field_mutable:FilterOptions.KernelRegexBase)
  return _internal_mutable_kernelregexbase();
}
inline const std::string& FilterOptions::_internal_kernelregexbase() const {
  return kernelregexbase_.Get();
}
inline void FilterOptions::_internal_set_kernelregexbase(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelregexbase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterOptions::set_kernelregexbase(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelregexbase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilterOptions.KernelRegexBase)
}
inline void FilterOptions::set_kernelregexbase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  kernelregexbase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilterOptions.KernelRegexBase)
}
inline void FilterOptions::set_kernelregexbase(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  kernelregexbase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilterOptions.KernelRegexBase)
}
inline std::string* FilterOptions::_internal_mutable_kernelregexbase() {
  _has_bits_[0] |= 0x00000002u;
  return kernelregexbase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterOptions::release_kernelregexbase() {
  // @@protoc_insertion_point(field_release:FilterOptions.KernelRegexBase)
  if (!_internal_has_kernelregexbase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return kernelregexbase_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterOptions::set_allocated_kernelregexbase(std::string* kernelregexbase) {
  if (kernelregexbase != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kernelregexbase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelregexbase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilterOptions.KernelRegexBase)
}

// optional string KernelId = 3;
inline bool FilterOptions::_internal_has_kernelid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilterOptions::has_kernelid() const {
  return _internal_has_kernelid();
}
inline void FilterOptions::clear_kernelid() {
  kernelid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FilterOptions::kernelid() const {
  // @@protoc_insertion_point(field_get:FilterOptions.KernelId)
  return _internal_kernelid();
}
inline void FilterOptions::set_kernelid(const std::string& value) {
  _internal_set_kernelid(value);
  // @@protoc_insertion_point(field_set:FilterOptions.KernelId)
}
inline std::string* FilterOptions::mutable_kernelid() {
  // @@protoc_insertion_point(field_mutable:FilterOptions.KernelId)
  return _internal_mutable_kernelid();
}
inline const std::string& FilterOptions::_internal_kernelid() const {
  return kernelid_.Get();
}
inline void FilterOptions::_internal_set_kernelid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kernelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilterOptions::set_kernelid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  kernelid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilterOptions.KernelId)
}
inline void FilterOptions::set_kernelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  kernelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilterOptions.KernelId)
}
inline void FilterOptions::set_kernelid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  kernelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilterOptions.KernelId)
}
inline std::string* FilterOptions::_internal_mutable_kernelid() {
  _has_bits_[0] |= 0x00000004u;
  return kernelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilterOptions::release_kernelid() {
  // @@protoc_insertion_point(field_release:FilterOptions.KernelId)
  if (!_internal_has_kernelid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kernelid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterOptions::set_allocated_kernelid(std::string* kernelid) {
  if (kernelid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kernelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilterOptions.KernelId)
}

// optional uint32 SkipCount = 4;
inline bool FilterOptions::_internal_has_skipcount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FilterOptions::has_skipcount() const {
  return _internal_has_skipcount();
}
inline void FilterOptions::clear_skipcount() {
  skipcount_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::_internal_skipcount() const {
  return skipcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::skipcount() const {
  // @@protoc_insertion_point(field_get:FilterOptions.SkipCount)
  return _internal_skipcount();
}
inline void FilterOptions::_internal_set_skipcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  skipcount_ = value;
}
inline void FilterOptions::set_skipcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skipcount(value);
  // @@protoc_insertion_point(field_set:FilterOptions.SkipCount)
}

// optional uint32 SkipBeforeMatchCount = 5;
inline bool FilterOptions::_internal_has_skipbeforematchcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FilterOptions::has_skipbeforematchcount() const {
  return _internal_has_skipbeforematchcount();
}
inline void FilterOptions::clear_skipbeforematchcount() {
  skipbeforematchcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::_internal_skipbeforematchcount() const {
  return skipbeforematchcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::skipbeforematchcount() const {
  // @@protoc_insertion_point(field_get:FilterOptions.SkipBeforeMatchCount)
  return _internal_skipbeforematchcount();
}
inline void FilterOptions::_internal_set_skipbeforematchcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  skipbeforematchcount_ = value;
}
inline void FilterOptions::set_skipbeforematchcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skipbeforematchcount(value);
  // @@protoc_insertion_point(field_set:FilterOptions.SkipBeforeMatchCount)
}

// optional uint32 CaptureCount = 6;
inline bool FilterOptions::_internal_has_capturecount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FilterOptions::has_capturecount() const {
  return _internal_has_capturecount();
}
inline void FilterOptions::clear_capturecount() {
  capturecount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::_internal_capturecount() const {
  return capturecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterOptions::capturecount() const {
  // @@protoc_insertion_point(field_get:FilterOptions.CaptureCount)
  return _internal_capturecount();
}
inline void FilterOptions::_internal_set_capturecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  capturecount_ = value;
}
inline void FilterOptions::set_capturecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capturecount(value);
  // @@protoc_insertion_point(field_set:FilterOptions.CaptureCount)
}

// -------------------------------------------------------------------

// SamplingOptions

// optional bool IntervalAuto = 1;
inline bool SamplingOptions::_internal_has_intervalauto() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SamplingOptions::has_intervalauto() const {
  return _internal_has_intervalauto();
}
inline void SamplingOptions::clear_intervalauto() {
  intervalauto_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SamplingOptions::_internal_intervalauto() const {
  return intervalauto_;
}
inline bool SamplingOptions::intervalauto() const {
  // @@protoc_insertion_point(field_get:SamplingOptions.IntervalAuto)
  return _internal_intervalauto();
}
inline void SamplingOptions::_internal_set_intervalauto(bool value) {
  _has_bits_[0] |= 0x00000008u;
  intervalauto_ = value;
}
inline void SamplingOptions::set_intervalauto(bool value) {
  _internal_set_intervalauto(value);
  // @@protoc_insertion_point(field_set:SamplingOptions.IntervalAuto)
}

// optional uint64 Interval = 2;
inline bool SamplingOptions::_internal_has_interval() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SamplingOptions::has_interval() const {
  return _internal_has_interval();
}
inline void SamplingOptions::clear_interval() {
  interval_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::interval() const {
  // @@protoc_insertion_point(field_get:SamplingOptions.Interval)
  return _internal_interval();
}
inline void SamplingOptions::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  interval_ = value;
}
inline void SamplingOptions::set_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:SamplingOptions.Interval)
}

// optional uint64 MaxPasses = 3;
inline bool SamplingOptions::_internal_has_maxpasses() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SamplingOptions::has_maxpasses() const {
  return _internal_has_maxpasses();
}
inline void SamplingOptions::clear_maxpasses() {
  maxpasses_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::_internal_maxpasses() const {
  return maxpasses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::maxpasses() const {
  // @@protoc_insertion_point(field_get:SamplingOptions.MaxPasses)
  return _internal_maxpasses();
}
inline void SamplingOptions::_internal_set_maxpasses(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  maxpasses_ = value;
}
inline void SamplingOptions::set_maxpasses(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxpasses(value);
  // @@protoc_insertion_point(field_set:SamplingOptions.MaxPasses)
}

// optional uint64 BufferSize = 4;
inline bool SamplingOptions::_internal_has_buffersize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SamplingOptions::has_buffersize() const {
  return _internal_has_buffersize();
}
inline void SamplingOptions::clear_buffersize() {
  buffersize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::_internal_buffersize() const {
  return buffersize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SamplingOptions::buffersize() const {
  // @@protoc_insertion_point(field_get:SamplingOptions.BufferSize)
  return _internal_buffersize();
}
inline void SamplingOptions::_internal_set_buffersize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  buffersize_ = value;
}
inline void SamplingOptions::set_buffersize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buffersize(value);
  // @@protoc_insertion_point(field_set:SamplingOptions.BufferSize)
}

// -------------------------------------------------------------------

// OtherOptions

// optional bool ApplyRules = 1;
inline bool OtherOptions::_internal_has_applyrules() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OtherOptions::has_applyrules() const {
  return _internal_has_applyrules();
}
inline void OtherOptions::clear_applyrules() {
  applyrules_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OtherOptions::_internal_applyrules() const {
  return applyrules_;
}
inline bool OtherOptions::applyrules() const {
  // @@protoc_insertion_point(field_get:OtherOptions.ApplyRules)
  return _internal_applyrules();
}
inline void OtherOptions::_internal_set_applyrules(bool value) {
  _has_bits_[0] |= 0x00000002u;
  applyrules_ = value;
}
inline void OtherOptions::set_applyrules(bool value) {
  _internal_set_applyrules(value);
  // @@protoc_insertion_point(field_set:OtherOptions.ApplyRules)
}

// optional string Metrics = 2;
inline bool OtherOptions::_internal_has_metrics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OtherOptions::has_metrics() const {
  return _internal_has_metrics();
}
inline void OtherOptions::clear_metrics() {
  metrics_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OtherOptions::metrics() const {
  // @@protoc_insertion_point(field_get:OtherOptions.Metrics)
  return _internal_metrics();
}
inline void OtherOptions::set_metrics(const std::string& value) {
  _internal_set_metrics(value);
  // @@protoc_insertion_point(field_set:OtherOptions.Metrics)
}
inline std::string* OtherOptions::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:OtherOptions.Metrics)
  return _internal_mutable_metrics();
}
inline const std::string& OtherOptions::_internal_metrics() const {
  return metrics_.Get();
}
inline void OtherOptions::_internal_set_metrics(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OtherOptions::set_metrics(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metrics_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OtherOptions.Metrics)
}
inline void OtherOptions::set_metrics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:OtherOptions.Metrics)
}
inline void OtherOptions::set_metrics(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OtherOptions.Metrics)
}
inline std::string* OtherOptions::_internal_mutable_metrics() {
  _has_bits_[0] |= 0x00000001u;
  return metrics_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OtherOptions::release_metrics() {
  // @@protoc_insertion_point(field_release:OtherOptions.Metrics)
  if (!_internal_has_metrics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metrics_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OtherOptions::set_allocated_metrics(std::string* metrics) {
  if (metrics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metrics_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metrics,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OtherOptions.Metrics)
}

// -------------------------------------------------------------------

// ProfilerSettings

// optional bool EnableNvtx = 1;
inline bool ProfilerSettings::_internal_has_enablenvtx() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfilerSettings::has_enablenvtx() const {
  return _internal_has_enablenvtx();
}
inline void ProfilerSettings::clear_enablenvtx() {
  enablenvtx_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProfilerSettings::_internal_enablenvtx() const {
  return enablenvtx_;
}
inline bool ProfilerSettings::enablenvtx() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.EnableNvtx)
  return _internal_enablenvtx();
}
inline void ProfilerSettings::_internal_set_enablenvtx(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enablenvtx_ = value;
}
inline void ProfilerSettings::set_enablenvtx(bool value) {
  _internal_set_enablenvtx(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.EnableNvtx)
}

// optional bool DisableProfilingStartStop = 2;
inline bool ProfilerSettings::_internal_has_disableprofilingstartstop() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProfilerSettings::has_disableprofilingstartstop() const {
  return _internal_has_disableprofilingstartstop();
}
inline void ProfilerSettings::clear_disableprofilingstartstop() {
  disableprofilingstartstop_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ProfilerSettings::_internal_disableprofilingstartstop() const {
  return disableprofilingstartstop_;
}
inline bool ProfilerSettings::disableprofilingstartstop() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.DisableProfilingStartStop)
  return _internal_disableprofilingstartstop();
}
inline void ProfilerSettings::_internal_set_disableprofilingstartstop(bool value) {
  _has_bits_[0] |= 0x00000080u;
  disableprofilingstartstop_ = value;
}
inline void ProfilerSettings::set_disableprofilingstartstop(bool value) {
  _internal_set_disableprofilingstartstop(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.DisableProfilingStartStop)
}

// optional bool EnableProfilingFromStart = 3;
inline bool ProfilerSettings::_internal_has_enableprofilingfromstart() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProfilerSettings::has_enableprofilingfromstart() const {
  return _internal_has_enableprofilingfromstart();
}
inline void ProfilerSettings::clear_enableprofilingfromstart() {
  enableprofilingfromstart_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProfilerSettings::_internal_enableprofilingfromstart() const {
  return enableprofilingfromstart_;
}
inline bool ProfilerSettings::enableprofilingfromstart() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.EnableProfilingFromStart)
  return _internal_enableprofilingfromstart();
}
inline void ProfilerSettings::_internal_set_enableprofilingfromstart(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enableprofilingfromstart_ = value;
}
inline void ProfilerSettings::set_enableprofilingfromstart(bool value) {
  _internal_set_enableprofilingfromstart(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.EnableProfilingFromStart)
}

// optional string ActivityType = 4;
inline bool ProfilerSettings::_internal_has_activitytype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilerSettings::has_activitytype() const {
  return _internal_has_activitytype();
}
inline void ProfilerSettings::clear_activitytype() {
  activitytype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerSettings::activitytype() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.ActivityType)
  return _internal_activitytype();
}
inline void ProfilerSettings::set_activitytype(const std::string& value) {
  _internal_set_activitytype(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.ActivityType)
}
inline std::string* ProfilerSettings::mutable_activitytype() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.ActivityType)
  return _internal_mutable_activitytype();
}
inline const std::string& ProfilerSettings::_internal_activitytype() const {
  return activitytype_.Get();
}
inline void ProfilerSettings::_internal_set_activitytype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSettings::set_activitytype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activitytype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSettings.ActivityType)
}
inline void ProfilerSettings::set_activitytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSettings.ActivityType)
}
inline void ProfilerSettings::set_activitytype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSettings.ActivityType)
}
inline std::string* ProfilerSettings::_internal_mutable_activitytype() {
  _has_bits_[0] |= 0x00000001u;
  return activitytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSettings::release_activitytype() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.ActivityType)
  if (!_internal_has_activitytype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activitytype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSettings::set_allocated_activitytype(std::string* activitytype) {
  if (activitytype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activitytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activitytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.ActivityType)
}

// optional .FilterOptions FilterOptions = 5;
inline bool ProfilerSettings::_internal_has_filteroptions() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || filteroptions_ != nullptr);
  return value;
}
inline bool ProfilerSettings::has_filteroptions() const {
  return _internal_has_filteroptions();
}
inline void ProfilerSettings::clear_filteroptions() {
  if (filteroptions_ != nullptr) filteroptions_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::FilterOptions& ProfilerSettings::_internal_filteroptions() const {
  const ::FilterOptions* p = filteroptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::FilterOptions&>(
      ::_FilterOptions_default_instance_);
}
inline const ::FilterOptions& ProfilerSettings::filteroptions() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.FilterOptions)
  return _internal_filteroptions();
}
inline void ProfilerSettings::unsafe_arena_set_allocated_filteroptions(
    ::FilterOptions* filteroptions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filteroptions_);
  }
  filteroptions_ = filteroptions;
  if (filteroptions) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSettings.FilterOptions)
}
inline ::FilterOptions* ProfilerSettings::release_filteroptions() {
  _has_bits_[0] &= ~0x00000008u;
  ::FilterOptions* temp = filteroptions_;
  filteroptions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FilterOptions* ProfilerSettings::unsafe_arena_release_filteroptions() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.FilterOptions)
  _has_bits_[0] &= ~0x00000008u;
  ::FilterOptions* temp = filteroptions_;
  filteroptions_ = nullptr;
  return temp;
}
inline ::FilterOptions* ProfilerSettings::_internal_mutable_filteroptions() {
  _has_bits_[0] |= 0x00000008u;
  if (filteroptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::FilterOptions>(GetArena());
    filteroptions_ = p;
  }
  return filteroptions_;
}
inline ::FilterOptions* ProfilerSettings::mutable_filteroptions() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.FilterOptions)
  return _internal_mutable_filteroptions();
}
inline void ProfilerSettings::set_allocated_filteroptions(::FilterOptions* filteroptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filteroptions_;
  }
  if (filteroptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filteroptions);
    if (message_arena != submessage_arena) {
      filteroptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filteroptions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  filteroptions_ = filteroptions;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.FilterOptions)
}

// optional .OtherOptions OtherOptions = 6;
inline bool ProfilerSettings::_internal_has_otheroptions() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || otheroptions_ != nullptr);
  return value;
}
inline bool ProfilerSettings::has_otheroptions() const {
  return _internal_has_otheroptions();
}
inline void ProfilerSettings::clear_otheroptions() {
  if (otheroptions_ != nullptr) otheroptions_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::OtherOptions& ProfilerSettings::_internal_otheroptions() const {
  const ::OtherOptions* p = otheroptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::OtherOptions&>(
      ::_OtherOptions_default_instance_);
}
inline const ::OtherOptions& ProfilerSettings::otheroptions() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.OtherOptions)
  return _internal_otheroptions();
}
inline void ProfilerSettings::unsafe_arena_set_allocated_otheroptions(
    ::OtherOptions* otheroptions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otheroptions_);
  }
  otheroptions_ = otheroptions;
  if (otheroptions) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSettings.OtherOptions)
}
inline ::OtherOptions* ProfilerSettings::release_otheroptions() {
  _has_bits_[0] &= ~0x00000010u;
  ::OtherOptions* temp = otheroptions_;
  otheroptions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OtherOptions* ProfilerSettings::unsafe_arena_release_otheroptions() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.OtherOptions)
  _has_bits_[0] &= ~0x00000010u;
  ::OtherOptions* temp = otheroptions_;
  otheroptions_ = nullptr;
  return temp;
}
inline ::OtherOptions* ProfilerSettings::_internal_mutable_otheroptions() {
  _has_bits_[0] |= 0x00000010u;
  if (otheroptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::OtherOptions>(GetArena());
    otheroptions_ = p;
  }
  return otheroptions_;
}
inline ::OtherOptions* ProfilerSettings::mutable_otheroptions() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.OtherOptions)
  return _internal_mutable_otheroptions();
}
inline void ProfilerSettings::set_allocated_otheroptions(::OtherOptions* otheroptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete otheroptions_;
  }
  if (otheroptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(otheroptions);
    if (message_arena != submessage_arena) {
      otheroptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otheroptions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  otheroptions_ = otheroptions;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.OtherOptions)
}

// optional string EnabledSections = 7;
inline bool ProfilerSettings::_internal_has_enabledsections() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfilerSettings::has_enabledsections() const {
  return _internal_has_enabledsections();
}
inline void ProfilerSettings::clear_enabledsections() {
  enabledsections_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerSettings::enabledsections() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.EnabledSections)
  return _internal_enabledsections();
}
inline void ProfilerSettings::set_enabledsections(const std::string& value) {
  _internal_set_enabledsections(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.EnabledSections)
}
inline std::string* ProfilerSettings::mutable_enabledsections() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.EnabledSections)
  return _internal_mutable_enabledsections();
}
inline const std::string& ProfilerSettings::_internal_enabledsections() const {
  return enabledsections_.Get();
}
inline void ProfilerSettings::_internal_set_enabledsections(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  enabledsections_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSettings::set_enabledsections(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  enabledsections_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSettings.EnabledSections)
}
inline void ProfilerSettings::set_enabledsections(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  enabledsections_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSettings.EnabledSections)
}
inline void ProfilerSettings::set_enabledsections(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  enabledsections_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSettings.EnabledSections)
}
inline std::string* ProfilerSettings::_internal_mutable_enabledsections() {
  _has_bits_[0] |= 0x00000002u;
  return enabledsections_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSettings::release_enabledsections() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.EnabledSections)
  if (!_internal_has_enabledsections()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return enabledsections_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSettings::set_allocated_enabledsections(std::string* enabledsections) {
  if (enabledsections != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enabledsections_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enabledsections,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.EnabledSections)
}

// optional string ClockControlMode = 8;
inline bool ProfilerSettings::_internal_has_clockcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfilerSettings::has_clockcontrolmode() const {
  return _internal_has_clockcontrolmode();
}
inline void ProfilerSettings::clear_clockcontrolmode() {
  clockcontrolmode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProfilerSettings::clockcontrolmode() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.ClockControlMode)
  return _internal_clockcontrolmode();
}
inline void ProfilerSettings::set_clockcontrolmode(const std::string& value) {
  _internal_set_clockcontrolmode(value);
  // @@protoc_insertion_point(field_set:ProfilerSettings.ClockControlMode)
}
inline std::string* ProfilerSettings::mutable_clockcontrolmode() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.ClockControlMode)
  return _internal_mutable_clockcontrolmode();
}
inline const std::string& ProfilerSettings::_internal_clockcontrolmode() const {
  return clockcontrolmode_.Get();
}
inline void ProfilerSettings::_internal_set_clockcontrolmode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  clockcontrolmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfilerSettings::set_clockcontrolmode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  clockcontrolmode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfilerSettings.ClockControlMode)
}
inline void ProfilerSettings::set_clockcontrolmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  clockcontrolmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfilerSettings.ClockControlMode)
}
inline void ProfilerSettings::set_clockcontrolmode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  clockcontrolmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfilerSettings.ClockControlMode)
}
inline std::string* ProfilerSettings::_internal_mutable_clockcontrolmode() {
  _has_bits_[0] |= 0x00000004u;
  return clockcontrolmode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfilerSettings::release_clockcontrolmode() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.ClockControlMode)
  if (!_internal_has_clockcontrolmode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return clockcontrolmode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfilerSettings::set_allocated_clockcontrolmode(std::string* clockcontrolmode) {
  if (clockcontrolmode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  clockcontrolmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clockcontrolmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.ClockControlMode)
}

// optional .SamplingOptions SamplingOptions = 9;
inline bool ProfilerSettings::_internal_has_samplingoptions() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || samplingoptions_ != nullptr);
  return value;
}
inline bool ProfilerSettings::has_samplingoptions() const {
  return _internal_has_samplingoptions();
}
inline void ProfilerSettings::clear_samplingoptions() {
  if (samplingoptions_ != nullptr) samplingoptions_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::SamplingOptions& ProfilerSettings::_internal_samplingoptions() const {
  const ::SamplingOptions* p = samplingoptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::SamplingOptions&>(
      ::_SamplingOptions_default_instance_);
}
inline const ::SamplingOptions& ProfilerSettings::samplingoptions() const {
  // @@protoc_insertion_point(field_get:ProfilerSettings.SamplingOptions)
  return _internal_samplingoptions();
}
inline void ProfilerSettings::unsafe_arena_set_allocated_samplingoptions(
    ::SamplingOptions* samplingoptions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(samplingoptions_);
  }
  samplingoptions_ = samplingoptions;
  if (samplingoptions) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfilerSettings.SamplingOptions)
}
inline ::SamplingOptions* ProfilerSettings::release_samplingoptions() {
  _has_bits_[0] &= ~0x00000020u;
  ::SamplingOptions* temp = samplingoptions_;
  samplingoptions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SamplingOptions* ProfilerSettings::unsafe_arena_release_samplingoptions() {
  // @@protoc_insertion_point(field_release:ProfilerSettings.SamplingOptions)
  _has_bits_[0] &= ~0x00000020u;
  ::SamplingOptions* temp = samplingoptions_;
  samplingoptions_ = nullptr;
  return temp;
}
inline ::SamplingOptions* ProfilerSettings::_internal_mutable_samplingoptions() {
  _has_bits_[0] |= 0x00000020u;
  if (samplingoptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::SamplingOptions>(GetArena());
    samplingoptions_ = p;
  }
  return samplingoptions_;
}
inline ::SamplingOptions* ProfilerSettings::mutable_samplingoptions() {
  // @@protoc_insertion_point(field_mutable:ProfilerSettings.SamplingOptions)
  return _internal_mutable_samplingoptions();
}
inline void ProfilerSettings::set_allocated_samplingoptions(::SamplingOptions* samplingoptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete samplingoptions_;
  }
  if (samplingoptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(samplingoptions);
    if (message_arena != submessage_arena) {
      samplingoptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, samplingoptions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  samplingoptions_ = samplingoptions;
  // @@protoc_insertion_point(field_set_allocated:ProfilerSettings.SamplingOptions)
}

// -------------------------------------------------------------------

// ReportSessionDetails

// optional uint32 ProcessID = 1;
inline bool ReportSessionDetails::_internal_has_processid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReportSessionDetails::has_processid() const {
  return _internal_has_processid();
}
inline void ReportSessionDetails::clear_processid() {
  processid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportSessionDetails::_internal_processid() const {
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportSessionDetails::processid() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.ProcessID)
  return _internal_processid();
}
inline void ReportSessionDetails::_internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  processid_ = value;
}
inline void ReportSessionDetails::set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:ReportSessionDetails.ProcessID)
}

// optional uint64 CreationTime = 2;
inline bool ReportSessionDetails::_internal_has_creationtime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReportSessionDetails::has_creationtime() const {
  return _internal_has_creationtime();
}
inline void ReportSessionDetails::clear_creationtime() {
  creationtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReportSessionDetails::_internal_creationtime() const {
  return creationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReportSessionDetails::creationtime() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.CreationTime)
  return _internal_creationtime();
}
inline void ReportSessionDetails::_internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  creationtime_ = value;
}
inline void ReportSessionDetails::set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creationtime(value);
  // @@protoc_insertion_point(field_set:ReportSessionDetails.CreationTime)
}

// optional .SystemInfo HostSystemInfo = 3;
inline bool ReportSessionDetails::_internal_has_hostsysteminfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hostsysteminfo_ != nullptr);
  return value;
}
inline bool ReportSessionDetails::has_hostsysteminfo() const {
  return _internal_has_hostsysteminfo();
}
inline void ReportSessionDetails::clear_hostsysteminfo() {
  if (hostsysteminfo_ != nullptr) hostsysteminfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SystemInfo& ReportSessionDetails::_internal_hostsysteminfo() const {
  const ::SystemInfo* p = hostsysteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SystemInfo&>(
      ::_SystemInfo_default_instance_);
}
inline const ::SystemInfo& ReportSessionDetails::hostsysteminfo() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.HostSystemInfo)
  return _internal_hostsysteminfo();
}
inline void ReportSessionDetails::unsafe_arena_set_allocated_hostsysteminfo(
    ::SystemInfo* hostsysteminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hostsysteminfo_);
  }
  hostsysteminfo_ = hostsysteminfo;
  if (hostsysteminfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReportSessionDetails.HostSystemInfo)
}
inline ::SystemInfo* ReportSessionDetails::release_hostsysteminfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::SystemInfo* temp = hostsysteminfo_;
  hostsysteminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SystemInfo* ReportSessionDetails::unsafe_arena_release_hostsysteminfo() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.HostSystemInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::SystemInfo* temp = hostsysteminfo_;
  hostsysteminfo_ = nullptr;
  return temp;
}
inline ::SystemInfo* ReportSessionDetails::_internal_mutable_hostsysteminfo() {
  _has_bits_[0] |= 0x00000002u;
  if (hostsysteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SystemInfo>(GetArena());
    hostsysteminfo_ = p;
  }
  return hostsysteminfo_;
}
inline ::SystemInfo* ReportSessionDetails::mutable_hostsysteminfo() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.HostSystemInfo)
  return _internal_mutable_hostsysteminfo();
}
inline void ReportSessionDetails::set_allocated_hostsysteminfo(::SystemInfo* hostsysteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hostsysteminfo_;
  }
  if (hostsysteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostsysteminfo);
    if (message_arena != submessage_arena) {
      hostsysteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostsysteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hostsysteminfo_ = hostsysteminfo;
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.HostSystemInfo)
}

// optional .SystemInfo TargetSystemInfo = 4;
inline bool ReportSessionDetails::_internal_has_targetsysteminfo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || targetsysteminfo_ != nullptr);
  return value;
}
inline bool ReportSessionDetails::has_targetsysteminfo() const {
  return _internal_has_targetsysteminfo();
}
inline void ReportSessionDetails::clear_targetsysteminfo() {
  if (targetsysteminfo_ != nullptr) targetsysteminfo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SystemInfo& ReportSessionDetails::_internal_targetsysteminfo() const {
  const ::SystemInfo* p = targetsysteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SystemInfo&>(
      ::_SystemInfo_default_instance_);
}
inline const ::SystemInfo& ReportSessionDetails::targetsysteminfo() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.TargetSystemInfo)
  return _internal_targetsysteminfo();
}
inline void ReportSessionDetails::unsafe_arena_set_allocated_targetsysteminfo(
    ::SystemInfo* targetsysteminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetsysteminfo_);
  }
  targetsysteminfo_ = targetsysteminfo;
  if (targetsysteminfo) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReportSessionDetails.TargetSystemInfo)
}
inline ::SystemInfo* ReportSessionDetails::release_targetsysteminfo() {
  _has_bits_[0] &= ~0x00000004u;
  ::SystemInfo* temp = targetsysteminfo_;
  targetsysteminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SystemInfo* ReportSessionDetails::unsafe_arena_release_targetsysteminfo() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.TargetSystemInfo)
  _has_bits_[0] &= ~0x00000004u;
  ::SystemInfo* temp = targetsysteminfo_;
  targetsysteminfo_ = nullptr;
  return temp;
}
inline ::SystemInfo* ReportSessionDetails::_internal_mutable_targetsysteminfo() {
  _has_bits_[0] |= 0x00000004u;
  if (targetsysteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SystemInfo>(GetArena());
    targetsysteminfo_ = p;
  }
  return targetsysteminfo_;
}
inline ::SystemInfo* ReportSessionDetails::mutable_targetsysteminfo() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.TargetSystemInfo)
  return _internal_mutable_targetsysteminfo();
}
inline void ReportSessionDetails::set_allocated_targetsysteminfo(::SystemInfo* targetsysteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetsysteminfo_;
  }
  if (targetsysteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetsysteminfo);
    if (message_arena != submessage_arena) {
      targetsysteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetsysteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  targetsysteminfo_ = targetsysteminfo;
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.TargetSystemInfo)
}

// optional .DeviceProperties DeviceProperties = 5;
inline bool ReportSessionDetails::_internal_has_deviceproperties() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || deviceproperties_ != nullptr);
  return value;
}
inline bool ReportSessionDetails::has_deviceproperties() const {
  return _internal_has_deviceproperties();
}
inline void ReportSessionDetails::clear_deviceproperties() {
  if (deviceproperties_ != nullptr) deviceproperties_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::DeviceProperties& ReportSessionDetails::_internal_deviceproperties() const {
  const ::DeviceProperties* p = deviceproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceProperties&>(
      ::_DeviceProperties_default_instance_);
}
inline const ::DeviceProperties& ReportSessionDetails::deviceproperties() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.DeviceProperties)
  return _internal_deviceproperties();
}
inline void ReportSessionDetails::unsafe_arena_set_allocated_deviceproperties(
    ::DeviceProperties* deviceproperties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceproperties_);
  }
  deviceproperties_ = deviceproperties;
  if (deviceproperties) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReportSessionDetails.DeviceProperties)
}
inline ::DeviceProperties* ReportSessionDetails::release_deviceproperties() {
  _has_bits_[0] &= ~0x00000008u;
  ::DeviceProperties* temp = deviceproperties_;
  deviceproperties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DeviceProperties* ReportSessionDetails::unsafe_arena_release_deviceproperties() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.DeviceProperties)
  _has_bits_[0] &= ~0x00000008u;
  ::DeviceProperties* temp = deviceproperties_;
  deviceproperties_ = nullptr;
  return temp;
}
inline ::DeviceProperties* ReportSessionDetails::_internal_mutable_deviceproperties() {
  _has_bits_[0] |= 0x00000008u;
  if (deviceproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceProperties>(GetArena());
    deviceproperties_ = p;
  }
  return deviceproperties_;
}
inline ::DeviceProperties* ReportSessionDetails::mutable_deviceproperties() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.DeviceProperties)
  return _internal_mutable_deviceproperties();
}
inline void ReportSessionDetails::set_allocated_deviceproperties(::DeviceProperties* deviceproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deviceproperties_;
  }
  if (deviceproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deviceproperties);
    if (message_arena != submessage_arena) {
      deviceproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceproperties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deviceproperties_ = deviceproperties;
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.DeviceProperties)
}

// repeated .DeviceAttributes DeviceAttributes = 6;
inline int ReportSessionDetails::_internal_deviceattributes_size() const {
  return deviceattributes_.size();
}
inline int ReportSessionDetails::deviceattributes_size() const {
  return _internal_deviceattributes_size();
}
inline void ReportSessionDetails::clear_deviceattributes() {
  deviceattributes_.Clear();
}
inline ::DeviceAttributes* ReportSessionDetails::mutable_deviceattributes(int index) {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.DeviceAttributes)
  return deviceattributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttributes >*
ReportSessionDetails::mutable_deviceattributes() {
  // @@protoc_insertion_point(field_mutable_list:ReportSessionDetails.DeviceAttributes)
  return &deviceattributes_;
}
inline const ::DeviceAttributes& ReportSessionDetails::_internal_deviceattributes(int index) const {
  return deviceattributes_.Get(index);
}
inline const ::DeviceAttributes& ReportSessionDetails::deviceattributes(int index) const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.DeviceAttributes)
  return _internal_deviceattributes(index);
}
inline ::DeviceAttributes* ReportSessionDetails::_internal_add_deviceattributes() {
  return deviceattributes_.Add();
}
inline ::DeviceAttributes* ReportSessionDetails::add_deviceattributes() {
  // @@protoc_insertion_point(field_add:ReportSessionDetails.DeviceAttributes)
  return _internal_add_deviceattributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceAttributes >&
ReportSessionDetails::deviceattributes() const {
  // @@protoc_insertion_point(field_list:ReportSessionDetails.DeviceAttributes)
  return deviceattributes_;
}

// optional string Comments = 7;
inline bool ReportSessionDetails::_internal_has_comments() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReportSessionDetails::has_comments() const {
  return _internal_has_comments();
}
inline void ReportSessionDetails::clear_comments() {
  comments_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportSessionDetails::comments() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.Comments)
  return _internal_comments();
}
inline void ReportSessionDetails::set_comments(const std::string& value) {
  _internal_set_comments(value);
  // @@protoc_insertion_point(field_set:ReportSessionDetails.Comments)
}
inline std::string* ReportSessionDetails::mutable_comments() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.Comments)
  return _internal_mutable_comments();
}
inline const std::string& ReportSessionDetails::_internal_comments() const {
  return comments_.Get();
}
inline void ReportSessionDetails::_internal_set_comments(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReportSessionDetails::set_comments(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comments_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReportSessionDetails.Comments)
}
inline void ReportSessionDetails::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReportSessionDetails.Comments)
}
inline void ReportSessionDetails::set_comments(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReportSessionDetails.Comments)
}
inline std::string* ReportSessionDetails::_internal_mutable_comments() {
  _has_bits_[0] |= 0x00000001u;
  return comments_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReportSessionDetails::release_comments() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.Comments)
  if (!_internal_has_comments()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comments_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReportSessionDetails::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.Comments)
}

// repeated .VersionInfo VersionInfo = 8;
inline int ReportSessionDetails::_internal_versioninfo_size() const {
  return versioninfo_.size();
}
inline int ReportSessionDetails::versioninfo_size() const {
  return _internal_versioninfo_size();
}
inline void ReportSessionDetails::clear_versioninfo() {
  versioninfo_.Clear();
}
inline ::VersionInfo* ReportSessionDetails::mutable_versioninfo(int index) {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.VersionInfo)
  return versioninfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersionInfo >*
ReportSessionDetails::mutable_versioninfo() {
  // @@protoc_insertion_point(field_mutable_list:ReportSessionDetails.VersionInfo)
  return &versioninfo_;
}
inline const ::VersionInfo& ReportSessionDetails::_internal_versioninfo(int index) const {
  return versioninfo_.Get(index);
}
inline const ::VersionInfo& ReportSessionDetails::versioninfo(int index) const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.VersionInfo)
  return _internal_versioninfo(index);
}
inline ::VersionInfo* ReportSessionDetails::_internal_add_versioninfo() {
  return versioninfo_.Add();
}
inline ::VersionInfo* ReportSessionDetails::add_versioninfo() {
  // @@protoc_insertion_point(field_add:ReportSessionDetails.VersionInfo)
  return _internal_add_versioninfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersionInfo >&
ReportSessionDetails::versioninfo() const {
  // @@protoc_insertion_point(field_list:ReportSessionDetails.VersionInfo)
  return versioninfo_;
}

// optional .ExecutableSettings ExecutableSettings = 9;
inline bool ReportSessionDetails::_internal_has_executablesettings() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || executablesettings_ != nullptr);
  return value;
}
inline bool ReportSessionDetails::has_executablesettings() const {
  return _internal_has_executablesettings();
}
inline const ::ExecutableSettings& ReportSessionDetails::_internal_executablesettings() const {
  const ::ExecutableSettings* p = executablesettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ExecutableSettings&>(
      ::_ExecutableSettings_default_instance_);
}
inline const ::ExecutableSettings& ReportSessionDetails::executablesettings() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.ExecutableSettings)
  return _internal_executablesettings();
}
inline void ReportSessionDetails::unsafe_arena_set_allocated_executablesettings(
    ::ExecutableSettings* executablesettings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executablesettings_);
  }
  executablesettings_ = executablesettings;
  if (executablesettings) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReportSessionDetails.ExecutableSettings)
}
inline ::ExecutableSettings* ReportSessionDetails::release_executablesettings() {
  _has_bits_[0] &= ~0x00000010u;
  ::ExecutableSettings* temp = executablesettings_;
  executablesettings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ExecutableSettings* ReportSessionDetails::unsafe_arena_release_executablesettings() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.ExecutableSettings)
  _has_bits_[0] &= ~0x00000010u;
  ::ExecutableSettings* temp = executablesettings_;
  executablesettings_ = nullptr;
  return temp;
}
inline ::ExecutableSettings* ReportSessionDetails::_internal_mutable_executablesettings() {
  _has_bits_[0] |= 0x00000010u;
  if (executablesettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExecutableSettings>(GetArena());
    executablesettings_ = p;
  }
  return executablesettings_;
}
inline ::ExecutableSettings* ReportSessionDetails::mutable_executablesettings() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.ExecutableSettings)
  return _internal_mutable_executablesettings();
}
inline void ReportSessionDetails::set_allocated_executablesettings(::ExecutableSettings* executablesettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(executablesettings_);
  }
  if (executablesettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executablesettings)->GetArena();
    if (message_arena != submessage_arena) {
      executablesettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executablesettings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  executablesettings_ = executablesettings;
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.ExecutableSettings)
}

// optional .ProfilerSettings ProfilerSettings = 10;
inline bool ReportSessionDetails::_internal_has_profilersettings() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || profilersettings_ != nullptr);
  return value;
}
inline bool ReportSessionDetails::has_profilersettings() const {
  return _internal_has_profilersettings();
}
inline void ReportSessionDetails::clear_profilersettings() {
  if (profilersettings_ != nullptr) profilersettings_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ProfilerSettings& ReportSessionDetails::_internal_profilersettings() const {
  const ::ProfilerSettings* p = profilersettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSettings&>(
      ::_ProfilerSettings_default_instance_);
}
inline const ::ProfilerSettings& ReportSessionDetails::profilersettings() const {
  // @@protoc_insertion_point(field_get:ReportSessionDetails.ProfilerSettings)
  return _internal_profilersettings();
}
inline void ReportSessionDetails::unsafe_arena_set_allocated_profilersettings(
    ::ProfilerSettings* profilersettings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profilersettings_);
  }
  profilersettings_ = profilersettings;
  if (profilersettings) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReportSessionDetails.ProfilerSettings)
}
inline ::ProfilerSettings* ReportSessionDetails::release_profilersettings() {
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSettings* temp = profilersettings_;
  profilersettings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSettings* ReportSessionDetails::unsafe_arena_release_profilersettings() {
  // @@protoc_insertion_point(field_release:ReportSessionDetails.ProfilerSettings)
  _has_bits_[0] &= ~0x00000020u;
  ::ProfilerSettings* temp = profilersettings_;
  profilersettings_ = nullptr;
  return temp;
}
inline ::ProfilerSettings* ReportSessionDetails::_internal_mutable_profilersettings() {
  _has_bits_[0] |= 0x00000020u;
  if (profilersettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSettings>(GetArena());
    profilersettings_ = p;
  }
  return profilersettings_;
}
inline ::ProfilerSettings* ReportSessionDetails::mutable_profilersettings() {
  // @@protoc_insertion_point(field_mutable:ReportSessionDetails.ProfilerSettings)
  return _internal_mutable_profilersettings();
}
inline void ReportSessionDetails::set_allocated_profilersettings(::ProfilerSettings* profilersettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete profilersettings_;
  }
  if (profilersettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilersettings);
    if (message_arena != submessage_arena) {
      profilersettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilersettings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  profilersettings_ = profilersettings;
  // @@protoc_insertion_point(field_set_allocated:ReportSessionDetails.ProfilerSettings)
}

// -------------------------------------------------------------------

// ProfileMetricValue

// optional string StringValue = 1;
inline bool ProfileMetricValue::_internal_has_stringvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileMetricValue::has_stringvalue() const {
  return _internal_has_stringvalue();
}
inline void ProfileMetricValue::clear_stringvalue() {
  stringvalue_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileMetricValue::stringvalue() const {
  // @@protoc_insertion_point(field_get:ProfileMetricValue.StringValue)
  return _internal_stringvalue();
}
inline void ProfileMetricValue::set_stringvalue(const std::string& value) {
  _internal_set_stringvalue(value);
  // @@protoc_insertion_point(field_set:ProfileMetricValue.StringValue)
}
inline std::string* ProfileMetricValue::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable:ProfileMetricValue.StringValue)
  return _internal_mutable_stringvalue();
}
inline const std::string& ProfileMetricValue::_internal_stringvalue() const {
  return stringvalue_.Get();
}
inline void ProfileMetricValue::_internal_set_stringvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileMetricValue::set_stringvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileMetricValue.StringValue)
}
inline void ProfileMetricValue::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileMetricValue.StringValue)
}
inline void ProfileMetricValue::set_stringvalue(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileMetricValue.StringValue)
}
inline std::string* ProfileMetricValue::_internal_mutable_stringvalue() {
  _has_bits_[0] |= 0x00000001u;
  return stringvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileMetricValue::release_stringvalue() {
  // @@protoc_insertion_point(field_release:ProfileMetricValue.StringValue)
  if (!_internal_has_stringvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stringvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileMetricValue::set_allocated_stringvalue(std::string* stringvalue) {
  if (stringvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileMetricValue.StringValue)
}

// optional float FloatValue = 2;
inline bool ProfileMetricValue::_internal_has_floatvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfileMetricValue::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void ProfileMetricValue::clear_floatvalue() {
  floatvalue_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProfileMetricValue::_internal_floatvalue() const {
  return floatvalue_;
}
inline float ProfileMetricValue::floatvalue() const {
  // @@protoc_insertion_point(field_get:ProfileMetricValue.FloatValue)
  return _internal_floatvalue();
}
inline void ProfileMetricValue::_internal_set_floatvalue(float value) {
  _has_bits_[0] |= 0x00000004u;
  floatvalue_ = value;
}
inline void ProfileMetricValue::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:ProfileMetricValue.FloatValue)
}

// optional double DoubleValue = 3;
inline bool ProfileMetricValue::_internal_has_doublevalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileMetricValue::has_doublevalue() const {
  return _internal_has_doublevalue();
}
inline void ProfileMetricValue::clear_doublevalue() {
  doublevalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ProfileMetricValue::_internal_doublevalue() const {
  return doublevalue_;
}
inline double ProfileMetricValue::doublevalue() const {
  // @@protoc_insertion_point(field_get:ProfileMetricValue.DoubleValue)
  return _internal_doublevalue();
}
inline void ProfileMetricValue::_internal_set_doublevalue(double value) {
  _has_bits_[0] |= 0x00000002u;
  doublevalue_ = value;
}
inline void ProfileMetricValue::set_doublevalue(double value) {
  _internal_set_doublevalue(value);
  // @@protoc_insertion_point(field_set:ProfileMetricValue.DoubleValue)
}

// optional uint32 Uint32Value = 4;
inline bool ProfileMetricValue::_internal_has_uint32value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfileMetricValue::has_uint32value() const {
  return _internal_has_uint32value();
}
inline void ProfileMetricValue::clear_uint32value() {
  uint32value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileMetricValue::_internal_uint32value() const {
  return uint32value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileMetricValue::uint32value() const {
  // @@protoc_insertion_point(field_get:ProfileMetricValue.Uint32Value)
  return _internal_uint32value();
}
inline void ProfileMetricValue::_internal_set_uint32value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uint32value_ = value;
}
inline void ProfileMetricValue::set_uint32value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32value(value);
  // @@protoc_insertion_point(field_set:ProfileMetricValue.Uint32Value)
}

// optional uint64 Uint64Value = 5;
inline bool ProfileMetricValue::_internal_has_uint64value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfileMetricValue::has_uint64value() const {
  return _internal_has_uint64value();
}
inline void ProfileMetricValue::clear_uint64value() {
  uint64value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileMetricValue::_internal_uint64value() const {
  return uint64value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileMetricValue::uint64value() const {
  // @@protoc_insertion_point(field_get:ProfileMetricValue.Uint64Value)
  return _internal_uint64value();
}
inline void ProfileMetricValue::_internal_set_uint64value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  uint64value_ = value;
}
inline void ProfileMetricValue::set_uint64value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64value(value);
  // @@protoc_insertion_point(field_set:ProfileMetricValue.Uint64Value)
}

// -------------------------------------------------------------------

// ProfileMetricListElement

// optional .ProfileMetricValue CorrelationId = 1;
inline bool ProfileMetricListElement::_internal_has_correlationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || correlationid_ != nullptr);
  return value;
}
inline bool ProfileMetricListElement::has_correlationid() const {
  return _internal_has_correlationid();
}
inline void ProfileMetricListElement::clear_correlationid() {
  if (correlationid_ != nullptr) correlationid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileMetricValue& ProfileMetricListElement::_internal_correlationid() const {
  const ::ProfileMetricValue* p = correlationid_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileMetricValue&>(
      ::_ProfileMetricValue_default_instance_);
}
inline const ::ProfileMetricValue& ProfileMetricListElement::correlationid() const {
  // @@protoc_insertion_point(field_get:ProfileMetricListElement.CorrelationId)
  return _internal_correlationid();
}
inline void ProfileMetricListElement::unsafe_arena_set_allocated_correlationid(
    ::ProfileMetricValue* correlationid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlationid_);
  }
  correlationid_ = correlationid;
  if (correlationid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileMetricListElement.CorrelationId)
}
inline ::ProfileMetricValue* ProfileMetricListElement::release_correlationid() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileMetricValue* temp = correlationid_;
  correlationid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricListElement::unsafe_arena_release_correlationid() {
  // @@protoc_insertion_point(field_release:ProfileMetricListElement.CorrelationId)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileMetricValue* temp = correlationid_;
  correlationid_ = nullptr;
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricListElement::_internal_mutable_correlationid() {
  _has_bits_[0] |= 0x00000001u;
  if (correlationid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileMetricValue>(GetArena());
    correlationid_ = p;
  }
  return correlationid_;
}
inline ::ProfileMetricValue* ProfileMetricListElement::mutable_correlationid() {
  // @@protoc_insertion_point(field_mutable:ProfileMetricListElement.CorrelationId)
  return _internal_mutable_correlationid();
}
inline void ProfileMetricListElement::set_allocated_correlationid(::ProfileMetricValue* correlationid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete correlationid_;
  }
  if (correlationid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(correlationid);
    if (message_arena != submessage_arena) {
      correlationid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, correlationid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  correlationid_ = correlationid;
  // @@protoc_insertion_point(field_set_allocated:ProfileMetricListElement.CorrelationId)
}

// required .ProfileMetricValue ElementValue = 2;
inline bool ProfileMetricListElement::_internal_has_elementvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || elementvalue_ != nullptr);
  return value;
}
inline bool ProfileMetricListElement::has_elementvalue() const {
  return _internal_has_elementvalue();
}
inline void ProfileMetricListElement::clear_elementvalue() {
  if (elementvalue_ != nullptr) elementvalue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfileMetricValue& ProfileMetricListElement::_internal_elementvalue() const {
  const ::ProfileMetricValue* p = elementvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileMetricValue&>(
      ::_ProfileMetricValue_default_instance_);
}
inline const ::ProfileMetricValue& ProfileMetricListElement::elementvalue() const {
  // @@protoc_insertion_point(field_get:ProfileMetricListElement.ElementValue)
  return _internal_elementvalue();
}
inline void ProfileMetricListElement::unsafe_arena_set_allocated_elementvalue(
    ::ProfileMetricValue* elementvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elementvalue_);
  }
  elementvalue_ = elementvalue;
  if (elementvalue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileMetricListElement.ElementValue)
}
inline ::ProfileMetricValue* ProfileMetricListElement::release_elementvalue() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileMetricValue* temp = elementvalue_;
  elementvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricListElement::unsafe_arena_release_elementvalue() {
  // @@protoc_insertion_point(field_release:ProfileMetricListElement.ElementValue)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileMetricValue* temp = elementvalue_;
  elementvalue_ = nullptr;
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricListElement::_internal_mutable_elementvalue() {
  _has_bits_[0] |= 0x00000002u;
  if (elementvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileMetricValue>(GetArena());
    elementvalue_ = p;
  }
  return elementvalue_;
}
inline ::ProfileMetricValue* ProfileMetricListElement::mutable_elementvalue() {
  // @@protoc_insertion_point(field_mutable:ProfileMetricListElement.ElementValue)
  return _internal_mutable_elementvalue();
}
inline void ProfileMetricListElement::set_allocated_elementvalue(::ProfileMetricValue* elementvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete elementvalue_;
  }
  if (elementvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(elementvalue);
    if (message_arena != submessage_arena) {
      elementvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elementvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  elementvalue_ = elementvalue;
  // @@protoc_insertion_point(field_set_allocated:ProfileMetricListElement.ElementValue)
}

// -------------------------------------------------------------------

// ProfileMetricResult

// required uint32 NameId = 1;
inline bool ProfileMetricResult::_internal_has_nameid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileMetricResult::has_nameid() const {
  return _internal_has_nameid();
}
inline void ProfileMetricResult::clear_nameid() {
  nameid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileMetricResult::_internal_nameid() const {
  return nameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileMetricResult::nameid() const {
  // @@protoc_insertion_point(field_get:ProfileMetricResult.NameId)
  return _internal_nameid();
}
inline void ProfileMetricResult::_internal_set_nameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nameid_ = value;
}
inline void ProfileMetricResult::set_nameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nameid(value);
  // @@protoc_insertion_point(field_set:ProfileMetricResult.NameId)
}

// optional .ProfileMetricValue MetricValue = 2;
inline bool ProfileMetricResult::_internal_has_metricvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metricvalue_ != nullptr);
  return value;
}
inline bool ProfileMetricResult::has_metricvalue() const {
  return _internal_has_metricvalue();
}
inline void ProfileMetricResult::clear_metricvalue() {
  if (metricvalue_ != nullptr) metricvalue_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileMetricValue& ProfileMetricResult::_internal_metricvalue() const {
  const ::ProfileMetricValue* p = metricvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileMetricValue&>(
      ::_ProfileMetricValue_default_instance_);
}
inline const ::ProfileMetricValue& ProfileMetricResult::metricvalue() const {
  // @@protoc_insertion_point(field_get:ProfileMetricResult.MetricValue)
  return _internal_metricvalue();
}
inline void ProfileMetricResult::unsafe_arena_set_allocated_metricvalue(
    ::ProfileMetricValue* metricvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricvalue_);
  }
  metricvalue_ = metricvalue;
  if (metricvalue) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileMetricResult.MetricValue)
}
inline ::ProfileMetricValue* ProfileMetricResult::release_metricvalue() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileMetricValue* temp = metricvalue_;
  metricvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricResult::unsafe_arena_release_metricvalue() {
  // @@protoc_insertion_point(field_release:ProfileMetricResult.MetricValue)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileMetricValue* temp = metricvalue_;
  metricvalue_ = nullptr;
  return temp;
}
inline ::ProfileMetricValue* ProfileMetricResult::_internal_mutable_metricvalue() {
  _has_bits_[0] |= 0x00000001u;
  if (metricvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileMetricValue>(GetArena());
    metricvalue_ = p;
  }
  return metricvalue_;
}
inline ::ProfileMetricValue* ProfileMetricResult::mutable_metricvalue() {
  // @@protoc_insertion_point(field_mutable:ProfileMetricResult.MetricValue)
  return _internal_mutable_metricvalue();
}
inline void ProfileMetricResult::set_allocated_metricvalue(::ProfileMetricValue* metricvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metricvalue_;
  }
  if (metricvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metricvalue);
    if (message_arena != submessage_arena) {
      metricvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metricvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metricvalue_ = metricvalue;
  // @@protoc_insertion_point(field_set_allocated:ProfileMetricResult.MetricValue)
}

// repeated .ProfileMetricListElement MetricValueList = 3;
inline int ProfileMetricResult::_internal_metricvaluelist_size() const {
  return metricvaluelist_.size();
}
inline int ProfileMetricResult::metricvaluelist_size() const {
  return _internal_metricvaluelist_size();
}
inline void ProfileMetricResult::clear_metricvaluelist() {
  metricvaluelist_.Clear();
}
inline ::ProfileMetricListElement* ProfileMetricResult::mutable_metricvaluelist(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileMetricResult.MetricValueList)
  return metricvaluelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricListElement >*
ProfileMetricResult::mutable_metricvaluelist() {
  // @@protoc_insertion_point(field_mutable_list:ProfileMetricResult.MetricValueList)
  return &metricvaluelist_;
}
inline const ::ProfileMetricListElement& ProfileMetricResult::_internal_metricvaluelist(int index) const {
  return metricvaluelist_.Get(index);
}
inline const ::ProfileMetricListElement& ProfileMetricResult::metricvaluelist(int index) const {
  // @@protoc_insertion_point(field_get:ProfileMetricResult.MetricValueList)
  return _internal_metricvaluelist(index);
}
inline ::ProfileMetricListElement* ProfileMetricResult::_internal_add_metricvaluelist() {
  return metricvaluelist_.Add();
}
inline ::ProfileMetricListElement* ProfileMetricResult::add_metricvaluelist() {
  // @@protoc_insertion_point(field_add:ProfileMetricResult.MetricValueList)
  return _internal_add_metricvaluelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricListElement >&
ProfileMetricResult::metricvaluelist() const {
  // @@protoc_insertion_point(field_list:ProfileMetricResult.MetricValueList)
  return metricvaluelist_;
}

// -------------------------------------------------------------------

// CommentID

// required string SectionID = 1;
inline bool CommentID::_internal_has_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommentID::has_sectionid() const {
  return _internal_has_sectionid();
}
inline void CommentID::clear_sectionid() {
  sectionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommentID::sectionid() const {
  // @@protoc_insertion_point(field_get:CommentID.SectionID)
  return _internal_sectionid();
}
inline void CommentID::set_sectionid(const std::string& value) {
  _internal_set_sectionid(value);
  // @@protoc_insertion_point(field_set:CommentID.SectionID)
}
inline std::string* CommentID::mutable_sectionid() {
  // @@protoc_insertion_point(field_mutable:CommentID.SectionID)
  return _internal_mutable_sectionid();
}
inline const std::string& CommentID::_internal_sectionid() const {
  return sectionid_.Get();
}
inline void CommentID::_internal_set_sectionid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommentID::set_sectionid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sectionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommentID.SectionID)
}
inline void CommentID::set_sectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommentID.SectionID)
}
inline void CommentID::set_sectionid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommentID.SectionID)
}
inline std::string* CommentID::_internal_mutable_sectionid() {
  _has_bits_[0] |= 0x00000001u;
  return sectionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommentID::release_sectionid() {
  // @@protoc_insertion_point(field_release:CommentID.SectionID)
  if (!_internal_has_sectionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sectionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommentID::set_allocated_sectionid(std::string* sectionid) {
  if (sectionid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommentID.SectionID)
}

// -------------------------------------------------------------------

// Comment

// required .CommentID ID = 1;
inline bool Comment::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Comment::has_id() const {
  return _internal_has_id();
}
inline void Comment::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommentID& Comment::_internal_id() const {
  const ::CommentID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommentID&>(
      ::_CommentID_default_instance_);
}
inline const ::CommentID& Comment::id() const {
  // @@protoc_insertion_point(field_get:Comment.ID)
  return _internal_id();
}
inline void Comment::unsafe_arena_set_allocated_id(
    ::CommentID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Comment.ID)
}
inline ::CommentID* Comment::release_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommentID* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommentID* Comment::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:Comment.ID)
  _has_bits_[0] &= ~0x00000004u;
  ::CommentID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::CommentID* Comment::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommentID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::CommentID* Comment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Comment.ID)
  return _internal_mutable_id();
}
inline void Comment::set_allocated_id(::CommentID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Comment.ID)
}

// required string DisplayName = 2;
inline bool Comment::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Comment::has_displayname() const {
  return _internal_has_displayname();
}
inline void Comment::clear_displayname() {
  displayname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Comment::displayname() const {
  // @@protoc_insertion_point(field_get:Comment.DisplayName)
  return _internal_displayname();
}
inline void Comment::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:Comment.DisplayName)
}
inline std::string* Comment::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:Comment.DisplayName)
  return _internal_mutable_displayname();
}
inline const std::string& Comment::_internal_displayname() const {
  return displayname_.Get();
}
inline void Comment::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Comment::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Comment.DisplayName)
}
inline void Comment::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Comment.DisplayName)
}
inline void Comment::set_displayname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Comment.DisplayName)
}
inline std::string* Comment::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000001u;
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Comment::release_displayname() {
  // @@protoc_insertion_point(field_release:Comment.DisplayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return displayname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Comment::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Comment.DisplayName)
}

// required string Text = 3;
inline bool Comment::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Comment::has_text() const {
  return _internal_has_text();
}
inline void Comment::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Comment::text() const {
  // @@protoc_insertion_point(field_get:Comment.Text)
  return _internal_text();
}
inline void Comment::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Comment.Text)
}
inline std::string* Comment::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Comment.Text)
  return _internal_mutable_text();
}
inline const std::string& Comment::_internal_text() const {
  return text_.Get();
}
inline void Comment::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Comment::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Comment.Text)
}
inline void Comment::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Comment.Text)
}
inline void Comment::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Comment.Text)
}
inline std::string* Comment::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Comment::release_text() {
  // @@protoc_insertion_point(field_release:Comment.Text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Comment::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Comment.Text)
}

// -------------------------------------------------------------------

// ProfileSeriesInfoMessage

// required uint32 SeriesID = 1;
inline bool ProfileSeriesInfoMessage::_internal_has_seriesid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileSeriesInfoMessage::has_seriesid() const {
  return _internal_has_seriesid();
}
inline void ProfileSeriesInfoMessage::clear_seriesid() {
  seriesid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileSeriesInfoMessage::_internal_seriesid() const {
  return seriesid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileSeriesInfoMessage::seriesid() const {
  // @@protoc_insertion_point(field_get:ProfileSeriesInfoMessage.SeriesID)
  return _internal_seriesid();
}
inline void ProfileSeriesInfoMessage::_internal_set_seriesid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seriesid_ = value;
}
inline void ProfileSeriesInfoMessage::set_seriesid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seriesid(value);
  // @@protoc_insertion_point(field_set:ProfileSeriesInfoMessage.SeriesID)
}

// optional string CombinationStr = 2;
inline bool ProfileSeriesInfoMessage::_internal_has_combinationstr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileSeriesInfoMessage::has_combinationstr() const {
  return _internal_has_combinationstr();
}
inline void ProfileSeriesInfoMessage::clear_combinationstr() {
  combinationstr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileSeriesInfoMessage::combinationstr() const {
  // @@protoc_insertion_point(field_get:ProfileSeriesInfoMessage.CombinationStr)
  return _internal_combinationstr();
}
inline void ProfileSeriesInfoMessage::set_combinationstr(const std::string& value) {
  _internal_set_combinationstr(value);
  // @@protoc_insertion_point(field_set:ProfileSeriesInfoMessage.CombinationStr)
}
inline std::string* ProfileSeriesInfoMessage::mutable_combinationstr() {
  // @@protoc_insertion_point(field_mutable:ProfileSeriesInfoMessage.CombinationStr)
  return _internal_mutable_combinationstr();
}
inline const std::string& ProfileSeriesInfoMessage::_internal_combinationstr() const {
  return combinationstr_.Get();
}
inline void ProfileSeriesInfoMessage::_internal_set_combinationstr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  combinationstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileSeriesInfoMessage::set_combinationstr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  combinationstr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileSeriesInfoMessage.CombinationStr)
}
inline void ProfileSeriesInfoMessage::set_combinationstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  combinationstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileSeriesInfoMessage.CombinationStr)
}
inline void ProfileSeriesInfoMessage::set_combinationstr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  combinationstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileSeriesInfoMessage.CombinationStr)
}
inline std::string* ProfileSeriesInfoMessage::_internal_mutable_combinationstr() {
  _has_bits_[0] |= 0x00000001u;
  return combinationstr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileSeriesInfoMessage::release_combinationstr() {
  // @@protoc_insertion_point(field_release:ProfileSeriesInfoMessage.CombinationStr)
  if (!_internal_has_combinationstr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return combinationstr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileSeriesInfoMessage::set_allocated_combinationstr(std::string* combinationstr) {
  if (combinationstr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  combinationstr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combinationstr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileSeriesInfoMessage.CombinationStr)
}

// -------------------------------------------------------------------

// ProfileResult

// required uint32 ThreadID = 1;
inline bool ProfileResult::_internal_has_threadid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ProfileResult::has_threadid() const {
  return _internal_has_threadid();
}
inline void ProfileResult::clear_threadid() {
  threadid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::_internal_threadid() const {
  return threadid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::threadid() const {
  // @@protoc_insertion_point(field_get:ProfileResult.ThreadID)
  return _internal_threadid();
}
inline void ProfileResult::_internal_set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  threadid_ = value;
}
inline void ProfileResult::set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:ProfileResult.ThreadID)
}

// required uint64 APICallID = 2;
inline bool ProfileResult::_internal_has_apicallid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProfileResult::has_apicallid() const {
  return _internal_has_apicallid();
}
inline void ProfileResult::clear_apicallid() {
  apicallid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::_internal_apicallid() const {
  return apicallid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::apicallid() const {
  // @@protoc_insertion_point(field_get:ProfileResult.APICallID)
  return _internal_apicallid();
}
inline void ProfileResult::_internal_set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  apicallid_ = value;
}
inline void ProfileResult::set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_apicallid(value);
  // @@protoc_insertion_point(field_set:ProfileResult.APICallID)
}

// required uint64 ProgramHandle = 3;
inline bool ProfileResult::_internal_has_programhandle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProfileResult::has_programhandle() const {
  return _internal_has_programhandle();
}
inline void ProfileResult::clear_programhandle() {
  programhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::_internal_programhandle() const {
  return programhandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::programhandle() const {
  // @@protoc_insertion_point(field_get:ProfileResult.ProgramHandle)
  return _internal_programhandle();
}
inline void ProfileResult::_internal_set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  programhandle_ = value;
}
inline void ProfileResult::set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_programhandle(value);
  // @@protoc_insertion_point(field_set:ProfileResult.ProgramHandle)
}

// required uint64 KernelID = 4;
inline bool ProfileResult::_internal_has_kernelid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ProfileResult::has_kernelid() const {
  return _internal_has_kernelid();
}
inline void ProfileResult::clear_kernelid() {
  kernelid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::_internal_kernelid() const {
  return kernelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::kernelid() const {
  // @@protoc_insertion_point(field_get:ProfileResult.KernelID)
  return _internal_kernelid();
}
inline void ProfileResult::_internal_set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  kernelid_ = value;
}
inline void ProfileResult::set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_kernelid(value);
  // @@protoc_insertion_point(field_set:ProfileResult.KernelID)
}

// required string KernelMangledName = 5;
inline bool ProfileResult::_internal_has_kernelmangledname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileResult::has_kernelmangledname() const {
  return _internal_has_kernelmangledname();
}
inline void ProfileResult::clear_kernelmangledname() {
  kernelmangledname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileResult::kernelmangledname() const {
  // @@protoc_insertion_point(field_get:ProfileResult.KernelMangledName)
  return _internal_kernelmangledname();
}
inline void ProfileResult::set_kernelmangledname(const std::string& value) {
  _internal_set_kernelmangledname(value);
  // @@protoc_insertion_point(field_set:ProfileResult.KernelMangledName)
}
inline std::string* ProfileResult::mutable_kernelmangledname() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.KernelMangledName)
  return _internal_mutable_kernelmangledname();
}
inline const std::string& ProfileResult::_internal_kernelmangledname() const {
  return kernelmangledname_.Get();
}
inline void ProfileResult::_internal_set_kernelmangledname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileResult::set_kernelmangledname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileResult.KernelMangledName)
}
inline void ProfileResult::set_kernelmangledname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileResult.KernelMangledName)
}
inline void ProfileResult::set_kernelmangledname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileResult.KernelMangledName)
}
inline std::string* ProfileResult::_internal_mutable_kernelmangledname() {
  _has_bits_[0] |= 0x00000001u;
  return kernelmangledname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileResult::release_kernelmangledname() {
  // @@protoc_insertion_point(field_release:ProfileResult.KernelMangledName)
  if (!_internal_has_kernelmangledname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kernelmangledname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileResult::set_allocated_kernelmangledname(std::string* kernelmangledname) {
  if (kernelmangledname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kernelmangledname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelmangledname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.KernelMangledName)
}

// required string KernelFunctionName = 6;
inline bool ProfileResult::_internal_has_kernelfunctionname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileResult::has_kernelfunctionname() const {
  return _internal_has_kernelfunctionname();
}
inline void ProfileResult::clear_kernelfunctionname() {
  kernelfunctionname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileResult::kernelfunctionname() const {
  // @@protoc_insertion_point(field_get:ProfileResult.KernelFunctionName)
  return _internal_kernelfunctionname();
}
inline void ProfileResult::set_kernelfunctionname(const std::string& value) {
  _internal_set_kernelfunctionname(value);
  // @@protoc_insertion_point(field_set:ProfileResult.KernelFunctionName)
}
inline std::string* ProfileResult::mutable_kernelfunctionname() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.KernelFunctionName)
  return _internal_mutable_kernelfunctionname();
}
inline const std::string& ProfileResult::_internal_kernelfunctionname() const {
  return kernelfunctionname_.Get();
}
inline void ProfileResult::_internal_set_kernelfunctionname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileResult::set_kernelfunctionname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileResult.KernelFunctionName)
}
inline void ProfileResult::set_kernelfunctionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileResult.KernelFunctionName)
}
inline void ProfileResult::set_kernelfunctionname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileResult.KernelFunctionName)
}
inline std::string* ProfileResult::_internal_mutable_kernelfunctionname() {
  _has_bits_[0] |= 0x00000002u;
  return kernelfunctionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileResult::release_kernelfunctionname() {
  // @@protoc_insertion_point(field_release:ProfileResult.KernelFunctionName)
  if (!_internal_has_kernelfunctionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return kernelfunctionname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileResult::set_allocated_kernelfunctionname(std::string* kernelfunctionname) {
  if (kernelfunctionname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kernelfunctionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelfunctionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.KernelFunctionName)
}

// required string KernelDemangledName = 7;
inline bool ProfileResult::_internal_has_kerneldemangledname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfileResult::has_kerneldemangledname() const {
  return _internal_has_kerneldemangledname();
}
inline void ProfileResult::clear_kerneldemangledname() {
  kerneldemangledname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProfileResult::kerneldemangledname() const {
  // @@protoc_insertion_point(field_get:ProfileResult.KernelDemangledName)
  return _internal_kerneldemangledname();
}
inline void ProfileResult::set_kerneldemangledname(const std::string& value) {
  _internal_set_kerneldemangledname(value);
  // @@protoc_insertion_point(field_set:ProfileResult.KernelDemangledName)
}
inline std::string* ProfileResult::mutable_kerneldemangledname() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.KernelDemangledName)
  return _internal_mutable_kerneldemangledname();
}
inline const std::string& ProfileResult::_internal_kerneldemangledname() const {
  return kerneldemangledname_.Get();
}
inline void ProfileResult::_internal_set_kerneldemangledname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileResult::set_kerneldemangledname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileResult.KernelDemangledName)
}
inline void ProfileResult::set_kerneldemangledname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileResult.KernelDemangledName)
}
inline void ProfileResult::set_kerneldemangledname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileResult.KernelDemangledName)
}
inline std::string* ProfileResult::_internal_mutable_kerneldemangledname() {
  _has_bits_[0] |= 0x00000004u;
  return kerneldemangledname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileResult::release_kerneldemangledname() {
  // @@protoc_insertion_point(field_release:ProfileResult.KernelDemangledName)
  if (!_internal_has_kerneldemangledname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kerneldemangledname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileResult::set_allocated_kerneldemangledname(std::string* kerneldemangledname) {
  if (kerneldemangledname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kerneldemangledname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kerneldemangledname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.KernelDemangledName)
}

// required uint32 WorkDimensions = 8;
inline bool ProfileResult::_internal_has_workdimensions() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ProfileResult::has_workdimensions() const {
  return _internal_has_workdimensions();
}
inline void ProfileResult::clear_workdimensions() {
  workdimensions_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::_internal_workdimensions() const {
  return workdimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::workdimensions() const {
  // @@protoc_insertion_point(field_get:ProfileResult.WorkDimensions)
  return _internal_workdimensions();
}
inline void ProfileResult::_internal_set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  workdimensions_ = value;
}
inline void ProfileResult::set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_workdimensions(value);
  // @@protoc_insertion_point(field_set:ProfileResult.WorkDimensions)
}

// required .Uint64x3 GlobalWorkOffset = 9;
inline bool ProfileResult::_internal_has_globalworkoffset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || globalworkoffset_ != nullptr);
  return value;
}
inline bool ProfileResult::has_globalworkoffset() const {
  return _internal_has_globalworkoffset();
}
inline const ::Uint64x3& ProfileResult::_internal_globalworkoffset() const {
  const ::Uint64x3* p = globalworkoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& ProfileResult::globalworkoffset() const {
  // @@protoc_insertion_point(field_get:ProfileResult.GlobalWorkOffset)
  return _internal_globalworkoffset();
}
inline void ProfileResult::unsafe_arena_set_allocated_globalworkoffset(
    ::Uint64x3* globalworkoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworkoffset_);
  }
  globalworkoffset_ = globalworkoffset;
  if (globalworkoffset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.GlobalWorkOffset)
}
inline ::Uint64x3* ProfileResult::release_globalworkoffset() {
  _has_bits_[0] &= ~0x00000010u;
  ::Uint64x3* temp = globalworkoffset_;
  globalworkoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* ProfileResult::unsafe_arena_release_globalworkoffset() {
  // @@protoc_insertion_point(field_release:ProfileResult.GlobalWorkOffset)
  _has_bits_[0] &= ~0x00000010u;
  ::Uint64x3* temp = globalworkoffset_;
  globalworkoffset_ = nullptr;
  return temp;
}
inline ::Uint64x3* ProfileResult::_internal_mutable_globalworkoffset() {
  _has_bits_[0] |= 0x00000010u;
  if (globalworkoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    globalworkoffset_ = p;
  }
  return globalworkoffset_;
}
inline ::Uint64x3* ProfileResult::mutable_globalworkoffset() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.GlobalWorkOffset)
  return _internal_mutable_globalworkoffset();
}
inline void ProfileResult::set_allocated_globalworkoffset(::Uint64x3* globalworkoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworkoffset_);
  }
  if (globalworkoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworkoffset)->GetArena();
    if (message_arena != submessage_arena) {
      globalworkoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalworkoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  globalworkoffset_ = globalworkoffset;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.GlobalWorkOffset)
}

// required .Uint64x3 GlobalWorkSize = 10;
inline bool ProfileResult::_internal_has_globalworksize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || globalworksize_ != nullptr);
  return value;
}
inline bool ProfileResult::has_globalworksize() const {
  return _internal_has_globalworksize();
}
inline const ::Uint64x3& ProfileResult::_internal_globalworksize() const {
  const ::Uint64x3* p = globalworksize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& ProfileResult::globalworksize() const {
  // @@protoc_insertion_point(field_get:ProfileResult.GlobalWorkSize)
  return _internal_globalworksize();
}
inline void ProfileResult::unsafe_arena_set_allocated_globalworksize(
    ::Uint64x3* globalworksize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworksize_);
  }
  globalworksize_ = globalworksize;
  if (globalworksize) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.GlobalWorkSize)
}
inline ::Uint64x3* ProfileResult::release_globalworksize() {
  _has_bits_[0] &= ~0x00000020u;
  ::Uint64x3* temp = globalworksize_;
  globalworksize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* ProfileResult::unsafe_arena_release_globalworksize() {
  // @@protoc_insertion_point(field_release:ProfileResult.GlobalWorkSize)
  _has_bits_[0] &= ~0x00000020u;
  ::Uint64x3* temp = globalworksize_;
  globalworksize_ = nullptr;
  return temp;
}
inline ::Uint64x3* ProfileResult::_internal_mutable_globalworksize() {
  _has_bits_[0] |= 0x00000020u;
  if (globalworksize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    globalworksize_ = p;
  }
  return globalworksize_;
}
inline ::Uint64x3* ProfileResult::mutable_globalworksize() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.GlobalWorkSize)
  return _internal_mutable_globalworksize();
}
inline void ProfileResult::set_allocated_globalworksize(::Uint64x3* globalworksize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworksize_);
  }
  if (globalworksize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworksize)->GetArena();
    if (message_arena != submessage_arena) {
      globalworksize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalworksize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  globalworksize_ = globalworksize;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.GlobalWorkSize)
}

// required .Uint64x3 LocalWorkSize = 11;
inline bool ProfileResult::_internal_has_localworksize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || localworksize_ != nullptr);
  return value;
}
inline bool ProfileResult::has_localworksize() const {
  return _internal_has_localworksize();
}
inline const ::Uint64x3& ProfileResult::_internal_localworksize() const {
  const ::Uint64x3* p = localworksize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& ProfileResult::localworksize() const {
  // @@protoc_insertion_point(field_get:ProfileResult.LocalWorkSize)
  return _internal_localworksize();
}
inline void ProfileResult::unsafe_arena_set_allocated_localworksize(
    ::Uint64x3* localworksize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localworksize_);
  }
  localworksize_ = localworksize;
  if (localworksize) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.LocalWorkSize)
}
inline ::Uint64x3* ProfileResult::release_localworksize() {
  _has_bits_[0] &= ~0x00000040u;
  ::Uint64x3* temp = localworksize_;
  localworksize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* ProfileResult::unsafe_arena_release_localworksize() {
  // @@protoc_insertion_point(field_release:ProfileResult.LocalWorkSize)
  _has_bits_[0] &= ~0x00000040u;
  ::Uint64x3* temp = localworksize_;
  localworksize_ = nullptr;
  return temp;
}
inline ::Uint64x3* ProfileResult::_internal_mutable_localworksize() {
  _has_bits_[0] |= 0x00000040u;
  if (localworksize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    localworksize_ = p;
  }
  return localworksize_;
}
inline ::Uint64x3* ProfileResult::mutable_localworksize() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.LocalWorkSize)
  return _internal_mutable_localworksize();
}
inline void ProfileResult::set_allocated_localworksize(::Uint64x3* localworksize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localworksize_);
  }
  if (localworksize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localworksize)->GetArena();
    if (message_arena != submessage_arena) {
      localworksize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localworksize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  localworksize_ = localworksize;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.LocalWorkSize)
}

// optional string Comments = 12;
inline bool ProfileResult::_internal_has_comments() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfileResult::has_comments() const {
  return _internal_has_comments();
}
inline void ProfileResult::clear_comments() {
  comments_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProfileResult::comments() const {
  // @@protoc_insertion_point(field_get:ProfileResult.Comments)
  return _internal_comments();
}
inline void ProfileResult::set_comments(const std::string& value) {
  _internal_set_comments(value);
  // @@protoc_insertion_point(field_set:ProfileResult.Comments)
}
inline std::string* ProfileResult::mutable_comments() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.Comments)
  return _internal_mutable_comments();
}
inline const std::string& ProfileResult::_internal_comments() const {
  return comments_.Get();
}
inline void ProfileResult::_internal_set_comments(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileResult::set_comments(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  comments_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProfileResult.Comments)
}
inline void ProfileResult::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProfileResult.Comments)
}
inline void ProfileResult::set_comments(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProfileResult.Comments)
}
inline std::string* ProfileResult::_internal_mutable_comments() {
  _has_bits_[0] |= 0x00000008u;
  return comments_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileResult::release_comments() {
  // @@protoc_insertion_point(field_release:ProfileResult.Comments)
  if (!_internal_has_comments()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return comments_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileResult::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  comments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.Comments)
}

// repeated .ProfileMetricResult MetricResults = 13;
inline int ProfileResult::_internal_metricresults_size() const {
  return metricresults_.size();
}
inline int ProfileResult::metricresults_size() const {
  return _internal_metricresults_size();
}
inline void ProfileResult::clear_metricresults() {
  metricresults_.Clear();
}
inline ::ProfileMetricResult* ProfileResult::mutable_metricresults(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileResult.MetricResults)
  return metricresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricResult >*
ProfileResult::mutable_metricresults() {
  // @@protoc_insertion_point(field_mutable_list:ProfileResult.MetricResults)
  return &metricresults_;
}
inline const ::ProfileMetricResult& ProfileResult::_internal_metricresults(int index) const {
  return metricresults_.Get(index);
}
inline const ::ProfileMetricResult& ProfileResult::metricresults(int index) const {
  // @@protoc_insertion_point(field_get:ProfileResult.MetricResults)
  return _internal_metricresults(index);
}
inline ::ProfileMetricResult* ProfileResult::_internal_add_metricresults() {
  return metricresults_.Add();
}
inline ::ProfileMetricResult* ProfileResult::add_metricresults() {
  // @@protoc_insertion_point(field_add:ProfileResult.MetricResults)
  return _internal_add_metricresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileMetricResult >&
ProfileResult::metricresults() const {
  // @@protoc_insertion_point(field_list:ProfileResult.MetricResults)
  return metricresults_;
}

// optional uint64 CreationTime = 14;
inline bool ProfileResult::_internal_has_creationtime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ProfileResult::has_creationtime() const {
  return _internal_has_creationtime();
}
inline void ProfileResult::clear_creationtime() {
  creationtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::_internal_creationtime() const {
  return creationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProfileResult::creationtime() const {
  // @@protoc_insertion_point(field_get:ProfileResult.CreationTime)
  return _internal_creationtime();
}
inline void ProfileResult::_internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  creationtime_ = value;
}
inline void ProfileResult::set_creationtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creationtime(value);
  // @@protoc_insertion_point(field_set:ProfileResult.CreationTime)
}

// required .SourceData Source = 15;
inline bool ProfileResult::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool ProfileResult::has_source() const {
  return _internal_has_source();
}
inline const ::SourceData& ProfileResult::_internal_source() const {
  const ::SourceData* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::SourceData&>(
      ::_SourceData_default_instance_);
}
inline const ::SourceData& ProfileResult::source() const {
  // @@protoc_insertion_point(field_get:ProfileResult.Source)
  return _internal_source();
}
inline void ProfileResult::unsafe_arena_set_allocated_source(
    ::SourceData* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.Source)
}
inline ::SourceData* ProfileResult::release_source() {
  _has_bits_[0] &= ~0x00000080u;
  ::SourceData* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SourceData* ProfileResult::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:ProfileResult.Source)
  _has_bits_[0] &= ~0x00000080u;
  ::SourceData* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::SourceData* ProfileResult::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000080u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::SourceData>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::SourceData* ProfileResult::mutable_source() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.Source)
  return _internal_mutable_source();
}
inline void ProfileResult::set_allocated_source(::SourceData* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source)->GetArena();
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.Source)
}

// optional .APIType Api = 16;
inline bool ProfileResult::_internal_has_api() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ProfileResult::has_api() const {
  return _internal_has_api();
}
inline void ProfileResult::clear_api() {
  api_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::APIType ProfileResult::_internal_api() const {
  return static_cast< ::APIType >(api_);
}
inline ::APIType ProfileResult::api() const {
  // @@protoc_insertion_point(field_get:ProfileResult.Api)
  return _internal_api();
}
inline void ProfileResult::_internal_set_api(::APIType value) {
  assert(::APIType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  api_ = value;
}
inline void ProfileResult::set_api(::APIType value) {
  _internal_set_api(value);
  // @@protoc_insertion_point(field_set:ProfileResult.Api)
}

// repeated .ProfilerSection Sections = 17;
inline int ProfileResult::_internal_sections_size() const {
  return sections_.size();
}
inline int ProfileResult::sections_size() const {
  return _internal_sections_size();
}
inline ::ProfilerSection* ProfileResult::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileResult.Sections)
  return sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >*
ProfileResult::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:ProfileResult.Sections)
  return &sections_;
}
inline const ::ProfilerSection& ProfileResult::_internal_sections(int index) const {
  return sections_.Get(index);
}
inline const ::ProfilerSection& ProfileResult::sections(int index) const {
  // @@protoc_insertion_point(field_get:ProfileResult.Sections)
  return _internal_sections(index);
}
inline ::ProfilerSection* ProfileResult::_internal_add_sections() {
  return sections_.Add();
}
inline ::ProfilerSection* ProfileResult::add_sections() {
  // @@protoc_insertion_point(field_add:ProfileResult.Sections)
  return _internal_add_sections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfilerSection >&
ProfileResult::sections() const {
  // @@protoc_insertion_point(field_list:ProfileResult.Sections)
  return sections_;
}

// repeated .Comment SectionComments = 18;
inline int ProfileResult::_internal_sectioncomments_size() const {
  return sectioncomments_.size();
}
inline int ProfileResult::sectioncomments_size() const {
  return _internal_sectioncomments_size();
}
inline void ProfileResult::clear_sectioncomments() {
  sectioncomments_.Clear();
}
inline ::Comment* ProfileResult::mutable_sectioncomments(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileResult.SectionComments)
  return sectioncomments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Comment >*
ProfileResult::mutable_sectioncomments() {
  // @@protoc_insertion_point(field_mutable_list:ProfileResult.SectionComments)
  return &sectioncomments_;
}
inline const ::Comment& ProfileResult::_internal_sectioncomments(int index) const {
  return sectioncomments_.Get(index);
}
inline const ::Comment& ProfileResult::sectioncomments(int index) const {
  // @@protoc_insertion_point(field_get:ProfileResult.SectionComments)
  return _internal_sectioncomments(index);
}
inline ::Comment* ProfileResult::_internal_add_sectioncomments() {
  return sectioncomments_.Add();
}
inline ::Comment* ProfileResult::add_sectioncomments() {
  // @@protoc_insertion_point(field_add:ProfileResult.SectionComments)
  return _internal_add_sectioncomments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Comment >&
ProfileResult::sectioncomments() const {
  // @@protoc_insertion_point(field_list:ProfileResult.SectionComments)
  return sectioncomments_;
}

// repeated .RuleResult RuleResults = 19;
inline int ProfileResult::_internal_ruleresults_size() const {
  return ruleresults_.size();
}
inline int ProfileResult::ruleresults_size() const {
  return _internal_ruleresults_size();
}
inline ::RuleResult* ProfileResult::mutable_ruleresults(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileResult.RuleResults)
  return ruleresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >*
ProfileResult::mutable_ruleresults() {
  // @@protoc_insertion_point(field_mutable_list:ProfileResult.RuleResults)
  return &ruleresults_;
}
inline const ::RuleResult& ProfileResult::_internal_ruleresults(int index) const {
  return ruleresults_.Get(index);
}
inline const ::RuleResult& ProfileResult::ruleresults(int index) const {
  // @@protoc_insertion_point(field_get:ProfileResult.RuleResults)
  return _internal_ruleresults(index);
}
inline ::RuleResult* ProfileResult::_internal_add_ruleresults() {
  return ruleresults_.Add();
}
inline ::RuleResult* ProfileResult::add_ruleresults() {
  // @@protoc_insertion_point(field_add:ProfileResult.RuleResults)
  return _internal_add_ruleresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >&
ProfileResult::ruleresults() const {
  // @@protoc_insertion_point(field_list:ProfileResult.RuleResults)
  return ruleresults_;
}

// optional bool UnsupportedDevice = 20;
inline bool ProfileResult::_internal_has_unsupporteddevice() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ProfileResult::has_unsupporteddevice() const {
  return _internal_has_unsupporteddevice();
}
inline void ProfileResult::clear_unsupporteddevice() {
  unsupporteddevice_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ProfileResult::_internal_unsupporteddevice() const {
  return unsupporteddevice_;
}
inline bool ProfileResult::unsupporteddevice() const {
  // @@protoc_insertion_point(field_get:ProfileResult.UnsupportedDevice)
  return _internal_unsupporteddevice();
}
inline void ProfileResult::_internal_set_unsupporteddevice(bool value) {
  _has_bits_[0] |= 0x00020000u;
  unsupporteddevice_ = value;
}
inline void ProfileResult::set_unsupporteddevice(bool value) {
  _internal_set_unsupporteddevice(value);
  // @@protoc_insertion_point(field_set:ProfileResult.UnsupportedDevice)
}

// optional .NvtxState Nvtx = 21;
inline bool ProfileResult::_internal_has_nvtx() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || nvtx_ != nullptr);
  return value;
}
inline bool ProfileResult::has_nvtx() const {
  return _internal_has_nvtx();
}
inline const ::NvtxState& ProfileResult::_internal_nvtx() const {
  const ::NvtxState* p = nvtx_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtxState&>(
      ::_NvtxState_default_instance_);
}
inline const ::NvtxState& ProfileResult::nvtx() const {
  // @@protoc_insertion_point(field_get:ProfileResult.Nvtx)
  return _internal_nvtx();
}
inline void ProfileResult::unsafe_arena_set_allocated_nvtx(
    ::NvtxState* nvtx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvtx_);
  }
  nvtx_ = nvtx;
  if (nvtx) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.Nvtx)
}
inline ::NvtxState* ProfileResult::release_nvtx() {
  _has_bits_[0] &= ~0x00000100u;
  ::NvtxState* temp = nvtx_;
  nvtx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NvtxState* ProfileResult::unsafe_arena_release_nvtx() {
  // @@protoc_insertion_point(field_release:ProfileResult.Nvtx)
  _has_bits_[0] &= ~0x00000100u;
  ::NvtxState* temp = nvtx_;
  nvtx_ = nullptr;
  return temp;
}
inline ::NvtxState* ProfileResult::_internal_mutable_nvtx() {
  _has_bits_[0] |= 0x00000100u;
  if (nvtx_ == nullptr) {
    auto* p = CreateMaybeMessage<::NvtxState>(GetArena());
    nvtx_ = p;
  }
  return nvtx_;
}
inline ::NvtxState* ProfileResult::mutable_nvtx() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.Nvtx)
  return _internal_mutable_nvtx();
}
inline void ProfileResult::set_allocated_nvtx(::NvtxState* nvtx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvtx_);
  }
  if (nvtx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvtx)->GetArena();
    if (message_arena != submessage_arena) {
      nvtx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvtx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  nvtx_ = nvtx;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.Nvtx)
}

// optional uint32 ContextID = 22;
inline bool ProfileResult::_internal_has_contextid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ProfileResult::has_contextid() const {
  return _internal_has_contextid();
}
inline void ProfileResult::clear_contextid() {
  contextid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::_internal_contextid() const {
  return contextid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::contextid() const {
  // @@protoc_insertion_point(field_get:ProfileResult.ContextID)
  return _internal_contextid();
}
inline void ProfileResult::_internal_set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  contextid_ = value;
}
inline void ProfileResult::set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contextid(value);
  // @@protoc_insertion_point(field_set:ProfileResult.ContextID)
}

// optional uint32 StreamID = 23;
inline bool ProfileResult::_internal_has_streamid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ProfileResult::has_streamid() const {
  return _internal_has_streamid();
}
inline void ProfileResult::clear_streamid() {
  streamid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::_internal_streamid() const {
  return streamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileResult::streamid() const {
  // @@protoc_insertion_point(field_get:ProfileResult.StreamID)
  return _internal_streamid();
}
inline void ProfileResult::_internal_set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  streamid_ = value;
}
inline void ProfileResult::set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:ProfileResult.StreamID)
}

// optional .ProfileSeriesInfoMessage SeriesInfo = 24;
inline bool ProfileResult::_internal_has_seriesinfo() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || seriesinfo_ != nullptr);
  return value;
}
inline bool ProfileResult::has_seriesinfo() const {
  return _internal_has_seriesinfo();
}
inline void ProfileResult::clear_seriesinfo() {
  if (seriesinfo_ != nullptr) seriesinfo_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ProfileSeriesInfoMessage& ProfileResult::_internal_seriesinfo() const {
  const ::ProfileSeriesInfoMessage* p = seriesinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileSeriesInfoMessage&>(
      ::_ProfileSeriesInfoMessage_default_instance_);
}
inline const ::ProfileSeriesInfoMessage& ProfileResult::seriesinfo() const {
  // @@protoc_insertion_point(field_get:ProfileResult.SeriesInfo)
  return _internal_seriesinfo();
}
inline void ProfileResult::unsafe_arena_set_allocated_seriesinfo(
    ::ProfileSeriesInfoMessage* seriesinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seriesinfo_);
  }
  seriesinfo_ = seriesinfo;
  if (seriesinfo) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProfileResult.SeriesInfo)
}
inline ::ProfileSeriesInfoMessage* ProfileResult::release_seriesinfo() {
  _has_bits_[0] &= ~0x00000200u;
  ::ProfileSeriesInfoMessage* temp = seriesinfo_;
  seriesinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfileSeriesInfoMessage* ProfileResult::unsafe_arena_release_seriesinfo() {
  // @@protoc_insertion_point(field_release:ProfileResult.SeriesInfo)
  _has_bits_[0] &= ~0x00000200u;
  ::ProfileSeriesInfoMessage* temp = seriesinfo_;
  seriesinfo_ = nullptr;
  return temp;
}
inline ::ProfileSeriesInfoMessage* ProfileResult::_internal_mutable_seriesinfo() {
  _has_bits_[0] |= 0x00000200u;
  if (seriesinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileSeriesInfoMessage>(GetArena());
    seriesinfo_ = p;
  }
  return seriesinfo_;
}
inline ::ProfileSeriesInfoMessage* ProfileResult::mutable_seriesinfo() {
  // @@protoc_insertion_point(field_mutable:ProfileResult.SeriesInfo)
  return _internal_mutable_seriesinfo();
}
inline void ProfileResult::set_allocated_seriesinfo(::ProfileSeriesInfoMessage* seriesinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete seriesinfo_;
  }
  if (seriesinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seriesinfo);
    if (message_arena != submessage_arena) {
      seriesinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seriesinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  seriesinfo_ = seriesinfo;
  // @@protoc_insertion_point(field_set_allocated:ProfileResult.SeriesInfo)
}

// -------------------------------------------------------------------

// ProcessInfo

// required uint32 ProcessID = 1;
inline bool ProcessInfo::_internal_has_processid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProcessInfo::has_processid() const {
  return _internal_has_processid();
}
inline void ProcessInfo::clear_processid() {
  processid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessInfo::_internal_processid() const {
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessInfo::processid() const {
  // @@protoc_insertion_point(field_get:ProcessInfo.ProcessID)
  return _internal_processid();
}
inline void ProcessInfo::_internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  processid_ = value;
}
inline void ProcessInfo::set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:ProcessInfo.ProcessID)
}

// optional string Hostname = 2;
inline bool ProcessInfo::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessInfo::has_hostname() const {
  return _internal_has_hostname();
}
inline void ProcessInfo::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessInfo::hostname() const {
  // @@protoc_insertion_point(field_get:ProcessInfo.Hostname)
  return _internal_hostname();
}
inline void ProcessInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ProcessInfo.Hostname)
}
inline std::string* ProcessInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ProcessInfo.Hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ProcessInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void ProcessInfo::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProcessInfo::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProcessInfo.Hostname)
}
inline void ProcessInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProcessInfo.Hostname)
}
inline void ProcessInfo::set_hostname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProcessInfo.Hostname)
}
inline std::string* ProcessInfo::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProcessInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:ProcessInfo.Hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProcessInfo.Hostname)
}

// optional string ProcessName = 3;
inline bool ProcessInfo::_internal_has_processname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessInfo::has_processname() const {
  return _internal_has_processname();
}
inline void ProcessInfo::clear_processname() {
  processname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProcessInfo::processname() const {
  // @@protoc_insertion_point(field_get:ProcessInfo.ProcessName)
  return _internal_processname();
}
inline void ProcessInfo::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:ProcessInfo.ProcessName)
}
inline std::string* ProcessInfo::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:ProcessInfo.ProcessName)
  return _internal_mutable_processname();
}
inline const std::string& ProcessInfo::_internal_processname() const {
  return processname_.Get();
}
inline void ProcessInfo::_internal_set_processname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  processname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProcessInfo::set_processname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  processname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProcessInfo.ProcessName)
}
inline void ProcessInfo::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  processname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProcessInfo.ProcessName)
}
inline void ProcessInfo::set_processname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  processname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProcessInfo.ProcessName)
}
inline std::string* ProcessInfo::_internal_mutable_processname() {
  _has_bits_[0] |= 0x00000002u;
  return processname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProcessInfo::release_processname() {
  // @@protoc_insertion_point(field_release:ProcessInfo.ProcessName)
  if (!_internal_has_processname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return processname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProcessInfo.ProcessName)
}

// -------------------------------------------------------------------

// BlockHeader

// optional uint32 NumSources = 1;
inline bool BlockHeader::_internal_has_numsources() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlockHeader::has_numsources() const {
  return _internal_has_numsources();
}
inline void BlockHeader::clear_numsources() {
  numsources_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_numsources() const {
  return numsources_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::numsources() const {
  // @@protoc_insertion_point(field_get:BlockHeader.NumSources)
  return _internal_numsources();
}
inline void BlockHeader::_internal_set_numsources(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  numsources_ = value;
}
inline void BlockHeader::set_numsources(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numsources(value);
  // @@protoc_insertion_point(field_set:BlockHeader.NumSources)
}

// optional uint32 NumResults = 2;
inline bool BlockHeader::_internal_has_numresults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlockHeader::has_numresults() const {
  return _internal_has_numresults();
}
inline void BlockHeader::clear_numresults() {
  numresults_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_numresults() const {
  return numresults_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::numresults() const {
  // @@protoc_insertion_point(field_get:BlockHeader.NumResults)
  return _internal_numresults();
}
inline void BlockHeader::_internal_set_numresults(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  numresults_ = value;
}
inline void BlockHeader::set_numresults(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numresults(value);
  // @@protoc_insertion_point(field_set:BlockHeader.NumResults)
}

// optional .ReportSessionDetails SessionDetails = 3;
inline bool BlockHeader::_internal_has_sessiondetails() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sessiondetails_ != nullptr);
  return value;
}
inline bool BlockHeader::has_sessiondetails() const {
  return _internal_has_sessiondetails();
}
inline void BlockHeader::clear_sessiondetails() {
  if (sessiondetails_ != nullptr) sessiondetails_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ReportSessionDetails& BlockHeader::_internal_sessiondetails() const {
  const ::ReportSessionDetails* p = sessiondetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::ReportSessionDetails&>(
      ::_ReportSessionDetails_default_instance_);
}
inline const ::ReportSessionDetails& BlockHeader::sessiondetails() const {
  // @@protoc_insertion_point(field_get:BlockHeader.SessionDetails)
  return _internal_sessiondetails();
}
inline void BlockHeader::unsafe_arena_set_allocated_sessiondetails(
    ::ReportSessionDetails* sessiondetails) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sessiondetails_);
  }
  sessiondetails_ = sessiondetails;
  if (sessiondetails) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockHeader.SessionDetails)
}
inline ::ReportSessionDetails* BlockHeader::release_sessiondetails() {
  _has_bits_[0] &= ~0x00000001u;
  ::ReportSessionDetails* temp = sessiondetails_;
  sessiondetails_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ReportSessionDetails* BlockHeader::unsafe_arena_release_sessiondetails() {
  // @@protoc_insertion_point(field_release:BlockHeader.SessionDetails)
  _has_bits_[0] &= ~0x00000001u;
  ::ReportSessionDetails* temp = sessiondetails_;
  sessiondetails_ = nullptr;
  return temp;
}
inline ::ReportSessionDetails* BlockHeader::_internal_mutable_sessiondetails() {
  _has_bits_[0] |= 0x00000001u;
  if (sessiondetails_ == nullptr) {
    auto* p = CreateMaybeMessage<::ReportSessionDetails>(GetArena());
    sessiondetails_ = p;
  }
  return sessiondetails_;
}
inline ::ReportSessionDetails* BlockHeader::mutable_sessiondetails() {
  // @@protoc_insertion_point(field_mutable:BlockHeader.SessionDetails)
  return _internal_mutable_sessiondetails();
}
inline void BlockHeader::set_allocated_sessiondetails(::ReportSessionDetails* sessiondetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sessiondetails_;
  }
  if (sessiondetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sessiondetails);
    if (message_arena != submessage_arena) {
      sessiondetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessiondetails, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sessiondetails_ = sessiondetails;
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.SessionDetails)
}

// optional .ProfilerStringTable StringTable = 4;
inline bool BlockHeader::_internal_has_stringtable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stringtable_ != nullptr);
  return value;
}
inline bool BlockHeader::has_stringtable() const {
  return _internal_has_stringtable();
}
inline const ::ProfilerStringTable& BlockHeader::_internal_stringtable() const {
  const ::ProfilerStringTable* p = stringtable_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerStringTable&>(
      ::_ProfilerStringTable_default_instance_);
}
inline const ::ProfilerStringTable& BlockHeader::stringtable() const {
  // @@protoc_insertion_point(field_get:BlockHeader.StringTable)
  return _internal_stringtable();
}
inline void BlockHeader::unsafe_arena_set_allocated_stringtable(
    ::ProfilerStringTable* stringtable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable_);
  }
  stringtable_ = stringtable;
  if (stringtable) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockHeader.StringTable)
}
inline ::ProfilerStringTable* BlockHeader::release_stringtable() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerStringTable* temp = stringtable_;
  stringtable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerStringTable* BlockHeader::unsafe_arena_release_stringtable() {
  // @@protoc_insertion_point(field_release:BlockHeader.StringTable)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerStringTable* temp = stringtable_;
  stringtable_ = nullptr;
  return temp;
}
inline ::ProfilerStringTable* BlockHeader::_internal_mutable_stringtable() {
  _has_bits_[0] |= 0x00000002u;
  if (stringtable_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerStringTable>(GetArena());
    stringtable_ = p;
  }
  return stringtable_;
}
inline ::ProfilerStringTable* BlockHeader::mutable_stringtable() {
  // @@protoc_insertion_point(field_mutable:BlockHeader.StringTable)
  return _internal_mutable_stringtable();
}
inline void BlockHeader::set_allocated_stringtable(::ProfilerStringTable* stringtable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable_);
  }
  if (stringtable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable)->GetArena();
    if (message_arena != submessage_arena) {
      stringtable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringtable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stringtable_ = stringtable;
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.StringTable)
}

// optional uint32 PayloadSize = 5;
inline bool BlockHeader::_internal_has_payloadsize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlockHeader::has_payloadsize() const {
  return _internal_has_payloadsize();
}
inline void BlockHeader::clear_payloadsize() {
  payloadsize_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_payloadsize() const {
  return payloadsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::payloadsize() const {
  // @@protoc_insertion_point(field_get:BlockHeader.PayloadSize)
  return _internal_payloadsize();
}
inline void BlockHeader::_internal_set_payloadsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  payloadsize_ = value;
}
inline void BlockHeader::set_payloadsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_payloadsize(value);
  // @@protoc_insertion_point(field_set:BlockHeader.PayloadSize)
}

// optional .ProcessInfo Process = 6;
inline bool BlockHeader::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_ != nullptr);
  return value;
}
inline bool BlockHeader::has_process() const {
  return _internal_has_process();
}
inline void BlockHeader::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProcessInfo& BlockHeader::_internal_process() const {
  const ::ProcessInfo* p = process_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProcessInfo&>(
      ::_ProcessInfo_default_instance_);
}
inline const ::ProcessInfo& BlockHeader::process() const {
  // @@protoc_insertion_point(field_get:BlockHeader.Process)
  return _internal_process();
}
inline void BlockHeader::unsafe_arena_set_allocated_process(
    ::ProcessInfo* process) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  process_ = process;
  if (process) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockHeader.Process)
}
inline ::ProcessInfo* BlockHeader::release_process() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProcessInfo* temp = process_;
  process_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProcessInfo* BlockHeader::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:BlockHeader.Process)
  _has_bits_[0] &= ~0x00000004u;
  ::ProcessInfo* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::ProcessInfo* BlockHeader::_internal_mutable_process() {
  _has_bits_[0] |= 0x00000004u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProcessInfo>(GetArena());
    process_ = p;
  }
  return process_;
}
inline ::ProcessInfo* BlockHeader::mutable_process() {
  // @@protoc_insertion_point(field_mutable:BlockHeader.Process)
  return _internal_mutable_process();
}
inline void BlockHeader::set_allocated_process(::ProcessInfo* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.Process)
}

// -------------------------------------------------------------------

// FileHeader

// required uint32 Version = 1;
inline bool FileHeader::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileHeader::has_version() const {
  return _internal_has_version();
}
inline void FileHeader::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileHeader::version() const {
  // @@protoc_insertion_point(field_get:FileHeader.Version)
  return _internal_version();
}
inline void FileHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void FileHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:FileHeader.Version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PlatformType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlatformType>() {
  return ::PlatformType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProfilerReport_2eproto
