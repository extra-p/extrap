// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfilerCommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProfilerCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProfilerCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProfilerCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProfilerCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProfilerCommon_2eproto;
class LaunchData;
class LaunchDataDefaultTypeInternal;
extern LaunchDataDefaultTypeInternal _LaunchData_default_instance_;
class SourceData;
class SourceDataDefaultTypeInternal;
extern SourceDataDefaultTypeInternal _SourceData_default_instance_;
class Uint64x3;
class Uint64x3DefaultTypeInternal;
extern Uint64x3DefaultTypeInternal _Uint64x3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LaunchData* Arena::CreateMaybeMessage<::LaunchData>(Arena*);
template<> ::SourceData* Arena::CreateMaybeMessage<::SourceData>(Arena*);
template<> ::Uint64x3* Arena::CreateMaybeMessage<::Uint64x3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum APIType : int {
  APIType_CUDA = 0,
  APIType_OpenCL = 1,
  APIType_Direct3D = 2,
  APIType_OpenGL = 3
};
bool APIType_IsValid(int value);
constexpr APIType APIType_MIN = APIType_CUDA;
constexpr APIType APIType_MAX = APIType_OpenGL;
constexpr int APIType_ARRAYSIZE = APIType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIType_descriptor();
template<typename T>
inline const std::string& APIType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APIType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APIType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APIType_descriptor(), enum_t_value);
}
inline bool APIType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, APIType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APIType>(
    APIType_descriptor(), name, value);
}
enum SourceSassLevel : int {
  SourceSassLevel_Unset = 0,
  SourceSassLevel_Sass1 = 1,
  SourceSassLevel_Sass2 = 2,
  SourceSassLevel_Sass3 = 3,
  SourceSassLevel_Sass4 = 4,
  SourceSassLevel_Sass5 = 5,
  SourceSassLevel_Sass6 = 6,
  SourceSassLevel_Sass7 = 7
};
bool SourceSassLevel_IsValid(int value);
constexpr SourceSassLevel SourceSassLevel_MIN = SourceSassLevel_Unset;
constexpr SourceSassLevel SourceSassLevel_MAX = SourceSassLevel_Sass7;
constexpr int SourceSassLevel_ARRAYSIZE = SourceSassLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceSassLevel_descriptor();
template<typename T>
inline const std::string& SourceSassLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceSassLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceSassLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceSassLevel_descriptor(), enum_t_value);
}
inline bool SourceSassLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceSassLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceSassLevel>(
    SourceSassLevel_descriptor(), name, value);
}
// ===================================================================

class Uint64x3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uint64x3) */ {
 public:
  inline Uint64x3() : Uint64x3(nullptr) {}
  virtual ~Uint64x3();

  Uint64x3(const Uint64x3& from);
  Uint64x3(Uint64x3&& from) noexcept
    : Uint64x3() {
    *this = ::std::move(from);
  }

  inline Uint64x3& operator=(const Uint64x3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint64x3& operator=(Uint64x3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uint64x3& default_instance();

  static inline const Uint64x3* internal_default_instance() {
    return reinterpret_cast<const Uint64x3*>(
               &_Uint64x3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uint64x3& a, Uint64x3& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint64x3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint64x3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint64x3* New() const final {
    return CreateMaybeMessage<Uint64x3>(nullptr);
  }

  Uint64x3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint64x3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uint64x3& from);
  void MergeFrom(const Uint64x3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64x3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uint64x3";
  }
  protected:
  explicit Uint64x3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerCommon_2eproto);
    return ::descriptor_table_ProfilerCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional uint64 X = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint64 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 Y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint64 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 Z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::uint64 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Uint64x3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 x_;
  ::PROTOBUF_NAMESPACE_ID::uint64 y_;
  ::PROTOBUF_NAMESPACE_ID::uint64 z_;
  friend struct ::TableStruct_ProfilerCommon_2eproto;
};
// -------------------------------------------------------------------

class LaunchData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LaunchData) */ {
 public:
  inline LaunchData() : LaunchData(nullptr) {}
  virtual ~LaunchData();

  LaunchData(const LaunchData& from);
  LaunchData(LaunchData&& from) noexcept
    : LaunchData() {
    *this = ::std::move(from);
  }

  inline LaunchData& operator=(const LaunchData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchData& operator=(LaunchData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchData& default_instance();

  static inline const LaunchData* internal_default_instance() {
    return reinterpret_cast<const LaunchData*>(
               &_LaunchData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaunchData& a, LaunchData& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchData* New() const final {
    return CreateMaybeMessage<LaunchData>(nullptr);
  }

  LaunchData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchData& from);
  void MergeFrom(const LaunchData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LaunchData";
  }
  protected:
  explicit LaunchData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerCommon_2eproto);
    return ::descriptor_table_ProfilerCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelMangledNameFieldNumber = 7,
    kKernelFunctionNameFieldNumber = 8,
    kKernelDemangledNameFieldNumber = 9,
    kGlobalWorkOffsetFieldNumber = 14,
    kGlobalWorkSizeFieldNumber = 15,
    kLocalWorkSizeFieldNumber = 16,
    kProcessIDFieldNumber = 2,
    kThreadIDFieldNumber = 3,
    kAPICallIDFieldNumber = 4,
    kKernelIDFieldNumber = 6,
    kAPIFieldNumber = 5,
    kWorkDimensionsFieldNumber = 13,
    kProgramHandleFieldNumber = 10,
    kContextHandleFieldNumber = 11,
    kDeviceIDFieldNumber = 12,
    kContextIDFieldNumber = 17,
    kStreamIDFieldNumber = 18,
  };
  // required string KernelMangledName = 7;
  bool has_kernelmangledname() const;
  private:
  bool _internal_has_kernelmangledname() const;
  public:
  void clear_kernelmangledname();
  const std::string& kernelmangledname() const;
  void set_kernelmangledname(const std::string& value);
  void set_kernelmangledname(std::string&& value);
  void set_kernelmangledname(const char* value);
  void set_kernelmangledname(const char* value, size_t size);
  std::string* mutable_kernelmangledname();
  std::string* release_kernelmangledname();
  void set_allocated_kernelmangledname(std::string* kernelmangledname);
  private:
  const std::string& _internal_kernelmangledname() const;
  void _internal_set_kernelmangledname(const std::string& value);
  std::string* _internal_mutable_kernelmangledname();
  public:

  // required string KernelFunctionName = 8;
  bool has_kernelfunctionname() const;
  private:
  bool _internal_has_kernelfunctionname() const;
  public:
  void clear_kernelfunctionname();
  const std::string& kernelfunctionname() const;
  void set_kernelfunctionname(const std::string& value);
  void set_kernelfunctionname(std::string&& value);
  void set_kernelfunctionname(const char* value);
  void set_kernelfunctionname(const char* value, size_t size);
  std::string* mutable_kernelfunctionname();
  std::string* release_kernelfunctionname();
  void set_allocated_kernelfunctionname(std::string* kernelfunctionname);
  private:
  const std::string& _internal_kernelfunctionname() const;
  void _internal_set_kernelfunctionname(const std::string& value);
  std::string* _internal_mutable_kernelfunctionname();
  public:

  // required string KernelDemangledName = 9;
  bool has_kerneldemangledname() const;
  private:
  bool _internal_has_kerneldemangledname() const;
  public:
  void clear_kerneldemangledname();
  const std::string& kerneldemangledname() const;
  void set_kerneldemangledname(const std::string& value);
  void set_kerneldemangledname(std::string&& value);
  void set_kerneldemangledname(const char* value);
  void set_kerneldemangledname(const char* value, size_t size);
  std::string* mutable_kerneldemangledname();
  std::string* release_kerneldemangledname();
  void set_allocated_kerneldemangledname(std::string* kerneldemangledname);
  private:
  const std::string& _internal_kerneldemangledname() const;
  void _internal_set_kerneldemangledname(const std::string& value);
  std::string* _internal_mutable_kerneldemangledname();
  public:

  // required .Uint64x3 GlobalWorkOffset = 14;
  bool has_globalworkoffset() const;
  private:
  bool _internal_has_globalworkoffset() const;
  public:
  void clear_globalworkoffset();
  const ::Uint64x3& globalworkoffset() const;
  ::Uint64x3* release_globalworkoffset();
  ::Uint64x3* mutable_globalworkoffset();
  void set_allocated_globalworkoffset(::Uint64x3* globalworkoffset);
  private:
  const ::Uint64x3& _internal_globalworkoffset() const;
  ::Uint64x3* _internal_mutable_globalworkoffset();
  public:
  void unsafe_arena_set_allocated_globalworkoffset(
      ::Uint64x3* globalworkoffset);
  ::Uint64x3* unsafe_arena_release_globalworkoffset();

  // required .Uint64x3 GlobalWorkSize = 15;
  bool has_globalworksize() const;
  private:
  bool _internal_has_globalworksize() const;
  public:
  void clear_globalworksize();
  const ::Uint64x3& globalworksize() const;
  ::Uint64x3* release_globalworksize();
  ::Uint64x3* mutable_globalworksize();
  void set_allocated_globalworksize(::Uint64x3* globalworksize);
  private:
  const ::Uint64x3& _internal_globalworksize() const;
  ::Uint64x3* _internal_mutable_globalworksize();
  public:
  void unsafe_arena_set_allocated_globalworksize(
      ::Uint64x3* globalworksize);
  ::Uint64x3* unsafe_arena_release_globalworksize();

  // required .Uint64x3 LocalWorkSize = 16;
  bool has_localworksize() const;
  private:
  bool _internal_has_localworksize() const;
  public:
  void clear_localworksize();
  const ::Uint64x3& localworksize() const;
  ::Uint64x3* release_localworksize();
  ::Uint64x3* mutable_localworksize();
  void set_allocated_localworksize(::Uint64x3* localworksize);
  private:
  const ::Uint64x3& _internal_localworksize() const;
  ::Uint64x3* _internal_mutable_localworksize();
  public:
  void unsafe_arena_set_allocated_localworksize(
      ::Uint64x3* localworksize);
  ::Uint64x3* unsafe_arena_release_localworksize();

  // required uint32 ProcessID = 2;
  bool has_processid() const;
  private:
  bool _internal_has_processid() const;
  public:
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::uint32 processid() const;
  void set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processid() const;
  void _internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ThreadID = 3;
  bool has_threadid() const;
  private:
  bool _internal_has_threadid() const;
  public:
  void clear_threadid();
  ::PROTOBUF_NAMESPACE_ID::uint32 threadid() const;
  void set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_threadid() const;
  void _internal_set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 APICallID = 4;
  bool has_apicallid() const;
  private:
  bool _internal_has_apicallid() const;
  public:
  void clear_apicallid();
  ::PROTOBUF_NAMESPACE_ID::uint64 apicallid() const;
  void set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_apicallid() const;
  void _internal_set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 KernelID = 6;
  bool has_kernelid() const;
  private:
  bool _internal_has_kernelid() const;
  public:
  void clear_kernelid();
  ::PROTOBUF_NAMESPACE_ID::uint64 kernelid() const;
  void set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_kernelid() const;
  void _internal_set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .APIType API = 5;
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  ::APIType api() const;
  void set_api(::APIType value);
  private:
  ::APIType _internal_api() const;
  void _internal_set_api(::APIType value);
  public:

  // required uint32 WorkDimensions = 13;
  bool has_workdimensions() const;
  private:
  bool _internal_has_workdimensions() const;
  public:
  void clear_workdimensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 workdimensions() const;
  void set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_workdimensions() const;
  void _internal_set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 ProgramHandle = 10;
  bool has_programhandle() const;
  private:
  bool _internal_has_programhandle() const;
  public:
  void clear_programhandle();
  ::PROTOBUF_NAMESPACE_ID::uint64 programhandle() const;
  void set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_programhandle() const;
  void _internal_set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 ContextHandle = 11;
  bool has_contexthandle() const;
  private:
  bool _internal_has_contexthandle() const;
  public:
  void clear_contexthandle();
  ::PROTOBUF_NAMESPACE_ID::uint64 contexthandle() const;
  void set_contexthandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contexthandle() const;
  void _internal_set_contexthandle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 DeviceID = 12;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ContextID = 17;
  bool has_contextid() const;
  private:
  bool _internal_has_contextid() const;
  public:
  void clear_contextid();
  ::PROTOBUF_NAMESPACE_ID::uint32 contextid() const;
  void set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contextid() const;
  void _internal_set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 StreamID = 18;
  bool has_streamid() const;
  private:
  bool _internal_has_streamid() const;
  public:
  void clear_streamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 streamid() const;
  void set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_streamid() const;
  void _internal_set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LaunchData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelmangledname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelfunctionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kerneldemangledname_;
  ::Uint64x3* globalworkoffset_;
  ::Uint64x3* globalworksize_;
  ::Uint64x3* localworksize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 threadid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 apicallid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kernelid_;
  int api_;
  ::PROTOBUF_NAMESPACE_ID::uint32 workdimensions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 programhandle_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contexthandle_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contextid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 streamid_;
  friend struct ::TableStruct_ProfilerCommon_2eproto;
};
// -------------------------------------------------------------------

class SourceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SourceData) */ {
 public:
  inline SourceData() : SourceData(nullptr) {}
  virtual ~SourceData();

  SourceData(const SourceData& from);
  SourceData(SourceData&& from) noexcept
    : SourceData() {
    *this = ::std::move(from);
  }

  inline SourceData& operator=(const SourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceData& operator=(SourceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceData& default_instance();

  static inline const SourceData* internal_default_instance() {
    return reinterpret_cast<const SourceData*>(
               &_SourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SourceData& a, SourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceData* New() const final {
    return CreateMaybeMessage<SourceData>(nullptr);
  }

  SourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceData& from);
  void MergeFrom(const SourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SourceData";
  }
  protected:
  explicit SourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProfilerCommon_2eproto);
    return ::descriptor_table_ProfilerCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kIntermediateFieldNumber = 3,
    kBinaryFieldNumber = 4,
    kReferenceFieldNumber = 1,
    kSassLevelFieldNumber = 5,
    kSMRevisionFieldNumber = 6,
    kBinaryFlagsFieldNumber = 7,
  };
  // optional string Code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional bytes Intermediate = 3;
  bool has_intermediate() const;
  private:
  bool _internal_has_intermediate() const;
  public:
  void clear_intermediate();
  const std::string& intermediate() const;
  void set_intermediate(const std::string& value);
  void set_intermediate(std::string&& value);
  void set_intermediate(const char* value);
  void set_intermediate(const void* value, size_t size);
  std::string* mutable_intermediate();
  std::string* release_intermediate();
  void set_allocated_intermediate(std::string* intermediate);
  private:
  const std::string& _internal_intermediate() const;
  void _internal_set_intermediate(const std::string& value);
  std::string* _internal_mutable_intermediate();
  public:

  // optional bytes Binary = 4;
  bool has_binary() const;
  private:
  bool _internal_has_binary() const;
  public:
  void clear_binary();
  const std::string& binary() const;
  void set_binary(const std::string& value);
  void set_binary(std::string&& value);
  void set_binary(const char* value);
  void set_binary(const void* value, size_t size);
  std::string* mutable_binary();
  std::string* release_binary();
  void set_allocated_binary(std::string* binary);
  private:
  const std::string& _internal_binary() const;
  void _internal_set_binary(const std::string& value);
  std::string* _internal_mutable_binary();
  public:

  // optional uint64 Reference = 1;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  ::PROTOBUF_NAMESPACE_ID::uint64 reference() const;
  void set_reference(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reference() const;
  void _internal_set_reference(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .SourceSassLevel SassLevel = 5;
  bool has_sasslevel() const;
  private:
  bool _internal_has_sasslevel() const;
  public:
  void clear_sasslevel();
  ::SourceSassLevel sasslevel() const;
  void set_sasslevel(::SourceSassLevel value);
  private:
  ::SourceSassLevel _internal_sasslevel() const;
  void _internal_set_sasslevel(::SourceSassLevel value);
  public:

  // optional uint32 SMRevision = 6;
  bool has_smrevision() const;
  private:
  bool _internal_has_smrevision() const;
  public:
  void clear_smrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 smrevision() const;
  void set_smrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_smrevision() const;
  void _internal_set_smrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 BinaryFlags = 7;
  bool has_binaryflags() const;
  private:
  bool _internal_has_binaryflags() const;
  public:
  void clear_binaryflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 binaryflags() const;
  void set_binaryflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_binaryflags() const;
  void _internal_set_binaryflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intermediate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reference_;
  int sasslevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smrevision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 binaryflags_;
  friend struct ::TableStruct_ProfilerCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uint64x3

// optional uint64 X = 1;
inline bool Uint64x3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Uint64x3::has_x() const {
  return _internal_has_x();
}
inline void Uint64x3::clear_x() {
  x_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::x() const {
  // @@protoc_insertion_point(field_get:Uint64x3.X)
  return _internal_x();
}
inline void Uint64x3::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Uint64x3::set_x(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Uint64x3.X)
}

// optional uint64 Y = 2;
inline bool Uint64x3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Uint64x3::has_y() const {
  return _internal_has_y();
}
inline void Uint64x3::clear_y() {
  y_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::y() const {
  // @@protoc_insertion_point(field_get:Uint64x3.Y)
  return _internal_y();
}
inline void Uint64x3::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Uint64x3::set_y(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Uint64x3.Y)
}

// optional uint64 Z = 3;
inline bool Uint64x3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Uint64x3::has_z() const {
  return _internal_has_z();
}
inline void Uint64x3::clear_z() {
  z_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint64x3::z() const {
  // @@protoc_insertion_point(field_get:Uint64x3.Z)
  return _internal_z();
}
inline void Uint64x3::_internal_set_z(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Uint64x3::set_z(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Uint64x3.Z)
}

// -------------------------------------------------------------------

// LaunchData

// required uint32 ProcessID = 2;
inline bool LaunchData::_internal_has_processid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaunchData::has_processid() const {
  return _internal_has_processid();
}
inline void LaunchData::clear_processid() {
  processid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::_internal_processid() const {
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::processid() const {
  // @@protoc_insertion_point(field_get:LaunchData.ProcessID)
  return _internal_processid();
}
inline void LaunchData::_internal_set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  processid_ = value;
}
inline void LaunchData::set_processid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:LaunchData.ProcessID)
}

// required uint32 ThreadID = 3;
inline bool LaunchData::_internal_has_threadid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LaunchData::has_threadid() const {
  return _internal_has_threadid();
}
inline void LaunchData::clear_threadid() {
  threadid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::_internal_threadid() const {
  return threadid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::threadid() const {
  // @@protoc_insertion_point(field_get:LaunchData.ThreadID)
  return _internal_threadid();
}
inline void LaunchData::_internal_set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  threadid_ = value;
}
inline void LaunchData::set_threadid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:LaunchData.ThreadID)
}

// required uint64 APICallID = 4;
inline bool LaunchData::_internal_has_apicallid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LaunchData::has_apicallid() const {
  return _internal_has_apicallid();
}
inline void LaunchData::clear_apicallid() {
  apicallid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::_internal_apicallid() const {
  return apicallid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::apicallid() const {
  // @@protoc_insertion_point(field_get:LaunchData.APICallID)
  return _internal_apicallid();
}
inline void LaunchData::_internal_set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  apicallid_ = value;
}
inline void LaunchData::set_apicallid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_apicallid(value);
  // @@protoc_insertion_point(field_set:LaunchData.APICallID)
}

// required .APIType API = 5;
inline bool LaunchData::_internal_has_api() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LaunchData::has_api() const {
  return _internal_has_api();
}
inline void LaunchData::clear_api() {
  api_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::APIType LaunchData::_internal_api() const {
  return static_cast< ::APIType >(api_);
}
inline ::APIType LaunchData::api() const {
  // @@protoc_insertion_point(field_get:LaunchData.API)
  return _internal_api();
}
inline void LaunchData::_internal_set_api(::APIType value) {
  assert(::APIType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  api_ = value;
}
inline void LaunchData::set_api(::APIType value) {
  _internal_set_api(value);
  // @@protoc_insertion_point(field_set:LaunchData.API)
}

// required uint64 KernelID = 6;
inline bool LaunchData::_internal_has_kernelid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LaunchData::has_kernelid() const {
  return _internal_has_kernelid();
}
inline void LaunchData::clear_kernelid() {
  kernelid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::_internal_kernelid() const {
  return kernelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::kernelid() const {
  // @@protoc_insertion_point(field_get:LaunchData.KernelID)
  return _internal_kernelid();
}
inline void LaunchData::_internal_set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  kernelid_ = value;
}
inline void LaunchData::set_kernelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_kernelid(value);
  // @@protoc_insertion_point(field_set:LaunchData.KernelID)
}

// required string KernelMangledName = 7;
inline bool LaunchData::_internal_has_kernelmangledname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaunchData::has_kernelmangledname() const {
  return _internal_has_kernelmangledname();
}
inline void LaunchData::clear_kernelmangledname() {
  kernelmangledname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaunchData::kernelmangledname() const {
  // @@protoc_insertion_point(field_get:LaunchData.KernelMangledName)
  return _internal_kernelmangledname();
}
inline void LaunchData::set_kernelmangledname(const std::string& value) {
  _internal_set_kernelmangledname(value);
  // @@protoc_insertion_point(field_set:LaunchData.KernelMangledName)
}
inline std::string* LaunchData::mutable_kernelmangledname() {
  // @@protoc_insertion_point(field_mutable:LaunchData.KernelMangledName)
  return _internal_mutable_kernelmangledname();
}
inline const std::string& LaunchData::_internal_kernelmangledname() const {
  return kernelmangledname_.Get();
}
inline void LaunchData::_internal_set_kernelmangledname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LaunchData::set_kernelmangledname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LaunchData.KernelMangledName)
}
inline void LaunchData::set_kernelmangledname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LaunchData.KernelMangledName)
}
inline void LaunchData::set_kernelmangledname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kernelmangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LaunchData.KernelMangledName)
}
inline std::string* LaunchData::_internal_mutable_kernelmangledname() {
  _has_bits_[0] |= 0x00000001u;
  return kernelmangledname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LaunchData::release_kernelmangledname() {
  // @@protoc_insertion_point(field_release:LaunchData.KernelMangledName)
  if (!_internal_has_kernelmangledname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kernelmangledname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchData::set_allocated_kernelmangledname(std::string* kernelmangledname) {
  if (kernelmangledname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kernelmangledname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelmangledname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LaunchData.KernelMangledName)
}

// required string KernelFunctionName = 8;
inline bool LaunchData::_internal_has_kernelfunctionname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaunchData::has_kernelfunctionname() const {
  return _internal_has_kernelfunctionname();
}
inline void LaunchData::clear_kernelfunctionname() {
  kernelfunctionname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LaunchData::kernelfunctionname() const {
  // @@protoc_insertion_point(field_get:LaunchData.KernelFunctionName)
  return _internal_kernelfunctionname();
}
inline void LaunchData::set_kernelfunctionname(const std::string& value) {
  _internal_set_kernelfunctionname(value);
  // @@protoc_insertion_point(field_set:LaunchData.KernelFunctionName)
}
inline std::string* LaunchData::mutable_kernelfunctionname() {
  // @@protoc_insertion_point(field_mutable:LaunchData.KernelFunctionName)
  return _internal_mutable_kernelfunctionname();
}
inline const std::string& LaunchData::_internal_kernelfunctionname() const {
  return kernelfunctionname_.Get();
}
inline void LaunchData::_internal_set_kernelfunctionname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LaunchData::set_kernelfunctionname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LaunchData.KernelFunctionName)
}
inline void LaunchData::set_kernelfunctionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LaunchData.KernelFunctionName)
}
inline void LaunchData::set_kernelfunctionname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  kernelfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LaunchData.KernelFunctionName)
}
inline std::string* LaunchData::_internal_mutable_kernelfunctionname() {
  _has_bits_[0] |= 0x00000002u;
  return kernelfunctionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LaunchData::release_kernelfunctionname() {
  // @@protoc_insertion_point(field_release:LaunchData.KernelFunctionName)
  if (!_internal_has_kernelfunctionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return kernelfunctionname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchData::set_allocated_kernelfunctionname(std::string* kernelfunctionname) {
  if (kernelfunctionname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kernelfunctionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelfunctionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LaunchData.KernelFunctionName)
}

// required string KernelDemangledName = 9;
inline bool LaunchData::_internal_has_kerneldemangledname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaunchData::has_kerneldemangledname() const {
  return _internal_has_kerneldemangledname();
}
inline void LaunchData::clear_kerneldemangledname() {
  kerneldemangledname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LaunchData::kerneldemangledname() const {
  // @@protoc_insertion_point(field_get:LaunchData.KernelDemangledName)
  return _internal_kerneldemangledname();
}
inline void LaunchData::set_kerneldemangledname(const std::string& value) {
  _internal_set_kerneldemangledname(value);
  // @@protoc_insertion_point(field_set:LaunchData.KernelDemangledName)
}
inline std::string* LaunchData::mutable_kerneldemangledname() {
  // @@protoc_insertion_point(field_mutable:LaunchData.KernelDemangledName)
  return _internal_mutable_kerneldemangledname();
}
inline const std::string& LaunchData::_internal_kerneldemangledname() const {
  return kerneldemangledname_.Get();
}
inline void LaunchData::_internal_set_kerneldemangledname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LaunchData::set_kerneldemangledname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LaunchData.KernelDemangledName)
}
inline void LaunchData::set_kerneldemangledname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LaunchData.KernelDemangledName)
}
inline void LaunchData::set_kerneldemangledname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  kerneldemangledname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LaunchData.KernelDemangledName)
}
inline std::string* LaunchData::_internal_mutable_kerneldemangledname() {
  _has_bits_[0] |= 0x00000004u;
  return kerneldemangledname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LaunchData::release_kerneldemangledname() {
  // @@protoc_insertion_point(field_release:LaunchData.KernelDemangledName)
  if (!_internal_has_kerneldemangledname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kerneldemangledname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchData::set_allocated_kerneldemangledname(std::string* kerneldemangledname) {
  if (kerneldemangledname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kerneldemangledname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kerneldemangledname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LaunchData.KernelDemangledName)
}

// required uint64 ProgramHandle = 10;
inline bool LaunchData::_internal_has_programhandle() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LaunchData::has_programhandle() const {
  return _internal_has_programhandle();
}
inline void LaunchData::clear_programhandle() {
  programhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::_internal_programhandle() const {
  return programhandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::programhandle() const {
  // @@protoc_insertion_point(field_get:LaunchData.ProgramHandle)
  return _internal_programhandle();
}
inline void LaunchData::_internal_set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  programhandle_ = value;
}
inline void LaunchData::set_programhandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_programhandle(value);
  // @@protoc_insertion_point(field_set:LaunchData.ProgramHandle)
}

// required uint64 ContextHandle = 11;
inline bool LaunchData::_internal_has_contexthandle() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LaunchData::has_contexthandle() const {
  return _internal_has_contexthandle();
}
inline void LaunchData::clear_contexthandle() {
  contexthandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::_internal_contexthandle() const {
  return contexthandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::contexthandle() const {
  // @@protoc_insertion_point(field_get:LaunchData.ContextHandle)
  return _internal_contexthandle();
}
inline void LaunchData::_internal_set_contexthandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  contexthandle_ = value;
}
inline void LaunchData::set_contexthandle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contexthandle(value);
  // @@protoc_insertion_point(field_set:LaunchData.ContextHandle)
}

// required uint64 DeviceID = 12;
inline bool LaunchData::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LaunchData::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void LaunchData::clear_deviceid() {
  deviceid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaunchData::deviceid() const {
  // @@protoc_insertion_point(field_get:LaunchData.DeviceID)
  return _internal_deviceid();
}
inline void LaunchData::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  deviceid_ = value;
}
inline void LaunchData::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:LaunchData.DeviceID)
}

// required uint32 WorkDimensions = 13;
inline bool LaunchData::_internal_has_workdimensions() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LaunchData::has_workdimensions() const {
  return _internal_has_workdimensions();
}
inline void LaunchData::clear_workdimensions() {
  workdimensions_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::_internal_workdimensions() const {
  return workdimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::workdimensions() const {
  // @@protoc_insertion_point(field_get:LaunchData.WorkDimensions)
  return _internal_workdimensions();
}
inline void LaunchData::_internal_set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  workdimensions_ = value;
}
inline void LaunchData::set_workdimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_workdimensions(value);
  // @@protoc_insertion_point(field_set:LaunchData.WorkDimensions)
}

// required .Uint64x3 GlobalWorkOffset = 14;
inline bool LaunchData::_internal_has_globalworkoffset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || globalworkoffset_ != nullptr);
  return value;
}
inline bool LaunchData::has_globalworkoffset() const {
  return _internal_has_globalworkoffset();
}
inline void LaunchData::clear_globalworkoffset() {
  if (globalworkoffset_ != nullptr) globalworkoffset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Uint64x3& LaunchData::_internal_globalworkoffset() const {
  const ::Uint64x3* p = globalworkoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& LaunchData::globalworkoffset() const {
  // @@protoc_insertion_point(field_get:LaunchData.GlobalWorkOffset)
  return _internal_globalworkoffset();
}
inline void LaunchData::unsafe_arena_set_allocated_globalworkoffset(
    ::Uint64x3* globalworkoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworkoffset_);
  }
  globalworkoffset_ = globalworkoffset;
  if (globalworkoffset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LaunchData.GlobalWorkOffset)
}
inline ::Uint64x3* LaunchData::release_globalworkoffset() {
  _has_bits_[0] &= ~0x00000008u;
  ::Uint64x3* temp = globalworkoffset_;
  globalworkoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* LaunchData::unsafe_arena_release_globalworkoffset() {
  // @@protoc_insertion_point(field_release:LaunchData.GlobalWorkOffset)
  _has_bits_[0] &= ~0x00000008u;
  ::Uint64x3* temp = globalworkoffset_;
  globalworkoffset_ = nullptr;
  return temp;
}
inline ::Uint64x3* LaunchData::_internal_mutable_globalworkoffset() {
  _has_bits_[0] |= 0x00000008u;
  if (globalworkoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    globalworkoffset_ = p;
  }
  return globalworkoffset_;
}
inline ::Uint64x3* LaunchData::mutable_globalworkoffset() {
  // @@protoc_insertion_point(field_mutable:LaunchData.GlobalWorkOffset)
  return _internal_mutable_globalworkoffset();
}
inline void LaunchData::set_allocated_globalworkoffset(::Uint64x3* globalworkoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete globalworkoffset_;
  }
  if (globalworkoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(globalworkoffset);
    if (message_arena != submessage_arena) {
      globalworkoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalworkoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  globalworkoffset_ = globalworkoffset;
  // @@protoc_insertion_point(field_set_allocated:LaunchData.GlobalWorkOffset)
}

// required .Uint64x3 GlobalWorkSize = 15;
inline bool LaunchData::_internal_has_globalworksize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || globalworksize_ != nullptr);
  return value;
}
inline bool LaunchData::has_globalworksize() const {
  return _internal_has_globalworksize();
}
inline void LaunchData::clear_globalworksize() {
  if (globalworksize_ != nullptr) globalworksize_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Uint64x3& LaunchData::_internal_globalworksize() const {
  const ::Uint64x3* p = globalworksize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& LaunchData::globalworksize() const {
  // @@protoc_insertion_point(field_get:LaunchData.GlobalWorkSize)
  return _internal_globalworksize();
}
inline void LaunchData::unsafe_arena_set_allocated_globalworksize(
    ::Uint64x3* globalworksize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(globalworksize_);
  }
  globalworksize_ = globalworksize;
  if (globalworksize) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LaunchData.GlobalWorkSize)
}
inline ::Uint64x3* LaunchData::release_globalworksize() {
  _has_bits_[0] &= ~0x00000010u;
  ::Uint64x3* temp = globalworksize_;
  globalworksize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* LaunchData::unsafe_arena_release_globalworksize() {
  // @@protoc_insertion_point(field_release:LaunchData.GlobalWorkSize)
  _has_bits_[0] &= ~0x00000010u;
  ::Uint64x3* temp = globalworksize_;
  globalworksize_ = nullptr;
  return temp;
}
inline ::Uint64x3* LaunchData::_internal_mutable_globalworksize() {
  _has_bits_[0] |= 0x00000010u;
  if (globalworksize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    globalworksize_ = p;
  }
  return globalworksize_;
}
inline ::Uint64x3* LaunchData::mutable_globalworksize() {
  // @@protoc_insertion_point(field_mutable:LaunchData.GlobalWorkSize)
  return _internal_mutable_globalworksize();
}
inline void LaunchData::set_allocated_globalworksize(::Uint64x3* globalworksize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete globalworksize_;
  }
  if (globalworksize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(globalworksize);
    if (message_arena != submessage_arena) {
      globalworksize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalworksize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  globalworksize_ = globalworksize;
  // @@protoc_insertion_point(field_set_allocated:LaunchData.GlobalWorkSize)
}

// required .Uint64x3 LocalWorkSize = 16;
inline bool LaunchData::_internal_has_localworksize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || localworksize_ != nullptr);
  return value;
}
inline bool LaunchData::has_localworksize() const {
  return _internal_has_localworksize();
}
inline void LaunchData::clear_localworksize() {
  if (localworksize_ != nullptr) localworksize_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Uint64x3& LaunchData::_internal_localworksize() const {
  const ::Uint64x3* p = localworksize_;
  return p != nullptr ? *p : reinterpret_cast<const ::Uint64x3&>(
      ::_Uint64x3_default_instance_);
}
inline const ::Uint64x3& LaunchData::localworksize() const {
  // @@protoc_insertion_point(field_get:LaunchData.LocalWorkSize)
  return _internal_localworksize();
}
inline void LaunchData::unsafe_arena_set_allocated_localworksize(
    ::Uint64x3* localworksize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localworksize_);
  }
  localworksize_ = localworksize;
  if (localworksize) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LaunchData.LocalWorkSize)
}
inline ::Uint64x3* LaunchData::release_localworksize() {
  _has_bits_[0] &= ~0x00000020u;
  ::Uint64x3* temp = localworksize_;
  localworksize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Uint64x3* LaunchData::unsafe_arena_release_localworksize() {
  // @@protoc_insertion_point(field_release:LaunchData.LocalWorkSize)
  _has_bits_[0] &= ~0x00000020u;
  ::Uint64x3* temp = localworksize_;
  localworksize_ = nullptr;
  return temp;
}
inline ::Uint64x3* LaunchData::_internal_mutable_localworksize() {
  _has_bits_[0] |= 0x00000020u;
  if (localworksize_ == nullptr) {
    auto* p = CreateMaybeMessage<::Uint64x3>(GetArena());
    localworksize_ = p;
  }
  return localworksize_;
}
inline ::Uint64x3* LaunchData::mutable_localworksize() {
  // @@protoc_insertion_point(field_mutable:LaunchData.LocalWorkSize)
  return _internal_mutable_localworksize();
}
inline void LaunchData::set_allocated_localworksize(::Uint64x3* localworksize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete localworksize_;
  }
  if (localworksize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(localworksize);
    if (message_arena != submessage_arena) {
      localworksize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localworksize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  localworksize_ = localworksize;
  // @@protoc_insertion_point(field_set_allocated:LaunchData.LocalWorkSize)
}

// optional uint32 ContextID = 17;
inline bool LaunchData::_internal_has_contextid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LaunchData::has_contextid() const {
  return _internal_has_contextid();
}
inline void LaunchData::clear_contextid() {
  contextid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::_internal_contextid() const {
  return contextid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::contextid() const {
  // @@protoc_insertion_point(field_get:LaunchData.ContextID)
  return _internal_contextid();
}
inline void LaunchData::_internal_set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  contextid_ = value;
}
inline void LaunchData::set_contextid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contextid(value);
  // @@protoc_insertion_point(field_set:LaunchData.ContextID)
}

// optional uint32 StreamID = 18;
inline bool LaunchData::_internal_has_streamid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LaunchData::has_streamid() const {
  return _internal_has_streamid();
}
inline void LaunchData::clear_streamid() {
  streamid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::_internal_streamid() const {
  return streamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchData::streamid() const {
  // @@protoc_insertion_point(field_get:LaunchData.StreamID)
  return _internal_streamid();
}
inline void LaunchData::_internal_set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  streamid_ = value;
}
inline void LaunchData::set_streamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:LaunchData.StreamID)
}

// -------------------------------------------------------------------

// SourceData

// optional uint64 Reference = 1;
inline bool SourceData::_internal_has_reference() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SourceData::has_reference() const {
  return _internal_has_reference();
}
inline void SourceData::clear_reference() {
  reference_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SourceData::_internal_reference() const {
  return reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SourceData::reference() const {
  // @@protoc_insertion_point(field_get:SourceData.Reference)
  return _internal_reference();
}
inline void SourceData::_internal_set_reference(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  reference_ = value;
}
inline void SourceData::set_reference(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:SourceData.Reference)
}

// optional string Code = 2;
inline bool SourceData::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SourceData::has_code() const {
  return _internal_has_code();
}
inline void SourceData::clear_code() {
  code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SourceData::code() const {
  // @@protoc_insertion_point(field_get:SourceData.Code)
  return _internal_code();
}
inline void SourceData::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SourceData.Code)
}
inline std::string* SourceData::mutable_code() {
  // @@protoc_insertion_point(field_mutable:SourceData.Code)
  return _internal_mutable_code();
}
inline const std::string& SourceData::_internal_code() const {
  return code_.Get();
}
inline void SourceData::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SourceData::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SourceData.Code)
}
inline void SourceData::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SourceData.Code)
}
inline void SourceData::set_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SourceData.Code)
}
inline std::string* SourceData::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SourceData::release_code() {
  // @@protoc_insertion_point(field_release:SourceData.Code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceData::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SourceData.Code)
}

// optional bytes Intermediate = 3;
inline bool SourceData::_internal_has_intermediate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SourceData::has_intermediate() const {
  return _internal_has_intermediate();
}
inline void SourceData::clear_intermediate() {
  intermediate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SourceData::intermediate() const {
  // @@protoc_insertion_point(field_get:SourceData.Intermediate)
  return _internal_intermediate();
}
inline void SourceData::set_intermediate(const std::string& value) {
  _internal_set_intermediate(value);
  // @@protoc_insertion_point(field_set:SourceData.Intermediate)
}
inline std::string* SourceData::mutable_intermediate() {
  // @@protoc_insertion_point(field_mutable:SourceData.Intermediate)
  return _internal_mutable_intermediate();
}
inline const std::string& SourceData::_internal_intermediate() const {
  return intermediate_.Get();
}
inline void SourceData::_internal_set_intermediate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  intermediate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SourceData::set_intermediate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  intermediate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SourceData.Intermediate)
}
inline void SourceData::set_intermediate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  intermediate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SourceData.Intermediate)
}
inline void SourceData::set_intermediate(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  intermediate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SourceData.Intermediate)
}
inline std::string* SourceData::_internal_mutable_intermediate() {
  _has_bits_[0] |= 0x00000002u;
  return intermediate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SourceData::release_intermediate() {
  // @@protoc_insertion_point(field_release:SourceData.Intermediate)
  if (!_internal_has_intermediate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return intermediate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceData::set_allocated_intermediate(std::string* intermediate) {
  if (intermediate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intermediate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intermediate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SourceData.Intermediate)
}

// optional bytes Binary = 4;
inline bool SourceData::_internal_has_binary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SourceData::has_binary() const {
  return _internal_has_binary();
}
inline void SourceData::clear_binary() {
  binary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SourceData::binary() const {
  // @@protoc_insertion_point(field_get:SourceData.Binary)
  return _internal_binary();
}
inline void SourceData::set_binary(const std::string& value) {
  _internal_set_binary(value);
  // @@protoc_insertion_point(field_set:SourceData.Binary)
}
inline std::string* SourceData::mutable_binary() {
  // @@protoc_insertion_point(field_mutable:SourceData.Binary)
  return _internal_mutable_binary();
}
inline const std::string& SourceData::_internal_binary() const {
  return binary_.Get();
}
inline void SourceData::_internal_set_binary(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SourceData::set_binary(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  binary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SourceData.Binary)
}
inline void SourceData::set_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SourceData.Binary)
}
inline void SourceData::set_binary(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SourceData.Binary)
}
inline std::string* SourceData::_internal_mutable_binary() {
  _has_bits_[0] |= 0x00000004u;
  return binary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SourceData::release_binary() {
  // @@protoc_insertion_point(field_release:SourceData.Binary)
  if (!_internal_has_binary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return binary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceData::set_allocated_binary(std::string* binary) {
  if (binary != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  binary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SourceData.Binary)
}

// optional .SourceSassLevel SassLevel = 5;
inline bool SourceData::_internal_has_sasslevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SourceData::has_sasslevel() const {
  return _internal_has_sasslevel();
}
inline void SourceData::clear_sasslevel() {
  sasslevel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::SourceSassLevel SourceData::_internal_sasslevel() const {
  return static_cast< ::SourceSassLevel >(sasslevel_);
}
inline ::SourceSassLevel SourceData::sasslevel() const {
  // @@protoc_insertion_point(field_get:SourceData.SassLevel)
  return _internal_sasslevel();
}
inline void SourceData::_internal_set_sasslevel(::SourceSassLevel value) {
  assert(::SourceSassLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  sasslevel_ = value;
}
inline void SourceData::set_sasslevel(::SourceSassLevel value) {
  _internal_set_sasslevel(value);
  // @@protoc_insertion_point(field_set:SourceData.SassLevel)
}

// optional uint32 SMRevision = 6;
inline bool SourceData::_internal_has_smrevision() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SourceData::has_smrevision() const {
  return _internal_has_smrevision();
}
inline void SourceData::clear_smrevision() {
  smrevision_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceData::_internal_smrevision() const {
  return smrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceData::smrevision() const {
  // @@protoc_insertion_point(field_get:SourceData.SMRevision)
  return _internal_smrevision();
}
inline void SourceData::_internal_set_smrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  smrevision_ = value;
}
inline void SourceData::set_smrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_smrevision(value);
  // @@protoc_insertion_point(field_set:SourceData.SMRevision)
}

// optional uint32 BinaryFlags = 7;
inline bool SourceData::_internal_has_binaryflags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SourceData::has_binaryflags() const {
  return _internal_has_binaryflags();
}
inline void SourceData::clear_binaryflags() {
  binaryflags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceData::_internal_binaryflags() const {
  return binaryflags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceData::binaryflags() const {
  // @@protoc_insertion_point(field_get:SourceData.BinaryFlags)
  return _internal_binaryflags();
}
inline void SourceData::_internal_set_binaryflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  binaryflags_ = value;
}
inline void SourceData::set_binaryflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_binaryflags(value);
  // @@protoc_insertion_point(field_set:SourceData.BinaryFlags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::APIType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::APIType>() {
  return ::APIType_descriptor();
}
template <> struct is_proto_enum< ::SourceSassLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SourceSassLevel>() {
  return ::SourceSassLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProfilerCommon_2eproto
