// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuleResults.proto

#include "RuleResults.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProfilerSection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilerSectionTable_ProfilerSection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResult_RuleResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResultBody_RuleResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RuleResultBodyItem_RuleResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleResultMessage_RuleResults_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleResultProposal_RuleResults_2eproto;
class RuleResultMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResultMessage> _instance;
} _RuleResultMessage_default_instance_;
class RuleResultProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResultProposal> _instance;
} _RuleResultProposal_default_instance_;
class RuleResultBodyItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResultBodyItem> _instance;
} _RuleResultBodyItem_default_instance_;
class RuleResultBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResultBody> _instance;
} _RuleResultBody_default_instance_;
class RuleResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResult> _instance;
} _RuleResult_default_instance_;
class RuleResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleResults> _instance;
} _RuleResults_default_instance_;
static void InitDefaultsscc_info_RuleResult_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResult_default_instance_;
    new (ptr) ::RuleResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResult_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuleResult_RuleResults_2eproto}, {
      &scc_info_RuleResultBody_RuleResults_2eproto.base,}};

static void InitDefaultsscc_info_RuleResultBody_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResultBody_default_instance_;
    new (ptr) ::RuleResultBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResultBody_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuleResultBody_RuleResults_2eproto}, {
      &scc_info_RuleResultBodyItem_RuleResults_2eproto.base,}};

static void InitDefaultsscc_info_RuleResultBodyItem_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResultBodyItem_default_instance_;
    new (ptr) ::RuleResultBodyItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RuleResultBodyItem_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RuleResultBodyItem_RuleResults_2eproto}, {
      &scc_info_RuleResultMessage_RuleResults_2eproto.base,
      &scc_info_ProfilerSectionTable_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionBarChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionHistogramChart_ProfilerSection_2eproto.base,
      &scc_info_ProfilerSectionLineChart_ProfilerSection_2eproto.base,
      &scc_info_RuleResultProposal_RuleResults_2eproto.base,}};

static void InitDefaultsscc_info_RuleResultMessage_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResultMessage_default_instance_;
    new (ptr) ::RuleResultMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleResultMessage_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleResultMessage_RuleResults_2eproto}, {}};

static void InitDefaultsscc_info_RuleResultProposal_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResultProposal_default_instance_;
    new (ptr) ::RuleResultProposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleResultProposal_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleResultProposal_RuleResults_2eproto}, {}};

static void InitDefaultsscc_info_RuleResults_RuleResults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RuleResults_default_instance_;
    new (ptr) ::RuleResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuleResults_RuleResults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuleResults_RuleResults_2eproto}, {
      &scc_info_RuleResult_RuleResults_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RuleResults_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RuleResults_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RuleResults_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RuleResults_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RuleResultMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RuleResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResultMessage, message_),
  PROTOBUF_FIELD_OFFSET(::RuleResultMessage, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RuleResultProposal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RuleResultProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResultProposal, identifier_),
  0,
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, message_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, table_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, barchart_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, histogramchart_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, linechart_),
  PROTOBUF_FIELD_OFFSET(::RuleResultBodyItem, proposal_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RuleResultBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResultBody, items_),
  PROTOBUF_FIELD_OFFSET(::RuleResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RuleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResult, identifier_),
  PROTOBUF_FIELD_OFFSET(::RuleResult, displayname_),
  PROTOBUF_FIELD_OFFSET(::RuleResult, body_),
  PROTOBUF_FIELD_OFFSET(::RuleResult, sectionidentifier_),
  0,
  1,
  3,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RuleResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RuleResults, ruleresults_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::RuleResultMessage)},
  { 9, 15, sizeof(::RuleResultProposal)},
  { 16, 27, sizeof(::RuleResultBodyItem)},
  { 33, -1, sizeof(::RuleResultBody)},
  { 39, 48, sizeof(::RuleResult)},
  { 52, -1, sizeof(::RuleResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResultProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResultBodyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResultBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RuleResults_default_instance_),
};

const char descriptor_table_protodef_RuleResults_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021RuleResults.proto\032\025ProfilerSection.pro"
  "to\032\024ProfilerCommon.proto\"J\n\021RuleResultMe"
  "ssage\022\017\n\007Message\030\001 \002(\t\022$\n\004Type\030\002 \002(\0162\026.R"
  "uleResultMessageType\"(\n\022RuleResultPropos"
  "al\022\022\n\nIdentifier\030\001 \002(\t\"\230\002\n\022RuleResultBod"
  "yItem\022#\n\007Message\030\001 \001(\0132\022.RuleResultMessa"
  "ge\022$\n\005Table\030\002 \001(\0132\025.ProfilerSectionTable"
  "\022*\n\010BarChart\030\003 \001(\0132\030.ProfilerSectionBarC"
  "hart\0226\n\016HistogramChart\030\004 \001(\0132\036.ProfilerS"
  "ectionHistogramChart\022,\n\tLineChart\030\005 \001(\0132"
  "\031.ProfilerSectionLineChart\022%\n\010Proposal\030\006"
  " \001(\0132\023.RuleResultProposal\"4\n\016RuleResultB"
  "ody\022\"\n\005Items\030\001 \003(\0132\023.RuleResultBodyItem\""
  "o\n\nRuleResult\022\022\n\nIdentifier\030\001 \002(\t\022\023\n\013Dis"
  "playName\030\002 \002(\t\022\035\n\004Body\030\003 \001(\0132\017.RuleResul"
  "tBody\022\031\n\021SectionIdentifier\030\004 \001(\t\"/\n\013Rule"
  "Results\022 \n\013RuleResults\030\001 \003(\0132\013.RuleResul"
  "t*B\n\025RuleResultMessageType\022\t\n\005None_\020\000\022\006\n"
  "\002Ok\020\001\022\013\n\007Warning\020\002\022\t\n\005Error\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RuleResults_2eproto_deps[2] = {
  &::descriptor_table_ProfilerCommon_2eproto,
  &::descriptor_table_ProfilerSection_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RuleResults_2eproto_sccs[6] = {
  &scc_info_RuleResult_RuleResults_2eproto.base,
  &scc_info_RuleResultBody_RuleResults_2eproto.base,
  &scc_info_RuleResultBodyItem_RuleResults_2eproto.base,
  &scc_info_RuleResultMessage_RuleResults_2eproto.base,
  &scc_info_RuleResultProposal_RuleResults_2eproto.base,
  &scc_info_RuleResults_RuleResults_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RuleResults_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RuleResults_2eproto = {
  false, false, descriptor_table_protodef_RuleResults_2eproto, "RuleResults.proto", 749,
  &descriptor_table_RuleResults_2eproto_once, descriptor_table_RuleResults_2eproto_sccs, descriptor_table_RuleResults_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_RuleResults_2eproto::offsets,
  file_level_metadata_RuleResults_2eproto, 6, file_level_enum_descriptors_RuleResults_2eproto, file_level_service_descriptors_RuleResults_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RuleResults_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RuleResults_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuleResultMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RuleResults_2eproto);
  return file_level_enum_descriptors_RuleResults_2eproto[0];
}
bool RuleResultMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RuleResultMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleResultMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RuleResultMessage::RuleResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResultMessage)
}
RuleResultMessage::RuleResultMessage(const RuleResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:RuleResultMessage)
}

void RuleResultMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResultMessage_RuleResults_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

RuleResultMessage::~RuleResultMessage() {
  // @@protoc_insertion_point(destructor:RuleResultMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuleResultMessage::ArenaDtor(void* object) {
  RuleResultMessage* _this = reinterpret_cast< RuleResultMessage* >(object);
  (void)_this;
}
void RuleResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResultMessage& RuleResultMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResultMessage_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RuleResultMessage.Message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .RuleResultMessageType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RuleResultMessageType_IsValid(val))) {
            _internal_set_type(static_cast<::RuleResultMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResultMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResultMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RuleResultMessage.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required .RuleResultMessageType Type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResultMessage)
  return target;
}

size_t RuleResultMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RuleResultMessage)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string Message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_type()) {
    // required .RuleResultMessageType Type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t RuleResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResultMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required .RuleResultMessageType Type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResultMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResultMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResultMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResultMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResultMessage)
    MergeFrom(*source);
  }
}

void RuleResultMessage::MergeFrom(const RuleResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuleResultMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResultMessage::CopyFrom(const RuleResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResultMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RuleResultMessage::InternalSwap(RuleResultMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResultMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RuleResultProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleResultProposal>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RuleResultProposal::RuleResultProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResultProposal)
}
RuleResultProposal::RuleResultProposal(const RuleResultProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RuleResultProposal)
}

void RuleResultProposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResultProposal_RuleResults_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuleResultProposal::~RuleResultProposal() {
  // @@protoc_insertion_point(destructor:RuleResultProposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResultProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuleResultProposal::ArenaDtor(void* object) {
  RuleResultProposal* _this = reinterpret_cast< RuleResultProposal* >(object);
  (void)_this;
}
void RuleResultProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResultProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResultProposal& RuleResultProposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResultProposal_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResultProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResultProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResultProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RuleResultProposal.Identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResultProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResultProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RuleResultProposal.Identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResultProposal)
  return target;
}

size_t RuleResultProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResultProposal)
  size_t total_size = 0;

  // required string Identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResultProposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResultProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResultProposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResultProposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResultProposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResultProposal)
    MergeFrom(*source);
  }
}

void RuleResultProposal::MergeFrom(const RuleResultProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResultProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void RuleResultProposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResultProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResultProposal::CopyFrom(const RuleResultProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResultProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResultProposal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RuleResultProposal::InternalSwap(RuleResultProposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResultProposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RuleResultBodyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleResultBodyItem>()._has_bits_);
  static const ::RuleResultMessage& message(const RuleResultBodyItem* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilerSectionTable& table(const RuleResultBodyItem* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfilerSectionBarChart& barchart(const RuleResultBodyItem* msg);
  static void set_has_barchart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfilerSectionHistogramChart& histogramchart(const RuleResultBodyItem* msg);
  static void set_has_histogramchart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ProfilerSectionLineChart& linechart(const RuleResultBodyItem* msg);
  static void set_has_linechart(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RuleResultProposal& proposal(const RuleResultBodyItem* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::RuleResultMessage&
RuleResultBodyItem::_Internal::message(const RuleResultBodyItem* msg) {
  return *msg->message_;
}
const ::ProfilerSectionTable&
RuleResultBodyItem::_Internal::table(const RuleResultBodyItem* msg) {
  return *msg->table_;
}
const ::ProfilerSectionBarChart&
RuleResultBodyItem::_Internal::barchart(const RuleResultBodyItem* msg) {
  return *msg->barchart_;
}
const ::ProfilerSectionHistogramChart&
RuleResultBodyItem::_Internal::histogramchart(const RuleResultBodyItem* msg) {
  return *msg->histogramchart_;
}
const ::ProfilerSectionLineChart&
RuleResultBodyItem::_Internal::linechart(const RuleResultBodyItem* msg) {
  return *msg->linechart_;
}
const ::RuleResultProposal&
RuleResultBodyItem::_Internal::proposal(const RuleResultBodyItem* msg) {
  return *msg->proposal_;
}
void RuleResultBodyItem::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RuleResultBodyItem::clear_barchart() {
  if (barchart_ != nullptr) barchart_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RuleResultBodyItem::clear_histogramchart() {
  if (histogramchart_ != nullptr) histogramchart_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void RuleResultBodyItem::clear_linechart() {
  if (linechart_ != nullptr) linechart_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
RuleResultBodyItem::RuleResultBodyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResultBodyItem)
}
RuleResultBodyItem::RuleResultBodyItem(const RuleResultBodyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::RuleResultMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  if (from._internal_has_table()) {
    table_ = new ::ProfilerSectionTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  if (from._internal_has_barchart()) {
    barchart_ = new ::ProfilerSectionBarChart(*from.barchart_);
  } else {
    barchart_ = nullptr;
  }
  if (from._internal_has_histogramchart()) {
    histogramchart_ = new ::ProfilerSectionHistogramChart(*from.histogramchart_);
  } else {
    histogramchart_ = nullptr;
  }
  if (from._internal_has_linechart()) {
    linechart_ = new ::ProfilerSectionLineChart(*from.linechart_);
  } else {
    linechart_ = nullptr;
  }
  if (from._internal_has_proposal()) {
    proposal_ = new ::RuleResultProposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RuleResultBodyItem)
}

void RuleResultBodyItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResultBodyItem_RuleResults_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&message_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&proposal_) -
      reinterpret_cast<char*>(&message_)) + sizeof(proposal_));
}

RuleResultBodyItem::~RuleResultBodyItem() {
  // @@protoc_insertion_point(destructor:RuleResultBodyItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResultBodyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete barchart_;
  if (this != internal_default_instance()) delete histogramchart_;
  if (this != internal_default_instance()) delete linechart_;
  if (this != internal_default_instance()) delete proposal_;
}

void RuleResultBodyItem::ArenaDtor(void* object) {
  RuleResultBodyItem* _this = reinterpret_cast< RuleResultBodyItem* >(object);
  (void)_this;
}
void RuleResultBodyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResultBodyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResultBodyItem& RuleResultBodyItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResultBodyItem_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResultBodyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResultBodyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_ != nullptr);
      table_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(barchart_ != nullptr);
      barchart_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(histogramchart_ != nullptr);
      histogramchart_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linechart_ != nullptr);
      linechart_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(proposal_ != nullptr);
      proposal_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResultBodyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .RuleResultMessage Message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionTable Table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionBarChart BarChart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_barchart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionHistogramChart HistogramChart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogramchart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProfilerSectionLineChart LineChart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linechart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RuleResultProposal Proposal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResultBodyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResultBodyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RuleResultMessage Message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  // optional .ProfilerSectionTable Table = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table(this), target, stream);
  }

  // optional .ProfilerSectionBarChart BarChart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::barchart(this), target, stream);
  }

  // optional .ProfilerSectionHistogramChart HistogramChart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::histogramchart(this), target, stream);
  }

  // optional .ProfilerSectionLineChart LineChart = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::linechart(this), target, stream);
  }

  // optional .RuleResultProposal Proposal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResultBodyItem)
  return target;
}

size_t RuleResultBodyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResultBodyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .RuleResultMessage Message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional .ProfilerSectionTable Table = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_);
    }

    // optional .ProfilerSectionBarChart BarChart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *barchart_);
    }

    // optional .ProfilerSectionHistogramChart HistogramChart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *histogramchart_);
    }

    // optional .ProfilerSectionLineChart LineChart = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linechart_);
    }

    // optional .RuleResultProposal Proposal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proposal_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResultBodyItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResultBodyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResultBodyItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResultBodyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResultBodyItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResultBodyItem)
    MergeFrom(*source);
  }
}

void RuleResultBodyItem::MergeFrom(const RuleResultBodyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResultBodyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message()->::RuleResultMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table()->::ProfilerSectionTable::MergeFrom(from._internal_table());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_barchart()->::ProfilerSectionBarChart::MergeFrom(from._internal_barchart());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_histogramchart()->::ProfilerSectionHistogramChart::MergeFrom(from._internal_histogramchart());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linechart()->::ProfilerSectionLineChart::MergeFrom(from._internal_linechart());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_proposal()->::RuleResultProposal::MergeFrom(from._internal_proposal());
    }
  }
}

void RuleResultBodyItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResultBodyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResultBodyItem::CopyFrom(const RuleResultBodyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResultBodyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResultBodyItem::IsInitialized() const {
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  if (_internal_has_table()) {
    if (!table_->IsInitialized()) return false;
  }
  if (_internal_has_barchart()) {
    if (!barchart_->IsInitialized()) return false;
  }
  if (_internal_has_histogramchart()) {
    if (!histogramchart_->IsInitialized()) return false;
  }
  if (_internal_has_linechart()) {
    if (!linechart_->IsInitialized()) return false;
  }
  if (_internal_has_proposal()) {
    if (!proposal_->IsInitialized()) return false;
  }
  return true;
}

void RuleResultBodyItem::InternalSwap(RuleResultBodyItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleResultBodyItem, proposal_)
      + sizeof(RuleResultBodyItem::proposal_)
      - PROTOBUF_FIELD_OFFSET(RuleResultBodyItem, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResultBodyItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RuleResultBody::_Internal {
 public:
};

RuleResultBody::RuleResultBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResultBody)
}
RuleResultBody::RuleResultBody(const RuleResultBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RuleResultBody)
}

void RuleResultBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResultBody_RuleResults_2eproto.base);
}

RuleResultBody::~RuleResultBody() {
  // @@protoc_insertion_point(destructor:RuleResultBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResultBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuleResultBody::ArenaDtor(void* object) {
  RuleResultBody* _this = reinterpret_cast< RuleResultBody* >(object);
  (void)_this;
}
void RuleResultBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResultBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResultBody& RuleResultBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResultBody_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResultBody::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResultBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResultBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RuleResultBodyItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResultBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResultBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RuleResultBodyItem Items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResultBody)
  return target;
}

size_t RuleResultBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResultBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RuleResultBodyItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResultBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResultBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResultBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResultBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResultBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResultBody)
    MergeFrom(*source);
  }
}

void RuleResultBody::MergeFrom(const RuleResultBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResultBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void RuleResultBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResultBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResultBody::CopyFrom(const RuleResultBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResultBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResultBody::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  return true;
}

void RuleResultBody::InternalSwap(RuleResultBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResultBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RuleResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleResult>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RuleResultBody& body(const RuleResult* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sectionidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::RuleResultBody&
RuleResult::_Internal::body(const RuleResult* msg) {
  return *msg->body_;
}
RuleResult::RuleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResult)
}
RuleResult::RuleResult(const RuleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displayname()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  sectionidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sectionidentifier()) {
    sectionidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sectionidentifier(), 
      GetArena());
  }
  if (from._internal_has_body()) {
    body_ = new ::RuleResultBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RuleResult)
}

void RuleResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResult_RuleResults_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sectionidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_ = nullptr;
}

RuleResult::~RuleResult() {
  // @@protoc_insertion_point(destructor:RuleResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sectionidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
}

void RuleResult::ArenaDtor(void* object) {
  RuleResult* _this = reinterpret_cast< RuleResult* >(object);
  (void)_this;
}
void RuleResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResult& RuleResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResult_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sectionidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(body_ != nullptr);
      body_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RuleResult.Identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string DisplayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RuleResult.DisplayName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RuleResultBody Body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string SectionIdentifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sectionidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RuleResult.SectionIdentifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RuleResult.Identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required string DisplayName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RuleResult.DisplayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  // optional .RuleResultBody Body = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::body(this), target, stream);
  }

  // optional string SectionIdentifier = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sectionidentifier().data(), static_cast<int>(this->_internal_sectionidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RuleResult.SectionIdentifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sectionidentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResult)
  return target;
}

size_t RuleResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RuleResult)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string Identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_displayname()) {
    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  return total_size;
}
size_t RuleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required string DisplayName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string SectionIdentifier = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sectionidentifier());
    }

    // optional .RuleResultBody Body = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResult)
    MergeFrom(*source);
  }
}

void RuleResult::MergeFrom(const RuleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sectionidentifier(from._internal_sectionidentifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_body()->::RuleResultBody::MergeFrom(from._internal_body());
    }
  }
}

void RuleResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResult::CopyFrom(const RuleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_body()) {
    if (!body_->IsInitialized()) return false;
  }
  return true;
}

void RuleResult::InternalSwap(RuleResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sectionidentifier_.Swap(&other->sectionidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(body_, other->body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RuleResults::_Internal {
 public:
};

RuleResults::RuleResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ruleresults_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RuleResults)
}
RuleResults::RuleResults(const RuleResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ruleresults_(from.ruleresults_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RuleResults)
}

void RuleResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleResults_RuleResults_2eproto.base);
}

RuleResults::~RuleResults() {
  // @@protoc_insertion_point(destructor:RuleResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuleResults::ArenaDtor(void* object) {
  RuleResults* _this = reinterpret_cast< RuleResults* >(object);
  (void)_this;
}
void RuleResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleResults& RuleResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleResults_RuleResults_2eproto.base);
  return *internal_default_instance();
}


void RuleResults::Clear() {
// @@protoc_insertion_point(message_clear_start:RuleResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ruleresults_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RuleResult RuleResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ruleresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuleResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RuleResult RuleResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ruleresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ruleresults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuleResults)
  return target;
}

size_t RuleResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuleResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RuleResult RuleResults = 1;
  total_size += 1UL * this->_internal_ruleresults_size();
  for (const auto& msg : this->ruleresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RuleResults)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RuleResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RuleResults)
    MergeFrom(*source);
  }
}

void RuleResults::MergeFrom(const RuleResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RuleResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ruleresults_.MergeFrom(from.ruleresults_);
}

void RuleResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RuleResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleResults::CopyFrom(const RuleResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuleResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleResults::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ruleresults_)) return false;
  return true;
}

void RuleResults::InternalSwap(RuleResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ruleresults_.InternalSwap(&other->ruleresults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RuleResultMessage* Arena::CreateMaybeMessage< ::RuleResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RuleResultProposal* Arena::CreateMaybeMessage< ::RuleResultProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResultProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::RuleResultBodyItem* Arena::CreateMaybeMessage< ::RuleResultBodyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResultBodyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::RuleResultBody* Arena::CreateMaybeMessage< ::RuleResultBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResultBody >(arena);
}
template<> PROTOBUF_NOINLINE ::RuleResult* Arena::CreateMaybeMessage< ::RuleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::RuleResults* Arena::CreateMaybeMessage< ::RuleResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuleResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
