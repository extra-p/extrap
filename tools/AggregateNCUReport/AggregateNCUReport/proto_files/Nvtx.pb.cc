// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nvtx.proto

#include "Nvtx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxColor_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NvtxDomainInfo_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NvtxEventAttributes_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxMessage_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxNameTable_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxPayload_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxPushPopDomain_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxPushPopRange_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxRegisteredString_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxStartEndDomain_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxStartEndRange_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NvtxState_Nvtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Nvtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxThread_Nvtx_2eproto;
class NvtxRequestStateMessage_TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxRequestStateMessage_TypeInfo> _instance;
} _NvtxRequestStateMessage_TypeInfo_default_instance_;
class NvtxRequestStateMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxRequestStateMessage> _instance;
} _NvtxRequestStateMessage_default_instance_;
class NvtxPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxPayload> _instance;
} _NvtxPayload_default_instance_;
class NvtxMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxMessage> _instance;
} _NvtxMessage_default_instance_;
class NvtxColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxColor> _instance;
} _NvtxColor_default_instance_;
class NvtxEventAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxEventAttributes> _instance;
} _NvtxEventAttributes_default_instance_;
class NvtxPushPopRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxPushPopRange> _instance;
} _NvtxPushPopRange_default_instance_;
class NvtxStartEndRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxStartEndRange> _instance;
} _NvtxStartEndRange_default_instance_;
class NvtxPushPopDomainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxPushPopDomain> _instance;
} _NvtxPushPopDomain_default_instance_;
class NvtxStartEndDomainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxStartEndDomain> _instance;
} _NvtxStartEndDomain_default_instance_;
class NvtxRegisteredStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxRegisteredString> _instance;
} _NvtxRegisteredString_default_instance_;
class NvtxDomainInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxDomainInfo> _instance;
} _NvtxDomainInfo_default_instance_;
class NvtxThreadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxThread> _instance;
} _NvtxThread_default_instance_;
class NvtxNameTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxNameTable> _instance;
} _NvtxNameTable_default_instance_;
class NvtxStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxState> _instance;
} _NvtxState_default_instance_;
class NvtxReplyStateMessage_TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxReplyStateMessage_TypeInfo> _instance;
} _NvtxReplyStateMessage_TypeInfo_default_instance_;
class NvtxReplyStateMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NvtxReplyStateMessage> _instance;
} _NvtxReplyStateMessage_default_instance_;
static void InitDefaultsscc_info_NvtxColor_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxColor_default_instance_;
    new (ptr) ::NvtxColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxColor_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxColor_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxDomainInfo_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxDomainInfo_default_instance_;
    new (ptr) ::NvtxDomainInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NvtxDomainInfo_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NvtxDomainInfo_Nvtx_2eproto}, {
      &scc_info_NvtxRegisteredString_Nvtx_2eproto.base,
      &scc_info_NvtxNameTable_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxEventAttributes_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxEventAttributes_default_instance_;
    new (ptr) ::NvtxEventAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NvtxEventAttributes_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NvtxEventAttributes_Nvtx_2eproto}, {
      &scc_info_NvtxColor_Nvtx_2eproto.base,
      &scc_info_NvtxPayload_Nvtx_2eproto.base,
      &scc_info_NvtxMessage_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxMessage_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxMessage_default_instance_;
    new (ptr) ::NvtxMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxMessage_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxMessage_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxNameTable_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxNameTable_default_instance_;
    new (ptr) ::NvtxNameTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxNameTable_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxNameTable_Nvtx_2eproto}, {
      &scc_info_NvtxRegisteredString_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxPayload_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxPayload_default_instance_;
    new (ptr) ::NvtxPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxPayload_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxPayload_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxPushPopDomain_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxPushPopDomain_default_instance_;
    new (ptr) ::NvtxPushPopDomain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxPushPopDomain_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxPushPopDomain_Nvtx_2eproto}, {
      &scc_info_NvtxPushPopRange_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxPushPopRange_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxPushPopRange_default_instance_;
    new (ptr) ::NvtxPushPopRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxPushPopRange_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxPushPopRange_Nvtx_2eproto}, {
      &scc_info_NvtxEventAttributes_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxRegisteredString_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxRegisteredString_default_instance_;
    new (ptr) ::NvtxRegisteredString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxRegisteredString_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxRegisteredString_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxReplyStateMessage_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxReplyStateMessage_default_instance_;
    new (ptr) ::NvtxReplyStateMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxReplyStateMessage_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxReplyStateMessage_Nvtx_2eproto}, {
      &scc_info_NvtxState_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxReplyStateMessage_TypeInfo_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxReplyStateMessage_TypeInfo_default_instance_;
    new (ptr) ::NvtxReplyStateMessage_TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxReplyStateMessage_TypeInfo_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxReplyStateMessage_TypeInfo_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxRequestStateMessage_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxRequestStateMessage_default_instance_;
    new (ptr) ::NvtxRequestStateMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxRequestStateMessage_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxRequestStateMessage_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxRequestStateMessage_TypeInfo_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxRequestStateMessage_TypeInfo_default_instance_;
    new (ptr) ::NvtxRequestStateMessage_TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NvtxRequestStateMessage_TypeInfo_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NvtxRequestStateMessage_TypeInfo_Nvtx_2eproto}, {}};

static void InitDefaultsscc_info_NvtxStartEndDomain_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxStartEndDomain_default_instance_;
    new (ptr) ::NvtxStartEndDomain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxStartEndDomain_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxStartEndDomain_Nvtx_2eproto}, {
      &scc_info_NvtxStartEndRange_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxStartEndRange_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxStartEndRange_default_instance_;
    new (ptr) ::NvtxStartEndRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxStartEndRange_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxStartEndRange_Nvtx_2eproto}, {
      &scc_info_NvtxEventAttributes_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxState_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxState_default_instance_;
    new (ptr) ::NvtxState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NvtxState_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NvtxState_Nvtx_2eproto}, {
      &scc_info_NvtxDomainInfo_Nvtx_2eproto.base,
      &scc_info_NvtxThread_Nvtx_2eproto.base,
      &scc_info_NvtxStartEndDomain_Nvtx_2eproto.base,}};

static void InitDefaultsscc_info_NvtxThread_Nvtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NvtxThread_default_instance_;
    new (ptr) ::NvtxThread();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NvtxThread_Nvtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NvtxThread_Nvtx_2eproto}, {
      &scc_info_NvtxPushPopDomain_Nvtx_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Nvtx_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Nvtx_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Nvtx_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Nvtx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NvtxRequestStateMessage_TypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxRequestStateMessage_TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxRequestStateMessage_TypeInfo, category_),
  PROTOBUF_FIELD_OFFSET(::NvtxRequestStateMessage_TypeInfo, method_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NvtxRequestStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, payloadtype_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, ullvalue_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, llvalue_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, doublevalue_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, uvalue_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, ivalue_),
  PROTOBUF_FIELD_OFFSET(::NvtxPayload, fvalue_),
  2,
  0,
  1,
  4,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::NvtxMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxMessage, messagetype_),
  PROTOBUF_FIELD_OFFSET(::NvtxMessage, message_),
  PROTOBUF_FIELD_OFFSET(::NvtxMessage, handle_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::NvtxColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxColor, colortype_),
  PROTOBUF_FIELD_OFFSET(::NvtxColor, color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, version_),
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, category_),
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, color_),
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, payload_),
  PROTOBUF_FIELD_OFFSET(::NvtxEventAttributes, message_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopRange, name_),
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopRange, attributes_),
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopRange, lastapicallid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, id_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, name_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, attributes_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, lastapicallid_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndRange, starttid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopDomain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopDomain, id_),
  PROTOBUF_FIELD_OFFSET(::NvtxPushPopDomain, stack_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndDomain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndDomain, id_),
  PROTOBUF_FIELD_OFFSET(::NvtxStartEndDomain, ranges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NvtxRegisteredString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxRegisteredString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxRegisteredString, id_),
  PROTOBUF_FIELD_OFFSET(::NvtxRegisteredString, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, id_),
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, name_),
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, strings_),
  PROTOBUF_FIELD_OFFSET(::NvtxDomainInfo, nametables_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NvtxThread, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxThread, tid_),
  PROTOBUF_FIELD_OFFSET(::NvtxThread, pushpopdomains_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NvtxNameTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxNameTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxNameTable, family_),
  PROTOBUF_FIELD_OFFSET(::NvtxNameTable, mappings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NvtxState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxState, domains_),
  PROTOBUF_FIELD_OFFSET(::NvtxState, threads_),
  PROTOBUF_FIELD_OFFSET(::NvtxState, startenddomains_),
  PROTOBUF_FIELD_OFFSET(::NvtxState, defaultdomain_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage_TypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage_TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage_TypeInfo, category_),
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage_TypeInfo, method_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NvtxReplyStateMessage, state_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::NvtxRequestStateMessage_TypeInfo)},
  { 9, -1, sizeof(::NvtxRequestStateMessage)},
  { 14, 26, sizeof(::NvtxPayload)},
  { 33, 41, sizeof(::NvtxMessage)},
  { 44, 51, sizeof(::NvtxColor)},
  { 53, 63, sizeof(::NvtxEventAttributes)},
  { 68, 76, sizeof(::NvtxPushPopRange)},
  { 79, 89, sizeof(::NvtxStartEndRange)},
  { 94, 101, sizeof(::NvtxPushPopDomain)},
  { 103, 110, sizeof(::NvtxStartEndDomain)},
  { 112, 119, sizeof(::NvtxRegisteredString)},
  { 121, 130, sizeof(::NvtxDomainInfo)},
  { 134, 141, sizeof(::NvtxThread)},
  { 143, 150, sizeof(::NvtxNameTable)},
  { 152, 161, sizeof(::NvtxState)},
  { 165, 172, sizeof(::NvtxReplyStateMessage_TypeInfo)},
  { 174, 180, sizeof(::NvtxReplyStateMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxRequestStateMessage_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxRequestStateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxEventAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxPushPopRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxStartEndRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxPushPopDomain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxStartEndDomain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxRegisteredString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxDomainInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxThread_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxNameTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxReplyStateMessage_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NvtxReplyStateMessage_default_instance_),
};

const char descriptor_table_protodef_Nvtx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nNvtx.proto\032\024NvtxCategories.proto\"\225\001\n\027N"
  "vtxRequestStateMessage\032z\n\010TypeInfo\0222\n\010Ca"
  "tegory\030\001 \001(\0162\r.NvtxCategory:\021NvtxCategor"
  "yState\022:\n\006Method\030\002 \001(\0162\013.NvtxMethod:\035Nvt"
  "xMethodRequestStateMessage\"\264\001\n\013NvtxPaylo"
  "ad\022=\n\013PayloadType\030\001 \002(\0162\020.NvtxPayloadTyp"
  "e:\026NvtxPayloadTypeUnknown\022\020\n\010ULLValue\030\002 "
  "\001(\004\022\017\n\007LLValue\030\003 \001(\003\022\023\n\013DoubleValue\030\004 \001("
  "\001\022\016\n\006UValue\030\005 \001(\r\022\016\n\006IValue\030\006 \001(\005\022\016\n\006FVa"
  "lue\030\007 \001(\002\"m\n\013NvtxMessage\022=\n\013MessageType\030"
  "\001 \002(\0162\020.NvtxMessageType:\026NvtxMessageType"
  "Unknown\022\017\n\007message\030\002 \001(\t\022\016\n\006handle\030\003 \001(\004"
  "\"S\n\tNvtxColor\0227\n\tColorType\030\001 \002(\0162\016.NvtxC"
  "olorType:\024NvtxColorTypeUnknown\022\r\n\005Color\030"
  "\002 \001(\r\"\221\001\n\023NvtxEventAttributes\022\017\n\007Version"
  "\030\001 \002(\r\022\020\n\010Category\030\002 \002(\r\022\031\n\005Color\030\003 \002(\0132"
  "\n.NvtxColor\022\035\n\007Payload\030\004 \002(\0132\014.NvtxPaylo"
  "ad\022\035\n\007Message\030\005 \002(\0132\014.NvtxMessage\"a\n\020Nvt"
  "xPushPopRange\022\014\n\004Name\030\001 \002(\t\022(\n\nAttribute"
  "s\030\002 \001(\0132\024.NvtxEventAttributes\022\025\n\rLastApi"
  "CallId\030\003 \001(\004\"\200\001\n\021NvtxStartEndRange\022\n\n\002Id"
  "\030\001 \002(\004\022\014\n\004Name\030\002 \002(\t\022(\n\nAttributes\030\003 \001(\013"
  "2\024.NvtxEventAttributes\022\025\n\rLastApiCallId\030"
  "\004 \001(\004\022\020\n\010StartTID\030\005 \001(\r\"A\n\021NvtxPushPopDo"
  "main\022\n\n\002Id\030\001 \002(\004\022 \n\005Stack\030\003 \003(\0132\021.NvtxPu"
  "shPopRange\"D\n\022NvtxStartEndDomain\022\n\n\002Id\030\001"
  " \002(\004\022\"\n\006Ranges\030\003 \003(\0132\022.NvtxStartEndRange"
  "\"1\n\024NvtxRegisteredString\022\n\n\002Id\030\001 \002(\004\022\r\n\005"
  "Value\030\002 \002(\t\"v\n\016NvtxDomainInfo\022\n\n\002Id\030\001 \002("
  "\004\022\014\n\004Name\030\002 \002(\t\022&\n\007Strings\030\003 \003(\0132\025.NvtxR"
  "egisteredString\022\"\n\nNameTables\030\004 \003(\0132\016.Nv"
  "txNameTable\"E\n\nNvtxThread\022\013\n\003TID\030\001 \002(\r\022*"
  "\n\016PushPopDomains\030\002 \003(\0132\022.NvtxPushPopDoma"
  "in\"Y\n\rNvtxNameTable\022\037\n\006Family\030\001 \002(\0162\017.Nv"
  "txNameFamily\022\'\n\010Mappings\030\002 \003(\0132\025.NvtxReg"
  "isteredString\"\220\001\n\tNvtxState\022 \n\007Domains\030\001"
  " \003(\0132\017.NvtxDomainInfo\022\034\n\007Threads\030\002 \003(\0132\013"
  ".NvtxThread\022,\n\017StartEndDomains\030\003 \003(\0132\023.N"
  "vtxStartEndDomain\022\025\n\rDefaultDomain\030\004 \001(\004"
  "\"\254\001\n\025NvtxReplyStateMessage\022\031\n\005State\030\001 \001("
  "\0132\n.NvtxState\032x\n\010TypeInfo\0222\n\010Category\030\001 "
  "\001(\0162\r.NvtxCategory:\021NvtxCategoryState\0228\n"
  "\006Method\030\002 \001(\0162\013.NvtxMethod:\033NvtxMethodRe"
  "plyStateMessage*g\n\nNvtxMethod\022\025\n\021NvtxMet"
  "hodInvalid\020\000\022!\n\035NvtxMethodRequestStateMe"
  "ssage\020\001\022\037\n\033NvtxMethodReplyStateMessage\020\002"
  "*@\n\rNvtxColorType\022\030\n\024NvtxColorTypeUnknow"
  "n\020\000\022\025\n\021NvtxColorTypeArgb\020\001*\314\001\n\017NvtxPaylo"
  "adType\022\032\n\026NvtxPayloadTypeUnknown\020\000\022\031\n\025Nv"
  "txPayloadTypeUint64\020\001\022\030\n\024NvtxPayloadType"
  "Int64\020\002\022\031\n\025NvtxPayloadTypeDouble\020\003\022\031\n\025Nv"
  "txPayloadTypeUint32\020\004\022\030\n\024NvtxPayloadType"
  "Int32\020\005\022\030\n\024NvtxPayloadTypeFloat\020\006*\202\001\n\017Nv"
  "txMessageType\022\032\n\026NvtxMessageTypeUnknown\020"
  "\000\022\030\n\024NvtxMessageTypeAscii\020\001\022\032\n\026NvtxMessa"
  "geTypeUnicode\020\002\022\035\n\031NvtxMessageTypeRegist"
  "ered\020\003*\211\004\n\016NvtxNameFamily\022\031\n\025NvtxNameFam"
  "ilyUnknown\020\000\022\032\n\026NvtxNameFamilyCategory\020\001"
  "\022\032\n\026NvtxNameFamilyOsThread\020\002\022\034\n\030NvtxName"
  "FamilyCudaDevice\020\003\022\035\n\031NvtxNameFamilyCuda"
  "Context\020\004\022\034\n\030NvtxNameFamilyCudaStream\020\005\022"
  "\033\n\027NvtxNameFamilyCudaEvent\020\006\022\032\n\026NvtxName"
  "FamilyClDevice\020\007\022\033\n\027NvtxNameFamilyClCont"
  "ext\020\010\022 \n\034NvtxNameFamilyClCommandQueue\020\n\022"
  "\035\n\031NvtxNameFamilyClMemObject\020\013\022\033\n\027NvtxNa"
  "meFamilyClSampler\020\014\022\033\n\027NvtxNameFamilyClP"
  "rogram\020\r\022\031\n\025NvtxNameFamilyClEvent\020\016\022\036\n\032N"
  "vtxNameFamilyCudaRtDevice\020\017\022\036\n\032NvtxNameF"
  "amilyCudaRtStream\020\020\022\035\n\031NvtxNameFamilyCud"
  "aRtEvent\020\021"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Nvtx_2eproto_deps[1] = {
  &::descriptor_table_NvtxCategories_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Nvtx_2eproto_sccs[17] = {
  &scc_info_NvtxColor_Nvtx_2eproto.base,
  &scc_info_NvtxDomainInfo_Nvtx_2eproto.base,
  &scc_info_NvtxEventAttributes_Nvtx_2eproto.base,
  &scc_info_NvtxMessage_Nvtx_2eproto.base,
  &scc_info_NvtxNameTable_Nvtx_2eproto.base,
  &scc_info_NvtxPayload_Nvtx_2eproto.base,
  &scc_info_NvtxPushPopDomain_Nvtx_2eproto.base,
  &scc_info_NvtxPushPopRange_Nvtx_2eproto.base,
  &scc_info_NvtxRegisteredString_Nvtx_2eproto.base,
  &scc_info_NvtxReplyStateMessage_Nvtx_2eproto.base,
  &scc_info_NvtxReplyStateMessage_TypeInfo_Nvtx_2eproto.base,
  &scc_info_NvtxRequestStateMessage_Nvtx_2eproto.base,
  &scc_info_NvtxRequestStateMessage_TypeInfo_Nvtx_2eproto.base,
  &scc_info_NvtxStartEndDomain_Nvtx_2eproto.base,
  &scc_info_NvtxStartEndRange_Nvtx_2eproto.base,
  &scc_info_NvtxState_Nvtx_2eproto.base,
  &scc_info_NvtxThread_Nvtx_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Nvtx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nvtx_2eproto = {
  false, false, descriptor_table_protodef_Nvtx_2eproto, "Nvtx.proto", 2770,
  &descriptor_table_Nvtx_2eproto_once, descriptor_table_Nvtx_2eproto_sccs, descriptor_table_Nvtx_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_Nvtx_2eproto::offsets,
  file_level_metadata_Nvtx_2eproto, 17, file_level_enum_descriptors_Nvtx_2eproto, file_level_service_descriptors_Nvtx_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Nvtx_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Nvtx_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Nvtx_2eproto);
  return file_level_enum_descriptors_Nvtx_2eproto[0];
}
bool NvtxMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxColorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Nvtx_2eproto);
  return file_level_enum_descriptors_Nvtx_2eproto[1];
}
bool NvtxColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxPayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Nvtx_2eproto);
  return file_level_enum_descriptors_Nvtx_2eproto[2];
}
bool NvtxPayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Nvtx_2eproto);
  return file_level_enum_descriptors_Nvtx_2eproto[3];
}
bool NvtxMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvtxNameFamily_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Nvtx_2eproto);
  return file_level_enum_descriptors_Nvtx_2eproto[4];
}
bool NvtxNameFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NvtxRequestStateMessage_TypeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxRequestStateMessage_TypeInfo>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NvtxRequestStateMessage_TypeInfo::NvtxRequestStateMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxRequestStateMessage.TypeInfo)
}
NvtxRequestStateMessage_TypeInfo::NvtxRequestStateMessage_TypeInfo(const NvtxRequestStateMessage_TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:NvtxRequestStateMessage.TypeInfo)
}

void NvtxRequestStateMessage_TypeInfo::SharedCtor() {
  category_ = 1;
  method_ = 1;
}

NvtxRequestStateMessage_TypeInfo::~NvtxRequestStateMessage_TypeInfo() {
  // @@protoc_insertion_point(destructor:NvtxRequestStateMessage.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxRequestStateMessage_TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxRequestStateMessage_TypeInfo::ArenaDtor(void* object) {
  NvtxRequestStateMessage_TypeInfo* _this = reinterpret_cast< NvtxRequestStateMessage_TypeInfo* >(object);
  (void)_this;
}
void NvtxRequestStateMessage_TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxRequestStateMessage_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxRequestStateMessage_TypeInfo& NvtxRequestStateMessage_TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxRequestStateMessage_TypeInfo_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxRequestStateMessage_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxRequestStateMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 1;
    method_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxRequestStateMessage_TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxCategory_IsValid(val))) {
            _internal_set_category(static_cast<::NvtxCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .NvtxMethod Method = 2 [default = NvtxMethodRequestStateMessage];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxMethod_IsValid(val))) {
            _internal_set_method(static_cast<::NvtxMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxRequestStateMessage_TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxRequestStateMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional .NvtxMethod Method = 2 [default = NvtxMethodRequestStateMessage];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxRequestStateMessage.TypeInfo)
  return target;
}

size_t NvtxRequestStateMessage_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxRequestStateMessage.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .NvtxMethod Method = 2 [default = NvtxMethodRequestStateMessage];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxRequestStateMessage_TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxRequestStateMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxRequestStateMessage_TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxRequestStateMessage_TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxRequestStateMessage.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxRequestStateMessage.TypeInfo)
    MergeFrom(*source);
  }
}

void NvtxRequestStateMessage_TypeInfo::MergeFrom(const NvtxRequestStateMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxRequestStateMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxRequestStateMessage_TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxRequestStateMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxRequestStateMessage_TypeInfo::CopyFrom(const NvtxRequestStateMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxRequestStateMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxRequestStateMessage_TypeInfo::IsInitialized() const {
  return true;
}

void NvtxRequestStateMessage_TypeInfo::InternalSwap(NvtxRequestStateMessage_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxRequestStateMessage_TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxRequestStateMessage::_Internal {
 public:
};

NvtxRequestStateMessage::NvtxRequestStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxRequestStateMessage)
}
NvtxRequestStateMessage::NvtxRequestStateMessage(const NvtxRequestStateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NvtxRequestStateMessage)
}

void NvtxRequestStateMessage::SharedCtor() {
}

NvtxRequestStateMessage::~NvtxRequestStateMessage() {
  // @@protoc_insertion_point(destructor:NvtxRequestStateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxRequestStateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxRequestStateMessage::ArenaDtor(void* object) {
  NvtxRequestStateMessage* _this = reinterpret_cast< NvtxRequestStateMessage* >(object);
  (void)_this;
}
void NvtxRequestStateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxRequestStateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxRequestStateMessage& NvtxRequestStateMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxRequestStateMessage_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxRequestStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxRequestStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxRequestStateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxRequestStateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxRequestStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxRequestStateMessage)
  return target;
}

size_t NvtxRequestStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxRequestStateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxRequestStateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxRequestStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxRequestStateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxRequestStateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxRequestStateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxRequestStateMessage)
    MergeFrom(*source);
  }
}

void NvtxRequestStateMessage::MergeFrom(const NvtxRequestStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxRequestStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NvtxRequestStateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxRequestStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxRequestStateMessage::CopyFrom(const NvtxRequestStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxRequestStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxRequestStateMessage::IsInitialized() const {
  return true;
}

void NvtxRequestStateMessage::InternalSwap(NvtxRequestStateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxRequestStateMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxPayload>()._has_bits_);
  static void set_has_payloadtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ullvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_doublevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ivalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

NvtxPayload::NvtxPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxPayload)
}
NvtxPayload::NvtxPayload(const NvtxPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ullvalue_, &from.ullvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&fvalue_) -
    reinterpret_cast<char*>(&ullvalue_)) + sizeof(fvalue_));
  // @@protoc_insertion_point(copy_constructor:NvtxPayload)
}

void NvtxPayload::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ullvalue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fvalue_) -
      reinterpret_cast<char*>(&ullvalue_)) + sizeof(fvalue_));
}

NvtxPayload::~NvtxPayload() {
  // @@protoc_insertion_point(destructor:NvtxPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxPayload::ArenaDtor(void* object) {
  NvtxPayload* _this = reinterpret_cast< NvtxPayload* >(object);
  (void)_this;
}
void NvtxPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxPayload& NvtxPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxPayload_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&ullvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fvalue_) -
        reinterpret_cast<char*>(&ullvalue_)) + sizeof(fvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NvtxPayloadType PayloadType = 1 [default = NvtxPayloadTypeUnknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxPayloadType_IsValid(val))) {
            _internal_set_payloadtype(static_cast<::NvtxPayloadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 ULLValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ullvalue(&has_bits);
          ullvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 LLValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_llvalue(&has_bits);
          llvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double DoubleValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_doublevalue(&has_bits);
          doublevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 UValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uvalue(&has_bits);
          uvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 IValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ivalue(&has_bits);
          ivalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float FValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fvalue(&has_bits);
          fvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NvtxPayloadType PayloadType = 1 [default = NvtxPayloadTypeUnknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_payloadtype(), target);
  }

  // optional uint64 ULLValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ullvalue(), target);
  }

  // optional int64 LLValue = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_llvalue(), target);
  }

  // optional double DoubleValue = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_doublevalue(), target);
  }

  // optional uint32 UValue = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uvalue(), target);
  }

  // optional int32 IValue = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ivalue(), target);
  }

  // optional float FValue = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxPayload)
  return target;
}

size_t NvtxPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxPayload)
  size_t total_size = 0;

  // required .NvtxPayloadType PayloadType = 1 [default = NvtxPayloadTypeUnknown];
  if (_internal_has_payloadtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payloadtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ULLValue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ullvalue());
    }

    // optional int64 LLValue = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_llvalue());
    }

  }
  if (cached_has_bits & 0x00000078u) {
    // optional uint32 UValue = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uvalue());
    }

    // optional double DoubleValue = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 IValue = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ivalue());
    }

    // optional float FValue = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxPayload)
    MergeFrom(*source);
  }
}

void NvtxPayload::MergeFrom(const NvtxPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ullvalue_ = from.ullvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      llvalue_ = from.llvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      payloadtype_ = from.payloadtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      uvalue_ = from.uvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      doublevalue_ = from.doublevalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      ivalue_ = from.ivalue_;
    }
    if (cached_has_bits & 0x00000040u) {
      fvalue_ = from.fvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxPayload::CopyFrom(const NvtxPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxPayload::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NvtxPayload::InternalSwap(NvtxPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxPayload, fvalue_)
      + sizeof(NvtxPayload::fvalue_)
      - PROTOBUF_FIELD_OFFSET(NvtxPayload, ullvalue_)>(
          reinterpret_cast<char*>(&ullvalue_),
          reinterpret_cast<char*>(&other->ullvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

NvtxMessage::NvtxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxMessage)
}
NvtxMessage::NvtxMessage(const NvtxMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(messagetype_));
  // @@protoc_insertion_point(copy_constructor:NvtxMessage)
}

void NvtxMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxMessage_Nvtx_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(messagetype_));
}

NvtxMessage::~NvtxMessage() {
  // @@protoc_insertion_point(destructor:NvtxMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NvtxMessage::ArenaDtor(void* object) {
  NvtxMessage* _this = reinterpret_cast< NvtxMessage* >(object);
  (void)_this;
}
void NvtxMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxMessage& NvtxMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxMessage_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messagetype_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(messagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NvtxMessageType MessageType = 1 [default = NvtxMessageTypeUnknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::NvtxMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NvtxMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NvtxMessageType MessageType = 1 [default = NvtxMessageTypeUnknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NvtxMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional uint64 handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxMessage)
  return target;
}

size_t NvtxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxMessage)
  size_t total_size = 0;

  // required .NvtxMessageType MessageType = 1 [default = NvtxMessageTypeUnknown];
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint64 handle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxMessage)
    MergeFrom(*source);
  }
}

void NvtxMessage::MergeFrom(const NvtxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxMessage::CopyFrom(const NvtxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NvtxMessage::InternalSwap(NvtxMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxMessage, messagetype_)
      + sizeof(NvtxMessage::messagetype_)
      - PROTOBUF_FIELD_OFFSET(NvtxMessage, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxColor::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxColor>()._has_bits_);
  static void set_has_colortype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NvtxColor::NvtxColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxColor)
}
NvtxColor::NvtxColor(const NvtxColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&colortype_, &from.colortype_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&colortype_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:NvtxColor)
}

void NvtxColor::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&colortype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&colortype_)) + sizeof(color_));
}

NvtxColor::~NvtxColor() {
  // @@protoc_insertion_point(destructor:NvtxColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxColor::ArenaDtor(void* object) {
  NvtxColor* _this = reinterpret_cast< NvtxColor* >(object);
  (void)_this;
}
void NvtxColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxColor& NvtxColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxColor_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxColor::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&colortype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&colortype_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NvtxColorType ColorType = 1 [default = NvtxColorTypeUnknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxColorType_IsValid(val))) {
            _internal_set_colortype(static_cast<::NvtxColorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 Color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NvtxColorType ColorType = 1 [default = NvtxColorTypeUnknown];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_colortype(), target);
  }

  // optional uint32 Color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxColor)
  return target;
}

size_t NvtxColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxColor)
  size_t total_size = 0;

  // required .NvtxColorType ColorType = 1 [default = NvtxColorTypeUnknown];
  if (_internal_has_colortype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_colortype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 Color = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxColor)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxColor)
    MergeFrom(*source);
  }
}

void NvtxColor::MergeFrom(const NvtxColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      colortype_ = from.colortype_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxColor::CopyFrom(const NvtxColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxColor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NvtxColor::InternalSwap(NvtxColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxColor, color_)
      + sizeof(NvtxColor::color_)
      - PROTOBUF_FIELD_OFFSET(NvtxColor, colortype_)>(
          reinterpret_cast<char*>(&colortype_),
          reinterpret_cast<char*>(&other->colortype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxEventAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxEventAttributes>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::NvtxColor& color(const NvtxEventAttributes* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NvtxPayload& payload(const NvtxEventAttributes* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::NvtxMessage& message(const NvtxEventAttributes* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::NvtxColor&
NvtxEventAttributes::_Internal::color(const NvtxEventAttributes* msg) {
  return *msg->color_;
}
const ::NvtxPayload&
NvtxEventAttributes::_Internal::payload(const NvtxEventAttributes* msg) {
  return *msg->payload_;
}
const ::NvtxMessage&
NvtxEventAttributes::_Internal::message(const NvtxEventAttributes* msg) {
  return *msg->message_;
}
NvtxEventAttributes::NvtxEventAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxEventAttributes)
}
NvtxEventAttributes::NvtxEventAttributes(const NvtxEventAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::NvtxColor(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::NvtxPayload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::NvtxMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&version_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:NvtxEventAttributes)
}

void NvtxEventAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxEventAttributes_Nvtx_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&color_)) + sizeof(category_));
}

NvtxEventAttributes::~NvtxEventAttributes() {
  // @@protoc_insertion_point(destructor:NvtxEventAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxEventAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete message_;
}

void NvtxEventAttributes::ArenaDtor(void* object) {
  NvtxEventAttributes* _this = reinterpret_cast< NvtxEventAttributes* >(object);
  (void)_this;
}
void NvtxEventAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxEventAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxEventAttributes& NvtxEventAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxEventAttributes_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxEventAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxEventAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&version_)) + sizeof(category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxEventAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 Category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_category(&has_bits);
          category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NvtxColor Color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NvtxPayload Payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NvtxMessage Message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxEventAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxEventAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // required uint32 Category = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_category(), target);
  }

  // required .NvtxColor Color = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // required .NvtxPayload Payload = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::payload(this), target, stream);
  }

  // required .NvtxMessage Message = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxEventAttributes)
  return target;
}

size_t NvtxEventAttributes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NvtxEventAttributes)
  size_t total_size = 0;

  if (_internal_has_color()) {
    // required .NvtxColor Color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (_internal_has_payload()) {
    // required .NvtxPayload Payload = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (_internal_has_message()) {
    // required .NvtxMessage Message = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (_internal_has_version()) {
    // required uint32 Version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (_internal_has_category()) {
    // required uint32 Category = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_category());
  }

  return total_size;
}
size_t NvtxEventAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxEventAttributes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .NvtxColor Color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);

    // required .NvtxPayload Payload = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);

    // required .NvtxMessage Message = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);

    // required uint32 Version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());

    // required uint32 Category = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_category());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxEventAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxEventAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxEventAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxEventAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxEventAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxEventAttributes)
    MergeFrom(*source);
  }
}

void NvtxEventAttributes::MergeFrom(const NvtxEventAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxEventAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::NvtxColor::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payload()->::NvtxPayload::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_message()->::NvtxMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxEventAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxEventAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxEventAttributes::CopyFrom(const NvtxEventAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxEventAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxEventAttributes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_payload()) {
    if (!payload_->IsInitialized()) return false;
  }
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void NvtxEventAttributes::InternalSwap(NvtxEventAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxEventAttributes, category_)
      + sizeof(NvtxEventAttributes::category_)
      - PROTOBUF_FIELD_OFFSET(NvtxEventAttributes, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxEventAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxPushPopRange::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxPushPopRange>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NvtxEventAttributes& attributes(const NvtxPushPopRange* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastapicallid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::NvtxEventAttributes&
NvtxPushPopRange::_Internal::attributes(const NvtxPushPopRange* msg) {
  return *msg->attributes_;
}
NvtxPushPopRange::NvtxPushPopRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxPushPopRange)
}
NvtxPushPopRange::NvtxPushPopRange(const NvtxPushPopRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::NvtxEventAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  lastapicallid_ = from.lastapicallid_;
  // @@protoc_insertion_point(copy_constructor:NvtxPushPopRange)
}

void NvtxPushPopRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxPushPopRange_Nvtx_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attributes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lastapicallid_) -
      reinterpret_cast<char*>(&attributes_)) + sizeof(lastapicallid_));
}

NvtxPushPopRange::~NvtxPushPopRange() {
  // @@protoc_insertion_point(destructor:NvtxPushPopRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxPushPopRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
}

void NvtxPushPopRange::ArenaDtor(void* object) {
  NvtxPushPopRange* _this = reinterpret_cast< NvtxPushPopRange* >(object);
  (void)_this;
}
void NvtxPushPopRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxPushPopRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxPushPopRange& NvtxPushPopRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxPushPopRange_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxPushPopRange::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxPushPopRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  lastapicallid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxPushPopRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NvtxPushPopRange.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NvtxEventAttributes Attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 LastApiCallId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastapicallid(&has_bits);
          lastapicallid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxPushPopRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxPushPopRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NvtxPushPopRange.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .NvtxEventAttributes Attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  // optional uint64 LastApiCallId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastapicallid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxPushPopRange)
  return target;
}

size_t NvtxPushPopRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxPushPopRange)
  size_t total_size = 0;

  // required string Name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .NvtxEventAttributes Attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

    // optional uint64 LastApiCallId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lastapicallid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxPushPopRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxPushPopRange)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxPushPopRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxPushPopRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxPushPopRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxPushPopRange)
    MergeFrom(*source);
  }
}

void NvtxPushPopRange::MergeFrom(const NvtxPushPopRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxPushPopRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::NvtxEventAttributes::MergeFrom(from._internal_attributes());
    }
    if (cached_has_bits & 0x00000004u) {
      lastapicallid_ = from.lastapicallid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxPushPopRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxPushPopRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxPushPopRange::CopyFrom(const NvtxPushPopRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxPushPopRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxPushPopRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  return true;
}

void NvtxPushPopRange::InternalSwap(NvtxPushPopRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxPushPopRange, lastapicallid_)
      + sizeof(NvtxPushPopRange::lastapicallid_)
      - PROTOBUF_FIELD_OFFSET(NvtxPushPopRange, attributes_)>(
          reinterpret_cast<char*>(&attributes_),
          reinterpret_cast<char*>(&other->attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxPushPopRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxStartEndRange::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxStartEndRange>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NvtxEventAttributes& attributes(const NvtxStartEndRange* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastapicallid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_starttid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::NvtxEventAttributes&
NvtxStartEndRange::_Internal::attributes(const NvtxStartEndRange* msg) {
  return *msg->attributes_;
}
NvtxStartEndRange::NvtxStartEndRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxStartEndRange)
}
NvtxStartEndRange::NvtxStartEndRange(const NvtxStartEndRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::NvtxEventAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(starttid_));
  // @@protoc_insertion_point(copy_constructor:NvtxStartEndRange)
}

void NvtxStartEndRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxStartEndRange_Nvtx_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&attributes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&starttid_) -
      reinterpret_cast<char*>(&attributes_)) + sizeof(starttid_));
}

NvtxStartEndRange::~NvtxStartEndRange() {
  // @@protoc_insertion_point(destructor:NvtxStartEndRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxStartEndRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
}

void NvtxStartEndRange::ArenaDtor(void* object) {
  NvtxStartEndRange* _this = reinterpret_cast< NvtxStartEndRange* >(object);
  (void)_this;
}
void NvtxStartEndRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxStartEndRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxStartEndRange& NvtxStartEndRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxStartEndRange_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxStartEndRange::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxStartEndRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starttid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(starttid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxStartEndRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NvtxStartEndRange.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NvtxEventAttributes Attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 LastApiCallId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lastapicallid(&has_bits);
          lastapicallid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 StartTID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_starttid(&has_bits);
          starttid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxStartEndRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxStartEndRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NvtxStartEndRange.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .NvtxEventAttributes Attributes = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attributes(this), target, stream);
  }

  // optional uint64 LastApiCallId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lastapicallid(), target);
  }

  // optional uint32 StartTID = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_starttid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxStartEndRange)
  return target;
}

size_t NvtxStartEndRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NvtxStartEndRange)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string Name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  return total_size;
}
size_t NvtxStartEndRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxStartEndRange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string Name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .NvtxEventAttributes Attributes = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint64 LastApiCallId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lastapicallid());
    }

    // optional uint32 StartTID = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starttid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxStartEndRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxStartEndRange)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxStartEndRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxStartEndRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxStartEndRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxStartEndRange)
    MergeFrom(*source);
  }
}

void NvtxStartEndRange::MergeFrom(const NvtxStartEndRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxStartEndRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::NvtxEventAttributes::MergeFrom(from._internal_attributes());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastapicallid_ = from.lastapicallid_;
    }
    if (cached_has_bits & 0x00000010u) {
      starttid_ = from.starttid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxStartEndRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxStartEndRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxStartEndRange::CopyFrom(const NvtxStartEndRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxStartEndRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxStartEndRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  return true;
}

void NvtxStartEndRange::InternalSwap(NvtxStartEndRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NvtxStartEndRange, starttid_)
      + sizeof(NvtxStartEndRange::starttid_)
      - PROTOBUF_FIELD_OFFSET(NvtxStartEndRange, attributes_)>(
          reinterpret_cast<char*>(&attributes_),
          reinterpret_cast<char*>(&other->attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxStartEndRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxPushPopDomain::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxPushPopDomain>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NvtxPushPopDomain::NvtxPushPopDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxPushPopDomain)
}
NvtxPushPopDomain::NvtxPushPopDomain(const NvtxPushPopDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NvtxPushPopDomain)
}

void NvtxPushPopDomain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxPushPopDomain_Nvtx_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
}

NvtxPushPopDomain::~NvtxPushPopDomain() {
  // @@protoc_insertion_point(destructor:NvtxPushPopDomain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxPushPopDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxPushPopDomain::ArenaDtor(void* object) {
  NvtxPushPopDomain* _this = reinterpret_cast< NvtxPushPopDomain* >(object);
  (void)_this;
}
void NvtxPushPopDomain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxPushPopDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxPushPopDomain& NvtxPushPopDomain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxPushPopDomain_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxPushPopDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxPushPopDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxPushPopDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NvtxPushPopRange Stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxPushPopDomain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxPushPopDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .NvtxPushPopRange Stack = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stack(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxPushPopDomain)
  return target;
}

size_t NvtxPushPopDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxPushPopDomain)
  size_t total_size = 0;

  // required uint64 Id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxPushPopRange Stack = 3;
  total_size += 1UL * this->_internal_stack_size();
  for (const auto& msg : this->stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxPushPopDomain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxPushPopDomain)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxPushPopDomain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxPushPopDomain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxPushPopDomain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxPushPopDomain)
    MergeFrom(*source);
  }
}

void NvtxPushPopDomain::MergeFrom(const NvtxPushPopDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxPushPopDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void NvtxPushPopDomain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxPushPopDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxPushPopDomain::CopyFrom(const NvtxPushPopDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxPushPopDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxPushPopDomain::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stack_)) return false;
  return true;
}

void NvtxPushPopDomain::InternalSwap(NvtxPushPopDomain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stack_.InternalSwap(&other->stack_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxPushPopDomain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxStartEndDomain::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxStartEndDomain>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NvtxStartEndDomain::NvtxStartEndDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxStartEndDomain)
}
NvtxStartEndDomain::NvtxStartEndDomain(const NvtxStartEndDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NvtxStartEndDomain)
}

void NvtxStartEndDomain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxStartEndDomain_Nvtx_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
}

NvtxStartEndDomain::~NvtxStartEndDomain() {
  // @@protoc_insertion_point(destructor:NvtxStartEndDomain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxStartEndDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxStartEndDomain::ArenaDtor(void* object) {
  NvtxStartEndDomain* _this = reinterpret_cast< NvtxStartEndDomain* >(object);
  (void)_this;
}
void NvtxStartEndDomain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxStartEndDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxStartEndDomain& NvtxStartEndDomain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxStartEndDomain_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxStartEndDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxStartEndDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxStartEndDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NvtxStartEndRange Ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxStartEndDomain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxStartEndDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .NvtxStartEndRange Ranges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxStartEndDomain)
  return target;
}

size_t NvtxStartEndDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxStartEndDomain)
  size_t total_size = 0;

  // required uint64 Id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxStartEndRange Ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxStartEndDomain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxStartEndDomain)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxStartEndDomain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxStartEndDomain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxStartEndDomain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxStartEndDomain)
    MergeFrom(*source);
  }
}

void NvtxStartEndDomain::MergeFrom(const NvtxStartEndDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxStartEndDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void NvtxStartEndDomain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxStartEndDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxStartEndDomain::CopyFrom(const NvtxStartEndDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxStartEndDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxStartEndDomain::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ranges_)) return false;
  return true;
}

void NvtxStartEndDomain::InternalSwap(NvtxStartEndDomain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_.InternalSwap(&other->ranges_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxStartEndDomain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxRegisteredString::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxRegisteredString>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

NvtxRegisteredString::NvtxRegisteredString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxRegisteredString)
}
NvtxRegisteredString::NvtxRegisteredString(const NvtxRegisteredString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NvtxRegisteredString)
}

void NvtxRegisteredString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxRegisteredString_Nvtx_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

NvtxRegisteredString::~NvtxRegisteredString() {
  // @@protoc_insertion_point(destructor:NvtxRegisteredString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxRegisteredString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NvtxRegisteredString::ArenaDtor(void* object) {
  NvtxRegisteredString* _this = reinterpret_cast< NvtxRegisteredString* >(object);
  (void)_this;
}
void NvtxRegisteredString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxRegisteredString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxRegisteredString& NvtxRegisteredString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxRegisteredString_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxRegisteredString::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxRegisteredString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxRegisteredString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NvtxRegisteredString.Value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxRegisteredString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxRegisteredString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NvtxRegisteredString.Value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxRegisteredString)
  return target;
}

size_t NvtxRegisteredString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NvtxRegisteredString)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  return total_size;
}
size_t NvtxRegisteredString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxRegisteredString)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxRegisteredString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxRegisteredString)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxRegisteredString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxRegisteredString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxRegisteredString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxRegisteredString)
    MergeFrom(*source);
  }
}

void NvtxRegisteredString::MergeFrom(const NvtxRegisteredString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxRegisteredString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxRegisteredString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxRegisteredString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxRegisteredString::CopyFrom(const NvtxRegisteredString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxRegisteredString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxRegisteredString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NvtxRegisteredString::InternalSwap(NvtxRegisteredString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxRegisteredString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxDomainInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxDomainInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

NvtxDomainInfo::NvtxDomainInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strings_(arena),
  nametables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxDomainInfo)
}
NvtxDomainInfo::NvtxDomainInfo(const NvtxDomainInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strings_(from.strings_),
      nametables_(from.nametables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NvtxDomainInfo)
}

void NvtxDomainInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxDomainInfo_Nvtx_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

NvtxDomainInfo::~NvtxDomainInfo() {
  // @@protoc_insertion_point(destructor:NvtxDomainInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxDomainInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NvtxDomainInfo::ArenaDtor(void* object) {
  NvtxDomainInfo* _this = reinterpret_cast< NvtxDomainInfo* >(object);
  (void)_this;
}
void NvtxDomainInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxDomainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxDomainInfo& NvtxDomainInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxDomainInfo_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxDomainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxDomainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  nametables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxDomainInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NvtxDomainInfo.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NvtxRegisteredString Strings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NvtxNameTable NameTables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nametables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxDomainInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxDomainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NvtxDomainInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .NvtxRegisteredString Strings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_strings(i), target, stream);
  }

  // repeated .NvtxNameTable NameTables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nametables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nametables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxDomainInfo)
  return target;
}

size_t NvtxDomainInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NvtxDomainInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string Name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  return total_size;
}
size_t NvtxDomainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxDomainInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 Id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxRegisteredString Strings = 3;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NvtxNameTable NameTables = 4;
  total_size += 1UL * this->_internal_nametables_size();
  for (const auto& msg : this->nametables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxDomainInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxDomainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxDomainInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxDomainInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxDomainInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxDomainInfo)
    MergeFrom(*source);
  }
}

void NvtxDomainInfo::MergeFrom(const NvtxDomainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxDomainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
  nametables_.MergeFrom(from.nametables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxDomainInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxDomainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxDomainInfo::CopyFrom(const NvtxDomainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxDomainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxDomainInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(strings_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nametables_)) return false;
  return true;
}

void NvtxDomainInfo::InternalSwap(NvtxDomainInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strings_.InternalSwap(&other->strings_);
  nametables_.InternalSwap(&other->nametables_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxDomainInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxThread::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxThread>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NvtxThread::NvtxThread(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pushpopdomains_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxThread)
}
NvtxThread::NvtxThread(const NvtxThread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pushpopdomains_(from.pushpopdomains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tid_ = from.tid_;
  // @@protoc_insertion_point(copy_constructor:NvtxThread)
}

void NvtxThread::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxThread_Nvtx_2eproto.base);
  tid_ = 0u;
}

NvtxThread::~NvtxThread() {
  // @@protoc_insertion_point(destructor:NvtxThread)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxThread::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxThread::ArenaDtor(void* object) {
  NvtxThread* _this = reinterpret_cast< NvtxThread* >(object);
  (void)_this;
}
void NvtxThread::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxThread::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxThread& NvtxThread::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxThread_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxThread::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pushpopdomains_.Clear();
  tid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxThread::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 TID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NvtxPushPopDomain PushPopDomains = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushpopdomains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxThread::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 TID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tid(), target);
  }

  // repeated .NvtxPushPopDomain PushPopDomains = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pushpopdomains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pushpopdomains(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxThread)
  return target;
}

size_t NvtxThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxThread)
  size_t total_size = 0;

  // required uint32 TID = 1;
  if (_internal_has_tid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxPushPopDomain PushPopDomains = 2;
  total_size += 1UL * this->_internal_pushpopdomains_size();
  for (const auto& msg : this->pushpopdomains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxThread::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxThread)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxThread* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxThread>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxThread)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxThread)
    MergeFrom(*source);
  }
}

void NvtxThread::MergeFrom(const NvtxThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxThread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pushpopdomains_.MergeFrom(from.pushpopdomains_);
  if (from._internal_has_tid()) {
    _internal_set_tid(from._internal_tid());
  }
}

void NvtxThread::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxThread::CopyFrom(const NvtxThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxThread::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pushpopdomains_)) return false;
  return true;
}

void NvtxThread::InternalSwap(NvtxThread* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pushpopdomains_.InternalSwap(&other->pushpopdomains_);
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxThread::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxNameTable::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxNameTable>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NvtxNameTable::NvtxNameTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mappings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxNameTable)
}
NvtxNameTable::NvtxNameTable(const NvtxNameTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  family_ = from.family_;
  // @@protoc_insertion_point(copy_constructor:NvtxNameTable)
}

void NvtxNameTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxNameTable_Nvtx_2eproto.base);
  family_ = 0;
}

NvtxNameTable::~NvtxNameTable() {
  // @@protoc_insertion_point(destructor:NvtxNameTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxNameTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxNameTable::ArenaDtor(void* object) {
  NvtxNameTable* _this = reinterpret_cast< NvtxNameTable* >(object);
  (void)_this;
}
void NvtxNameTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxNameTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxNameTable& NvtxNameTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxNameTable_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxNameTable::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxNameTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  family_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxNameTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NvtxNameFamily Family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxNameFamily_IsValid(val))) {
            _internal_set_family(static_cast<::NvtxNameFamily>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .NvtxRegisteredString Mappings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxNameTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxNameTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NvtxNameFamily Family = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_family(), target);
  }

  // repeated .NvtxRegisteredString Mappings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mappings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxNameTable)
  return target;
}

size_t NvtxNameTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxNameTable)
  size_t total_size = 0;

  // required .NvtxNameFamily Family = 1;
  if (_internal_has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxRegisteredString Mappings = 2;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxNameTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxNameTable)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxNameTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxNameTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxNameTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxNameTable)
    MergeFrom(*source);
  }
}

void NvtxNameTable::MergeFrom(const NvtxNameTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxNameTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  if (from._internal_has_family()) {
    _internal_set_family(from._internal_family());
  }
}

void NvtxNameTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxNameTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxNameTable::CopyFrom(const NvtxNameTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxNameTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxNameTable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mappings_)) return false;
  return true;
}

void NvtxNameTable::InternalSwap(NvtxNameTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mappings_.InternalSwap(&other->mappings_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxNameTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxState::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxState>()._has_bits_);
  static void set_has_defaultdomain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NvtxState::NvtxState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  domains_(arena),
  threads_(arena),
  startenddomains_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxState)
}
NvtxState::NvtxState(const NvtxState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      domains_(from.domains_),
      threads_(from.threads_),
      startenddomains_(from.startenddomains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  defaultdomain_ = from.defaultdomain_;
  // @@protoc_insertion_point(copy_constructor:NvtxState)
}

void NvtxState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxState_Nvtx_2eproto.base);
  defaultdomain_ = PROTOBUF_ULONGLONG(0);
}

NvtxState::~NvtxState() {
  // @@protoc_insertion_point(destructor:NvtxState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxState::ArenaDtor(void* object) {
  NvtxState* _this = reinterpret_cast< NvtxState* >(object);
  (void)_this;
}
void NvtxState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxState& NvtxState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxState_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxState::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  threads_.Clear();
  startenddomains_.Clear();
  defaultdomain_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NvtxDomainInfo Domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NvtxThread Threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NvtxStartEndDomain StartEndDomains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_startenddomains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 DefaultDomain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_defaultdomain(&has_bits);
          defaultdomain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NvtxDomainInfo Domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_domains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_domains(i), target, stream);
  }

  // repeated .NvtxThread Threads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_threads(i), target, stream);
  }

  // repeated .NvtxStartEndDomain StartEndDomains = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_startenddomains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_startenddomains(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 DefaultDomain = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_defaultdomain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxState)
  return target;
}

size_t NvtxState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NvtxDomainInfo Domains = 1;
  total_size += 1UL * this->_internal_domains_size();
  for (const auto& msg : this->domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NvtxThread Threads = 2;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->threads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NvtxStartEndDomain StartEndDomains = 3;
  total_size += 1UL * this->_internal_startenddomains_size();
  for (const auto& msg : this->startenddomains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 DefaultDomain = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_defaultdomain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxState)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxState)
    MergeFrom(*source);
  }
}

void NvtxState::MergeFrom(const NvtxState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  threads_.MergeFrom(from.threads_);
  startenddomains_.MergeFrom(from.startenddomains_);
  if (from._internal_has_defaultdomain()) {
    _internal_set_defaultdomain(from._internal_defaultdomain());
  }
}

void NvtxState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxState::CopyFrom(const NvtxState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(domains_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(threads_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(startenddomains_)) return false;
  return true;
}

void NvtxState::InternalSwap(NvtxState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domains_.InternalSwap(&other->domains_);
  threads_.InternalSwap(&other->threads_);
  startenddomains_.InternalSwap(&other->startenddomains_);
  swap(defaultdomain_, other->defaultdomain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxReplyStateMessage_TypeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxReplyStateMessage_TypeInfo>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NvtxReplyStateMessage_TypeInfo::NvtxReplyStateMessage_TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxReplyStateMessage.TypeInfo)
}
NvtxReplyStateMessage_TypeInfo::NvtxReplyStateMessage_TypeInfo(const NvtxReplyStateMessage_TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&category_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:NvtxReplyStateMessage.TypeInfo)
}

void NvtxReplyStateMessage_TypeInfo::SharedCtor() {
  category_ = 1;
  method_ = 2;
}

NvtxReplyStateMessage_TypeInfo::~NvtxReplyStateMessage_TypeInfo() {
  // @@protoc_insertion_point(destructor:NvtxReplyStateMessage.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxReplyStateMessage_TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NvtxReplyStateMessage_TypeInfo::ArenaDtor(void* object) {
  NvtxReplyStateMessage_TypeInfo* _this = reinterpret_cast< NvtxReplyStateMessage_TypeInfo* >(object);
  (void)_this;
}
void NvtxReplyStateMessage_TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxReplyStateMessage_TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxReplyStateMessage_TypeInfo& NvtxReplyStateMessage_TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxReplyStateMessage_TypeInfo_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxReplyStateMessage_TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxReplyStateMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    category_ = 1;
    method_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxReplyStateMessage_TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxCategory_IsValid(val))) {
            _internal_set_category(static_cast<::NvtxCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .NvtxMethod Method = 2 [default = NvtxMethodReplyStateMessage];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NvtxMethod_IsValid(val))) {
            _internal_set_method(static_cast<::NvtxMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxReplyStateMessage_TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxReplyStateMessage.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional .NvtxMethod Method = 2 [default = NvtxMethodReplyStateMessage];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxReplyStateMessage.TypeInfo)
  return target;
}

size_t NvtxReplyStateMessage_TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxReplyStateMessage.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .NvtxCategory Category = 1 [default = NvtxCategoryState];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .NvtxMethod Method = 2 [default = NvtxMethodReplyStateMessage];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxReplyStateMessage_TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxReplyStateMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxReplyStateMessage_TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxReplyStateMessage_TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxReplyStateMessage.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxReplyStateMessage.TypeInfo)
    MergeFrom(*source);
  }
}

void NvtxReplyStateMessage_TypeInfo::MergeFrom(const NvtxReplyStateMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxReplyStateMessage.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NvtxReplyStateMessage_TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxReplyStateMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxReplyStateMessage_TypeInfo::CopyFrom(const NvtxReplyStateMessage_TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxReplyStateMessage.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxReplyStateMessage_TypeInfo::IsInitialized() const {
  return true;
}

void NvtxReplyStateMessage_TypeInfo::InternalSwap(NvtxReplyStateMessage_TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxReplyStateMessage_TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NvtxReplyStateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NvtxReplyStateMessage>()._has_bits_);
  static const ::NvtxState& state(const NvtxReplyStateMessage* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::NvtxState&
NvtxReplyStateMessage::_Internal::state(const NvtxReplyStateMessage* msg) {
  return *msg->state_;
}
NvtxReplyStateMessage::NvtxReplyStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NvtxReplyStateMessage)
}
NvtxReplyStateMessage::NvtxReplyStateMessage(const NvtxReplyStateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::NvtxState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NvtxReplyStateMessage)
}

void NvtxReplyStateMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NvtxReplyStateMessage_Nvtx_2eproto.base);
  state_ = nullptr;
}

NvtxReplyStateMessage::~NvtxReplyStateMessage() {
  // @@protoc_insertion_point(destructor:NvtxReplyStateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NvtxReplyStateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void NvtxReplyStateMessage::ArenaDtor(void* object) {
  NvtxReplyStateMessage* _this = reinterpret_cast< NvtxReplyStateMessage* >(object);
  (void)_this;
}
void NvtxReplyStateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NvtxReplyStateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NvtxReplyStateMessage& NvtxReplyStateMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NvtxReplyStateMessage_Nvtx_2eproto.base);
  return *internal_default_instance();
}


void NvtxReplyStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:NvtxReplyStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NvtxReplyStateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .NvtxState State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NvtxReplyStateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NvtxReplyStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NvtxState State = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NvtxReplyStateMessage)
  return target;
}

size_t NvtxReplyStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NvtxReplyStateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .NvtxState State = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NvtxReplyStateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NvtxReplyStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NvtxReplyStateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NvtxReplyStateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NvtxReplyStateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NvtxReplyStateMessage)
    MergeFrom(*source);
  }
}

void NvtxReplyStateMessage::MergeFrom(const NvtxReplyStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NvtxReplyStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::NvtxState::MergeFrom(from._internal_state());
  }
}

void NvtxReplyStateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NvtxReplyStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NvtxReplyStateMessage::CopyFrom(const NvtxReplyStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NvtxReplyStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NvtxReplyStateMessage::IsInitialized() const {
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void NvtxReplyStateMessage::InternalSwap(NvtxReplyStateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NvtxReplyStateMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NvtxRequestStateMessage_TypeInfo* Arena::CreateMaybeMessage< ::NvtxRequestStateMessage_TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxRequestStateMessage_TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxRequestStateMessage* Arena::CreateMaybeMessage< ::NvtxRequestStateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxRequestStateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxPayload* Arena::CreateMaybeMessage< ::NvtxPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxMessage* Arena::CreateMaybeMessage< ::NvtxMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxColor* Arena::CreateMaybeMessage< ::NvtxColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxColor >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxEventAttributes* Arena::CreateMaybeMessage< ::NvtxEventAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxEventAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxPushPopRange* Arena::CreateMaybeMessage< ::NvtxPushPopRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxPushPopRange >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxStartEndRange* Arena::CreateMaybeMessage< ::NvtxStartEndRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxStartEndRange >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxPushPopDomain* Arena::CreateMaybeMessage< ::NvtxPushPopDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxPushPopDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxStartEndDomain* Arena::CreateMaybeMessage< ::NvtxStartEndDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxStartEndDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxRegisteredString* Arena::CreateMaybeMessage< ::NvtxRegisteredString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxRegisteredString >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxDomainInfo* Arena::CreateMaybeMessage< ::NvtxDomainInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxDomainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxThread* Arena::CreateMaybeMessage< ::NvtxThread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxThread >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxNameTable* Arena::CreateMaybeMessage< ::NvtxNameTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxNameTable >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxState* Arena::CreateMaybeMessage< ::NvtxState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxState >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxReplyStateMessage_TypeInfo* Arena::CreateMaybeMessage< ::NvtxReplyStateMessage_TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxReplyStateMessage_TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NvtxReplyStateMessage* Arena::CreateMaybeMessage< ::NvtxReplyStateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NvtxReplyStateMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
