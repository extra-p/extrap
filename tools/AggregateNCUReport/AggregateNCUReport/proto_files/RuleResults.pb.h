// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuleResults.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RuleResults_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RuleResults_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProfilerSection.pb.h"
#include "ProfilerCommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RuleResults_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RuleResults_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RuleResults_2eproto;
class RuleResult;
class RuleResultDefaultTypeInternal;
extern RuleResultDefaultTypeInternal _RuleResult_default_instance_;
class RuleResultBody;
class RuleResultBodyDefaultTypeInternal;
extern RuleResultBodyDefaultTypeInternal _RuleResultBody_default_instance_;
class RuleResultBodyItem;
class RuleResultBodyItemDefaultTypeInternal;
extern RuleResultBodyItemDefaultTypeInternal _RuleResultBodyItem_default_instance_;
class RuleResultMessage;
class RuleResultMessageDefaultTypeInternal;
extern RuleResultMessageDefaultTypeInternal _RuleResultMessage_default_instance_;
class RuleResultProposal;
class RuleResultProposalDefaultTypeInternal;
extern RuleResultProposalDefaultTypeInternal _RuleResultProposal_default_instance_;
class RuleResults;
class RuleResultsDefaultTypeInternal;
extern RuleResultsDefaultTypeInternal _RuleResults_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RuleResult* Arena::CreateMaybeMessage<::RuleResult>(Arena*);
template<> ::RuleResultBody* Arena::CreateMaybeMessage<::RuleResultBody>(Arena*);
template<> ::RuleResultBodyItem* Arena::CreateMaybeMessage<::RuleResultBodyItem>(Arena*);
template<> ::RuleResultMessage* Arena::CreateMaybeMessage<::RuleResultMessage>(Arena*);
template<> ::RuleResultProposal* Arena::CreateMaybeMessage<::RuleResultProposal>(Arena*);
template<> ::RuleResults* Arena::CreateMaybeMessage<::RuleResults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RuleResultMessageType : int {
  None_ = 0,
  Ok = 1,
  Warning = 2,
  Error = 3
};
bool RuleResultMessageType_IsValid(int value);
constexpr RuleResultMessageType RuleResultMessageType_MIN = None_;
constexpr RuleResultMessageType RuleResultMessageType_MAX = Error;
constexpr int RuleResultMessageType_ARRAYSIZE = RuleResultMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuleResultMessageType_descriptor();
template<typename T>
inline const std::string& RuleResultMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RuleResultMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RuleResultMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RuleResultMessageType_descriptor(), enum_t_value);
}
inline bool RuleResultMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuleResultMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RuleResultMessageType>(
    RuleResultMessageType_descriptor(), name, value);
}
// ===================================================================

class RuleResultMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResultMessage) */ {
 public:
  inline RuleResultMessage() : RuleResultMessage(nullptr) {}
  virtual ~RuleResultMessage();

  RuleResultMessage(const RuleResultMessage& from);
  RuleResultMessage(RuleResultMessage&& from) noexcept
    : RuleResultMessage() {
    *this = ::std::move(from);
  }

  inline RuleResultMessage& operator=(const RuleResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResultMessage& operator=(RuleResultMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResultMessage& default_instance();

  static inline const RuleResultMessage* internal_default_instance() {
    return reinterpret_cast<const RuleResultMessage*>(
               &_RuleResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuleResultMessage& a, RuleResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResultMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResultMessage* New() const final {
    return CreateMaybeMessage<RuleResultMessage>(nullptr);
  }

  RuleResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResultMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResultMessage& from);
  void MergeFrom(const RuleResultMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResultMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResultMessage";
  }
  protected:
  explicit RuleResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string Message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required .RuleResultMessageType Type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::RuleResultMessageType type() const;
  void set_type(::RuleResultMessageType value);
  private:
  ::RuleResultMessageType _internal_type() const;
  void _internal_set_type(::RuleResultMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:RuleResultMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int type_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// -------------------------------------------------------------------

class RuleResultProposal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResultProposal) */ {
 public:
  inline RuleResultProposal() : RuleResultProposal(nullptr) {}
  virtual ~RuleResultProposal();

  RuleResultProposal(const RuleResultProposal& from);
  RuleResultProposal(RuleResultProposal&& from) noexcept
    : RuleResultProposal() {
    *this = ::std::move(from);
  }

  inline RuleResultProposal& operator=(const RuleResultProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResultProposal& operator=(RuleResultProposal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResultProposal& default_instance();

  static inline const RuleResultProposal* internal_default_instance() {
    return reinterpret_cast<const RuleResultProposal*>(
               &_RuleResultProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuleResultProposal& a, RuleResultProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResultProposal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResultProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResultProposal* New() const final {
    return CreateMaybeMessage<RuleResultProposal>(nullptr);
  }

  RuleResultProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResultProposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResultProposal& from);
  void MergeFrom(const RuleResultProposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResultProposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResultProposal";
  }
  protected:
  explicit RuleResultProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // required string Identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // @@protoc_insertion_point(class_scope:RuleResultProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// -------------------------------------------------------------------

class RuleResultBodyItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResultBodyItem) */ {
 public:
  inline RuleResultBodyItem() : RuleResultBodyItem(nullptr) {}
  virtual ~RuleResultBodyItem();

  RuleResultBodyItem(const RuleResultBodyItem& from);
  RuleResultBodyItem(RuleResultBodyItem&& from) noexcept
    : RuleResultBodyItem() {
    *this = ::std::move(from);
  }

  inline RuleResultBodyItem& operator=(const RuleResultBodyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResultBodyItem& operator=(RuleResultBodyItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResultBodyItem& default_instance();

  static inline const RuleResultBodyItem* internal_default_instance() {
    return reinterpret_cast<const RuleResultBodyItem*>(
               &_RuleResultBodyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RuleResultBodyItem& a, RuleResultBodyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResultBodyItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResultBodyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResultBodyItem* New() const final {
    return CreateMaybeMessage<RuleResultBodyItem>(nullptr);
  }

  RuleResultBodyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResultBodyItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResultBodyItem& from);
  void MergeFrom(const RuleResultBodyItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResultBodyItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResultBodyItem";
  }
  protected:
  explicit RuleResultBodyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTableFieldNumber = 2,
    kBarChartFieldNumber = 3,
    kHistogramChartFieldNumber = 4,
    kLineChartFieldNumber = 5,
    kProposalFieldNumber = 6,
  };
  // optional .RuleResultMessage Message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::RuleResultMessage& message() const;
  ::RuleResultMessage* release_message();
  ::RuleResultMessage* mutable_message();
  void set_allocated_message(::RuleResultMessage* message);
  private:
  const ::RuleResultMessage& _internal_message() const;
  ::RuleResultMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::RuleResultMessage* message);
  ::RuleResultMessage* unsafe_arena_release_message();

  // optional .ProfilerSectionTable Table = 2;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::ProfilerSectionTable& table() const;
  ::ProfilerSectionTable* release_table();
  ::ProfilerSectionTable* mutable_table();
  void set_allocated_table(::ProfilerSectionTable* table);
  private:
  const ::ProfilerSectionTable& _internal_table() const;
  ::ProfilerSectionTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::ProfilerSectionTable* table);
  ::ProfilerSectionTable* unsafe_arena_release_table();

  // optional .ProfilerSectionBarChart BarChart = 3;
  bool has_barchart() const;
  private:
  bool _internal_has_barchart() const;
  public:
  void clear_barchart();
  const ::ProfilerSectionBarChart& barchart() const;
  ::ProfilerSectionBarChart* release_barchart();
  ::ProfilerSectionBarChart* mutable_barchart();
  void set_allocated_barchart(::ProfilerSectionBarChart* barchart);
  private:
  const ::ProfilerSectionBarChart& _internal_barchart() const;
  ::ProfilerSectionBarChart* _internal_mutable_barchart();
  public:
  void unsafe_arena_set_allocated_barchart(
      ::ProfilerSectionBarChart* barchart);
  ::ProfilerSectionBarChart* unsafe_arena_release_barchart();

  // optional .ProfilerSectionHistogramChart HistogramChart = 4;
  bool has_histogramchart() const;
  private:
  bool _internal_has_histogramchart() const;
  public:
  void clear_histogramchart();
  const ::ProfilerSectionHistogramChart& histogramchart() const;
  ::ProfilerSectionHistogramChart* release_histogramchart();
  ::ProfilerSectionHistogramChart* mutable_histogramchart();
  void set_allocated_histogramchart(::ProfilerSectionHistogramChart* histogramchart);
  private:
  const ::ProfilerSectionHistogramChart& _internal_histogramchart() const;
  ::ProfilerSectionHistogramChart* _internal_mutable_histogramchart();
  public:
  void unsafe_arena_set_allocated_histogramchart(
      ::ProfilerSectionHistogramChart* histogramchart);
  ::ProfilerSectionHistogramChart* unsafe_arena_release_histogramchart();

  // optional .ProfilerSectionLineChart LineChart = 5;
  bool has_linechart() const;
  private:
  bool _internal_has_linechart() const;
  public:
  void clear_linechart();
  const ::ProfilerSectionLineChart& linechart() const;
  ::ProfilerSectionLineChart* release_linechart();
  ::ProfilerSectionLineChart* mutable_linechart();
  void set_allocated_linechart(::ProfilerSectionLineChart* linechart);
  private:
  const ::ProfilerSectionLineChart& _internal_linechart() const;
  ::ProfilerSectionLineChart* _internal_mutable_linechart();
  public:
  void unsafe_arena_set_allocated_linechart(
      ::ProfilerSectionLineChart* linechart);
  ::ProfilerSectionLineChart* unsafe_arena_release_linechart();

  // optional .RuleResultProposal Proposal = 6;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::RuleResultProposal& proposal() const;
  ::RuleResultProposal* release_proposal();
  ::RuleResultProposal* mutable_proposal();
  void set_allocated_proposal(::RuleResultProposal* proposal);
  private:
  const ::RuleResultProposal& _internal_proposal() const;
  ::RuleResultProposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::RuleResultProposal* proposal);
  ::RuleResultProposal* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:RuleResultBodyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RuleResultMessage* message_;
  ::ProfilerSectionTable* table_;
  ::ProfilerSectionBarChart* barchart_;
  ::ProfilerSectionHistogramChart* histogramchart_;
  ::ProfilerSectionLineChart* linechart_;
  ::RuleResultProposal* proposal_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// -------------------------------------------------------------------

class RuleResultBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResultBody) */ {
 public:
  inline RuleResultBody() : RuleResultBody(nullptr) {}
  virtual ~RuleResultBody();

  RuleResultBody(const RuleResultBody& from);
  RuleResultBody(RuleResultBody&& from) noexcept
    : RuleResultBody() {
    *this = ::std::move(from);
  }

  inline RuleResultBody& operator=(const RuleResultBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResultBody& operator=(RuleResultBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResultBody& default_instance();

  static inline const RuleResultBody* internal_default_instance() {
    return reinterpret_cast<const RuleResultBody*>(
               &_RuleResultBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuleResultBody& a, RuleResultBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResultBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResultBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResultBody* New() const final {
    return CreateMaybeMessage<RuleResultBody>(nullptr);
  }

  RuleResultBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResultBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResultBody& from);
  void MergeFrom(const RuleResultBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResultBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResultBody";
  }
  protected:
  explicit RuleResultBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .RuleResultBodyItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::RuleResultBodyItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResultBodyItem >*
      mutable_items();
  private:
  const ::RuleResultBodyItem& _internal_items(int index) const;
  ::RuleResultBodyItem* _internal_add_items();
  public:
  const ::RuleResultBodyItem& items(int index) const;
  ::RuleResultBodyItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResultBodyItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:RuleResultBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResultBodyItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// -------------------------------------------------------------------

class RuleResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResult) */ {
 public:
  inline RuleResult() : RuleResult(nullptr) {}
  virtual ~RuleResult();

  RuleResult(const RuleResult& from);
  RuleResult(RuleResult&& from) noexcept
    : RuleResult() {
    *this = ::std::move(from);
  }

  inline RuleResult& operator=(const RuleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResult& operator=(RuleResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResult& default_instance();

  static inline const RuleResult* internal_default_instance() {
    return reinterpret_cast<const RuleResult*>(
               &_RuleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RuleResult& a, RuleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResult* New() const final {
    return CreateMaybeMessage<RuleResult>(nullptr);
  }

  RuleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResult& from);
  void MergeFrom(const RuleResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResult";
  }
  protected:
  explicit RuleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kSectionIdentifierFieldNumber = 4,
    kBodyFieldNumber = 3,
  };
  // required string Identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required string DisplayName = 2;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // optional string SectionIdentifier = 4;
  bool has_sectionidentifier() const;
  private:
  bool _internal_has_sectionidentifier() const;
  public:
  void clear_sectionidentifier();
  const std::string& sectionidentifier() const;
  void set_sectionidentifier(const std::string& value);
  void set_sectionidentifier(std::string&& value);
  void set_sectionidentifier(const char* value);
  void set_sectionidentifier(const char* value, size_t size);
  std::string* mutable_sectionidentifier();
  std::string* release_sectionidentifier();
  void set_allocated_sectionidentifier(std::string* sectionidentifier);
  private:
  const std::string& _internal_sectionidentifier() const;
  void _internal_set_sectionidentifier(const std::string& value);
  std::string* _internal_mutable_sectionidentifier();
  public:

  // optional .RuleResultBody Body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::RuleResultBody& body() const;
  ::RuleResultBody* release_body();
  ::RuleResultBody* mutable_body();
  void set_allocated_body(::RuleResultBody* body);
  private:
  const ::RuleResultBody& _internal_body() const;
  ::RuleResultBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::RuleResultBody* body);
  ::RuleResultBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:RuleResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sectionidentifier_;
  ::RuleResultBody* body_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// -------------------------------------------------------------------

class RuleResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RuleResults) */ {
 public:
  inline RuleResults() : RuleResults(nullptr) {}
  virtual ~RuleResults();

  RuleResults(const RuleResults& from);
  RuleResults(RuleResults&& from) noexcept
    : RuleResults() {
    *this = ::std::move(from);
  }

  inline RuleResults& operator=(const RuleResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleResults& operator=(RuleResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleResults& default_instance();

  static inline const RuleResults* internal_default_instance() {
    return reinterpret_cast<const RuleResults*>(
               &_RuleResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RuleResults& a, RuleResults& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleResults* New() const final {
    return CreateMaybeMessage<RuleResults>(nullptr);
  }

  RuleResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleResults& from);
  void MergeFrom(const RuleResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RuleResults";
  }
  protected:
  explicit RuleResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuleResults_2eproto);
    return ::descriptor_table_RuleResults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleResultsFieldNumber = 1,
  };
  // repeated .RuleResult RuleResults = 1;
  int ruleresults_size() const;
  private:
  int _internal_ruleresults_size() const;
  public:
  void clear_ruleresults();
  ::RuleResult* mutable_ruleresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >*
      mutable_ruleresults();
  private:
  const ::RuleResult& _internal_ruleresults(int index) const;
  ::RuleResult* _internal_add_ruleresults();
  public:
  const ::RuleResult& ruleresults(int index) const;
  ::RuleResult* add_ruleresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >&
      ruleresults() const;

  // @@protoc_insertion_point(class_scope:RuleResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult > ruleresults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleResults_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuleResultMessage

// required string Message = 1;
inline bool RuleResultMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuleResultMessage::has_message() const {
  return _internal_has_message();
}
inline void RuleResultMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuleResultMessage::message() const {
  // @@protoc_insertion_point(field_get:RuleResultMessage.Message)
  return _internal_message();
}
inline void RuleResultMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:RuleResultMessage.Message)
}
inline std::string* RuleResultMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:RuleResultMessage.Message)
  return _internal_mutable_message();
}
inline const std::string& RuleResultMessage::_internal_message() const {
  return message_.Get();
}
inline void RuleResultMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuleResultMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RuleResultMessage.Message)
}
inline void RuleResultMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RuleResultMessage.Message)
}
inline void RuleResultMessage::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RuleResultMessage.Message)
}
inline std::string* RuleResultMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuleResultMessage::release_message() {
  // @@protoc_insertion_point(field_release:RuleResultMessage.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleResultMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RuleResultMessage.Message)
}

// required .RuleResultMessageType Type = 2;
inline bool RuleResultMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuleResultMessage::has_type() const {
  return _internal_has_type();
}
inline void RuleResultMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::RuleResultMessageType RuleResultMessage::_internal_type() const {
  return static_cast< ::RuleResultMessageType >(type_);
}
inline ::RuleResultMessageType RuleResultMessage::type() const {
  // @@protoc_insertion_point(field_get:RuleResultMessage.Type)
  return _internal_type();
}
inline void RuleResultMessage::_internal_set_type(::RuleResultMessageType value) {
  assert(::RuleResultMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void RuleResultMessage::set_type(::RuleResultMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RuleResultMessage.Type)
}

// -------------------------------------------------------------------

// RuleResultProposal

// required string Identifier = 1;
inline bool RuleResultProposal::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuleResultProposal::has_identifier() const {
  return _internal_has_identifier();
}
inline void RuleResultProposal::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuleResultProposal::identifier() const {
  // @@protoc_insertion_point(field_get:RuleResultProposal.Identifier)
  return _internal_identifier();
}
inline void RuleResultProposal::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:RuleResultProposal.Identifier)
}
inline std::string* RuleResultProposal::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:RuleResultProposal.Identifier)
  return _internal_mutable_identifier();
}
inline const std::string& RuleResultProposal::_internal_identifier() const {
  return identifier_.Get();
}
inline void RuleResultProposal::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuleResultProposal::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RuleResultProposal.Identifier)
}
inline void RuleResultProposal::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RuleResultProposal.Identifier)
}
inline void RuleResultProposal::set_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RuleResultProposal.Identifier)
}
inline std::string* RuleResultProposal::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuleResultProposal::release_identifier() {
  // @@protoc_insertion_point(field_release:RuleResultProposal.Identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleResultProposal::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RuleResultProposal.Identifier)
}

// -------------------------------------------------------------------

// RuleResultBodyItem

// optional .RuleResultMessage Message = 1;
inline bool RuleResultBodyItem::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_message() const {
  return _internal_has_message();
}
inline void RuleResultBodyItem::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RuleResultMessage& RuleResultBodyItem::_internal_message() const {
  const ::RuleResultMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::RuleResultMessage&>(
      ::_RuleResultMessage_default_instance_);
}
inline const ::RuleResultMessage& RuleResultBodyItem::message() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.Message)
  return _internal_message();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_message(
    ::RuleResultMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.Message)
}
inline ::RuleResultMessage* RuleResultBodyItem::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::RuleResultMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RuleResultMessage* RuleResultBodyItem::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.Message)
  _has_bits_[0] &= ~0x00000001u;
  ::RuleResultMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::RuleResultMessage* RuleResultBodyItem::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::RuleResultMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::RuleResultMessage* RuleResultBodyItem::mutable_message() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.Message)
  return _internal_mutable_message();
}
inline void RuleResultBodyItem::set_allocated_message(::RuleResultMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.Message)
}

// optional .ProfilerSectionTable Table = 2;
inline bool RuleResultBodyItem::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_table() const {
  return _internal_has_table();
}
inline const ::ProfilerSectionTable& RuleResultBodyItem::_internal_table() const {
  const ::ProfilerSectionTable* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionTable&>(
      ::_ProfilerSectionTable_default_instance_);
}
inline const ::ProfilerSectionTable& RuleResultBodyItem::table() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.Table)
  return _internal_table();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_table(
    ::ProfilerSectionTable* table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.Table)
}
inline ::ProfilerSectionTable* RuleResultBodyItem::release_table() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionTable* temp = table_;
  table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionTable* RuleResultBodyItem::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.Table)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilerSectionTable* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::ProfilerSectionTable* RuleResultBodyItem::_internal_mutable_table() {
  _has_bits_[0] |= 0x00000002u;
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionTable>(GetArena());
    table_ = p;
  }
  return table_;
}
inline ::ProfilerSectionTable* RuleResultBodyItem::mutable_table() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.Table)
  return _internal_mutable_table();
}
inline void RuleResultBodyItem::set_allocated_table(::ProfilerSectionTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table)->GetArena();
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.Table)
}

// optional .ProfilerSectionBarChart BarChart = 3;
inline bool RuleResultBodyItem::_internal_has_barchart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || barchart_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_barchart() const {
  return _internal_has_barchart();
}
inline const ::ProfilerSectionBarChart& RuleResultBodyItem::_internal_barchart() const {
  const ::ProfilerSectionBarChart* p = barchart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionBarChart&>(
      ::_ProfilerSectionBarChart_default_instance_);
}
inline const ::ProfilerSectionBarChart& RuleResultBodyItem::barchart() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.BarChart)
  return _internal_barchart();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_barchart(
    ::ProfilerSectionBarChart* barchart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barchart_);
  }
  barchart_ = barchart;
  if (barchart) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.BarChart)
}
inline ::ProfilerSectionBarChart* RuleResultBodyItem::release_barchart() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionBarChart* temp = barchart_;
  barchart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionBarChart* RuleResultBodyItem::unsafe_arena_release_barchart() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.BarChart)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfilerSectionBarChart* temp = barchart_;
  barchart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionBarChart* RuleResultBodyItem::_internal_mutable_barchart() {
  _has_bits_[0] |= 0x00000004u;
  if (barchart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionBarChart>(GetArena());
    barchart_ = p;
  }
  return barchart_;
}
inline ::ProfilerSectionBarChart* RuleResultBodyItem::mutable_barchart() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.BarChart)
  return _internal_mutable_barchart();
}
inline void RuleResultBodyItem::set_allocated_barchart(::ProfilerSectionBarChart* barchart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(barchart_);
  }
  if (barchart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barchart)->GetArena();
    if (message_arena != submessage_arena) {
      barchart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barchart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  barchart_ = barchart;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.BarChart)
}

// optional .ProfilerSectionHistogramChart HistogramChart = 4;
inline bool RuleResultBodyItem::_internal_has_histogramchart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || histogramchart_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_histogramchart() const {
  return _internal_has_histogramchart();
}
inline const ::ProfilerSectionHistogramChart& RuleResultBodyItem::_internal_histogramchart() const {
  const ::ProfilerSectionHistogramChart* p = histogramchart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionHistogramChart&>(
      ::_ProfilerSectionHistogramChart_default_instance_);
}
inline const ::ProfilerSectionHistogramChart& RuleResultBodyItem::histogramchart() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.HistogramChart)
  return _internal_histogramchart();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_histogramchart(
    ::ProfilerSectionHistogramChart* histogramchart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogramchart_);
  }
  histogramchart_ = histogramchart;
  if (histogramchart) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.HistogramChart)
}
inline ::ProfilerSectionHistogramChart* RuleResultBodyItem::release_histogramchart() {
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionHistogramChart* temp = histogramchart_;
  histogramchart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionHistogramChart* RuleResultBodyItem::unsafe_arena_release_histogramchart() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.HistogramChart)
  _has_bits_[0] &= ~0x00000008u;
  ::ProfilerSectionHistogramChart* temp = histogramchart_;
  histogramchart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionHistogramChart* RuleResultBodyItem::_internal_mutable_histogramchart() {
  _has_bits_[0] |= 0x00000008u;
  if (histogramchart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionHistogramChart>(GetArena());
    histogramchart_ = p;
  }
  return histogramchart_;
}
inline ::ProfilerSectionHistogramChart* RuleResultBodyItem::mutable_histogramchart() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.HistogramChart)
  return _internal_mutable_histogramchart();
}
inline void RuleResultBodyItem::set_allocated_histogramchart(::ProfilerSectionHistogramChart* histogramchart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogramchart_);
  }
  if (histogramchart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histogramchart)->GetArena();
    if (message_arena != submessage_arena) {
      histogramchart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogramchart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  histogramchart_ = histogramchart;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.HistogramChart)
}

// optional .ProfilerSectionLineChart LineChart = 5;
inline bool RuleResultBodyItem::_internal_has_linechart() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || linechart_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_linechart() const {
  return _internal_has_linechart();
}
inline const ::ProfilerSectionLineChart& RuleResultBodyItem::_internal_linechart() const {
  const ::ProfilerSectionLineChart* p = linechart_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilerSectionLineChart&>(
      ::_ProfilerSectionLineChart_default_instance_);
}
inline const ::ProfilerSectionLineChart& RuleResultBodyItem::linechart() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.LineChart)
  return _internal_linechart();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_linechart(
    ::ProfilerSectionLineChart* linechart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linechart_);
  }
  linechart_ = linechart;
  if (linechart) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.LineChart)
}
inline ::ProfilerSectionLineChart* RuleResultBodyItem::release_linechart() {
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionLineChart* temp = linechart_;
  linechart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfilerSectionLineChart* RuleResultBodyItem::unsafe_arena_release_linechart() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.LineChart)
  _has_bits_[0] &= ~0x00000010u;
  ::ProfilerSectionLineChart* temp = linechart_;
  linechart_ = nullptr;
  return temp;
}
inline ::ProfilerSectionLineChart* RuleResultBodyItem::_internal_mutable_linechart() {
  _has_bits_[0] |= 0x00000010u;
  if (linechart_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilerSectionLineChart>(GetArena());
    linechart_ = p;
  }
  return linechart_;
}
inline ::ProfilerSectionLineChart* RuleResultBodyItem::mutable_linechart() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.LineChart)
  return _internal_mutable_linechart();
}
inline void RuleResultBodyItem::set_allocated_linechart(::ProfilerSectionLineChart* linechart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linechart_);
  }
  if (linechart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linechart)->GetArena();
    if (message_arena != submessage_arena) {
      linechart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linechart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  linechart_ = linechart;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.LineChart)
}

// optional .RuleResultProposal Proposal = 6;
inline bool RuleResultBodyItem::_internal_has_proposal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || proposal_ != nullptr);
  return value;
}
inline bool RuleResultBodyItem::has_proposal() const {
  return _internal_has_proposal();
}
inline void RuleResultBodyItem::clear_proposal() {
  if (proposal_ != nullptr) proposal_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::RuleResultProposal& RuleResultBodyItem::_internal_proposal() const {
  const ::RuleResultProposal* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::RuleResultProposal&>(
      ::_RuleResultProposal_default_instance_);
}
inline const ::RuleResultProposal& RuleResultBodyItem::proposal() const {
  // @@protoc_insertion_point(field_get:RuleResultBodyItem.Proposal)
  return _internal_proposal();
}
inline void RuleResultBodyItem::unsafe_arena_set_allocated_proposal(
    ::RuleResultProposal* proposal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResultBodyItem.Proposal)
}
inline ::RuleResultProposal* RuleResultBodyItem::release_proposal() {
  _has_bits_[0] &= ~0x00000020u;
  ::RuleResultProposal* temp = proposal_;
  proposal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RuleResultProposal* RuleResultBodyItem::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:RuleResultBodyItem.Proposal)
  _has_bits_[0] &= ~0x00000020u;
  ::RuleResultProposal* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::RuleResultProposal* RuleResultBodyItem::_internal_mutable_proposal() {
  _has_bits_[0] |= 0x00000020u;
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::RuleResultProposal>(GetArena());
    proposal_ = p;
  }
  return proposal_;
}
inline ::RuleResultProposal* RuleResultBodyItem::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:RuleResultBodyItem.Proposal)
  return _internal_mutable_proposal();
}
inline void RuleResultBodyItem::set_allocated_proposal(::RuleResultProposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete proposal_;
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:RuleResultBodyItem.Proposal)
}

// -------------------------------------------------------------------

// RuleResultBody

// repeated .RuleResultBodyItem Items = 1;
inline int RuleResultBody::_internal_items_size() const {
  return items_.size();
}
inline int RuleResultBody::items_size() const {
  return _internal_items_size();
}
inline void RuleResultBody::clear_items() {
  items_.Clear();
}
inline ::RuleResultBodyItem* RuleResultBody::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:RuleResultBody.Items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResultBodyItem >*
RuleResultBody::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:RuleResultBody.Items)
  return &items_;
}
inline const ::RuleResultBodyItem& RuleResultBody::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::RuleResultBodyItem& RuleResultBody::items(int index) const {
  // @@protoc_insertion_point(field_get:RuleResultBody.Items)
  return _internal_items(index);
}
inline ::RuleResultBodyItem* RuleResultBody::_internal_add_items() {
  return items_.Add();
}
inline ::RuleResultBodyItem* RuleResultBody::add_items() {
  // @@protoc_insertion_point(field_add:RuleResultBody.Items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResultBodyItem >&
RuleResultBody::items() const {
  // @@protoc_insertion_point(field_list:RuleResultBody.Items)
  return items_;
}

// -------------------------------------------------------------------

// RuleResult

// required string Identifier = 1;
inline bool RuleResult::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuleResult::has_identifier() const {
  return _internal_has_identifier();
}
inline void RuleResult::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuleResult::identifier() const {
  // @@protoc_insertion_point(field_get:RuleResult.Identifier)
  return _internal_identifier();
}
inline void RuleResult::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:RuleResult.Identifier)
}
inline std::string* RuleResult::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:RuleResult.Identifier)
  return _internal_mutable_identifier();
}
inline const std::string& RuleResult::_internal_identifier() const {
  return identifier_.Get();
}
inline void RuleResult::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuleResult::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RuleResult.Identifier)
}
inline void RuleResult::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RuleResult.Identifier)
}
inline void RuleResult::set_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RuleResult.Identifier)
}
inline std::string* RuleResult::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuleResult::release_identifier() {
  // @@protoc_insertion_point(field_release:RuleResult.Identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleResult::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RuleResult.Identifier)
}

// required string DisplayName = 2;
inline bool RuleResult::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuleResult::has_displayname() const {
  return _internal_has_displayname();
}
inline void RuleResult::clear_displayname() {
  displayname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RuleResult::displayname() const {
  // @@protoc_insertion_point(field_get:RuleResult.DisplayName)
  return _internal_displayname();
}
inline void RuleResult::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:RuleResult.DisplayName)
}
inline std::string* RuleResult::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:RuleResult.DisplayName)
  return _internal_mutable_displayname();
}
inline const std::string& RuleResult::_internal_displayname() const {
  return displayname_.Get();
}
inline void RuleResult::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuleResult::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RuleResult.DisplayName)
}
inline void RuleResult::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RuleResult.DisplayName)
}
inline void RuleResult::set_displayname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RuleResult.DisplayName)
}
inline std::string* RuleResult::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000002u;
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuleResult::release_displayname() {
  // @@protoc_insertion_point(field_release:RuleResult.DisplayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return displayname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleResult::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RuleResult.DisplayName)
}

// optional .RuleResultBody Body = 3;
inline bool RuleResult::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool RuleResult::has_body() const {
  return _internal_has_body();
}
inline void RuleResult::clear_body() {
  if (body_ != nullptr) body_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::RuleResultBody& RuleResult::_internal_body() const {
  const ::RuleResultBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::RuleResultBody&>(
      ::_RuleResultBody_default_instance_);
}
inline const ::RuleResultBody& RuleResult::body() const {
  // @@protoc_insertion_point(field_get:RuleResult.Body)
  return _internal_body();
}
inline void RuleResult::unsafe_arena_set_allocated_body(
    ::RuleResultBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RuleResult.Body)
}
inline ::RuleResultBody* RuleResult::release_body() {
  _has_bits_[0] &= ~0x00000008u;
  ::RuleResultBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RuleResultBody* RuleResult::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:RuleResult.Body)
  _has_bits_[0] &= ~0x00000008u;
  ::RuleResultBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::RuleResultBody* RuleResult::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000008u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::RuleResultBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::RuleResultBody* RuleResult::mutable_body() {
  // @@protoc_insertion_point(field_mutable:RuleResult.Body)
  return _internal_mutable_body();
}
inline void RuleResult::set_allocated_body(::RuleResultBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:RuleResult.Body)
}

// optional string SectionIdentifier = 4;
inline bool RuleResult::_internal_has_sectionidentifier() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuleResult::has_sectionidentifier() const {
  return _internal_has_sectionidentifier();
}
inline void RuleResult::clear_sectionidentifier() {
  sectionidentifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RuleResult::sectionidentifier() const {
  // @@protoc_insertion_point(field_get:RuleResult.SectionIdentifier)
  return _internal_sectionidentifier();
}
inline void RuleResult::set_sectionidentifier(const std::string& value) {
  _internal_set_sectionidentifier(value);
  // @@protoc_insertion_point(field_set:RuleResult.SectionIdentifier)
}
inline std::string* RuleResult::mutable_sectionidentifier() {
  // @@protoc_insertion_point(field_mutable:RuleResult.SectionIdentifier)
  return _internal_mutable_sectionidentifier();
}
inline const std::string& RuleResult::_internal_sectionidentifier() const {
  return sectionidentifier_.Get();
}
inline void RuleResult::_internal_set_sectionidentifier(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sectionidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuleResult::set_sectionidentifier(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sectionidentifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RuleResult.SectionIdentifier)
}
inline void RuleResult::set_sectionidentifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sectionidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RuleResult.SectionIdentifier)
}
inline void RuleResult::set_sectionidentifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sectionidentifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RuleResult.SectionIdentifier)
}
inline std::string* RuleResult::_internal_mutable_sectionidentifier() {
  _has_bits_[0] |= 0x00000004u;
  return sectionidentifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuleResult::release_sectionidentifier() {
  // @@protoc_insertion_point(field_release:RuleResult.SectionIdentifier)
  if (!_internal_has_sectionidentifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sectionidentifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleResult::set_allocated_sectionidentifier(std::string* sectionidentifier) {
  if (sectionidentifier != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sectionidentifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sectionidentifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RuleResult.SectionIdentifier)
}

// -------------------------------------------------------------------

// RuleResults

// repeated .RuleResult RuleResults = 1;
inline int RuleResults::_internal_ruleresults_size() const {
  return ruleresults_.size();
}
inline int RuleResults::ruleresults_size() const {
  return _internal_ruleresults_size();
}
inline void RuleResults::clear_ruleresults() {
  ruleresults_.Clear();
}
inline ::RuleResult* RuleResults::mutable_ruleresults(int index) {
  // @@protoc_insertion_point(field_mutable:RuleResults.RuleResults)
  return ruleresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >*
RuleResults::mutable_ruleresults() {
  // @@protoc_insertion_point(field_mutable_list:RuleResults.RuleResults)
  return &ruleresults_;
}
inline const ::RuleResult& RuleResults::_internal_ruleresults(int index) const {
  return ruleresults_.Get(index);
}
inline const ::RuleResult& RuleResults::ruleresults(int index) const {
  // @@protoc_insertion_point(field_get:RuleResults.RuleResults)
  return _internal_ruleresults(index);
}
inline ::RuleResult* RuleResults::_internal_add_ruleresults() {
  return ruleresults_.Add();
}
inline ::RuleResult* RuleResults::add_ruleresults() {
  // @@protoc_insertion_point(field_add:RuleResults.RuleResults)
  return _internal_add_ruleresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RuleResult >&
RuleResults::ruleresults() const {
  // @@protoc_insertion_point(field_list:RuleResults.RuleResults)
  return ruleresults_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RuleResultMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RuleResultMessageType>() {
  return ::RuleResultMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RuleResults_2eproto
